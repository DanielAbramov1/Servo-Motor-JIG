
Beed_Servo_Motor_JIG-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008000  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ec  080082ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080082ec  080082ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082ec  080082ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080082f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000074  08008368  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  08008368  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cfa  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f82  00000000  00000000  00035d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00038d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00039f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c22b  00000000  00000000  0003afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177cb  00000000  00000000  000571eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7cd  00000000  00000000  0006e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  0010c1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080080a8 	.word	0x080080a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080080a8 	.word	0x080080a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_i2f>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	2800      	cmp	r0, #0
 800041c:	d013      	beq.n	8000446 <__aeabi_i2f+0x2e>
 800041e:	17c3      	asrs	r3, r0, #31
 8000420:	18c6      	adds	r6, r0, r3
 8000422:	405e      	eors	r6, r3
 8000424:	0fc4      	lsrs	r4, r0, #31
 8000426:	0030      	movs	r0, r6
 8000428:	f001 f960 	bl	80016ec <__clzsi2>
 800042c:	239e      	movs	r3, #158	; 0x9e
 800042e:	0005      	movs	r5, r0
 8000430:	1a1b      	subs	r3, r3, r0
 8000432:	2b96      	cmp	r3, #150	; 0x96
 8000434:	dc0f      	bgt.n	8000456 <__aeabi_i2f+0x3e>
 8000436:	2808      	cmp	r0, #8
 8000438:	dd01      	ble.n	800043e <__aeabi_i2f+0x26>
 800043a:	3d08      	subs	r5, #8
 800043c:	40ae      	lsls	r6, r5
 800043e:	0276      	lsls	r6, r6, #9
 8000440:	0a76      	lsrs	r6, r6, #9
 8000442:	b2d8      	uxtb	r0, r3
 8000444:	e002      	b.n	800044c <__aeabi_i2f+0x34>
 8000446:	2400      	movs	r4, #0
 8000448:	2000      	movs	r0, #0
 800044a:	2600      	movs	r6, #0
 800044c:	05c0      	lsls	r0, r0, #23
 800044e:	4330      	orrs	r0, r6
 8000450:	07e4      	lsls	r4, r4, #31
 8000452:	4320      	orrs	r0, r4
 8000454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000456:	2b99      	cmp	r3, #153	; 0x99
 8000458:	dd0c      	ble.n	8000474 <__aeabi_i2f+0x5c>
 800045a:	2205      	movs	r2, #5
 800045c:	0031      	movs	r1, r6
 800045e:	1a12      	subs	r2, r2, r0
 8000460:	40d1      	lsrs	r1, r2
 8000462:	000a      	movs	r2, r1
 8000464:	0001      	movs	r1, r0
 8000466:	0030      	movs	r0, r6
 8000468:	311b      	adds	r1, #27
 800046a:	4088      	lsls	r0, r1
 800046c:	1e41      	subs	r1, r0, #1
 800046e:	4188      	sbcs	r0, r1
 8000470:	4302      	orrs	r2, r0
 8000472:	0016      	movs	r6, r2
 8000474:	2d05      	cmp	r5, #5
 8000476:	dc12      	bgt.n	800049e <__aeabi_i2f+0x86>
 8000478:	0031      	movs	r1, r6
 800047a:	4f0d      	ldr	r7, [pc, #52]	; (80004b0 <__aeabi_i2f+0x98>)
 800047c:	4039      	ands	r1, r7
 800047e:	0772      	lsls	r2, r6, #29
 8000480:	d009      	beq.n	8000496 <__aeabi_i2f+0x7e>
 8000482:	200f      	movs	r0, #15
 8000484:	4030      	ands	r0, r6
 8000486:	2804      	cmp	r0, #4
 8000488:	d005      	beq.n	8000496 <__aeabi_i2f+0x7e>
 800048a:	3104      	adds	r1, #4
 800048c:	014a      	lsls	r2, r1, #5
 800048e:	d502      	bpl.n	8000496 <__aeabi_i2f+0x7e>
 8000490:	239f      	movs	r3, #159	; 0x9f
 8000492:	4039      	ands	r1, r7
 8000494:	1b5b      	subs	r3, r3, r5
 8000496:	0189      	lsls	r1, r1, #6
 8000498:	0a4e      	lsrs	r6, r1, #9
 800049a:	b2d8      	uxtb	r0, r3
 800049c:	e7d6      	b.n	800044c <__aeabi_i2f+0x34>
 800049e:	1f6a      	subs	r2, r5, #5
 80004a0:	4096      	lsls	r6, r2
 80004a2:	0031      	movs	r1, r6
 80004a4:	4f02      	ldr	r7, [pc, #8]	; (80004b0 <__aeabi_i2f+0x98>)
 80004a6:	4039      	ands	r1, r7
 80004a8:	0772      	lsls	r2, r6, #29
 80004aa:	d0f4      	beq.n	8000496 <__aeabi_i2f+0x7e>
 80004ac:	e7e9      	b.n	8000482 <__aeabi_i2f+0x6a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	fbffffff 	.word	0xfbffffff

080004b4 <__aeabi_dadd>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	464f      	mov	r7, r9
 80004b8:	4646      	mov	r6, r8
 80004ba:	46d6      	mov	lr, sl
 80004bc:	000d      	movs	r5, r1
 80004be:	0004      	movs	r4, r0
 80004c0:	b5c0      	push	{r6, r7, lr}
 80004c2:	001f      	movs	r7, r3
 80004c4:	0011      	movs	r1, r2
 80004c6:	0328      	lsls	r0, r5, #12
 80004c8:	0f62      	lsrs	r2, r4, #29
 80004ca:	0a40      	lsrs	r0, r0, #9
 80004cc:	4310      	orrs	r0, r2
 80004ce:	007a      	lsls	r2, r7, #1
 80004d0:	0d52      	lsrs	r2, r2, #21
 80004d2:	00e3      	lsls	r3, r4, #3
 80004d4:	033c      	lsls	r4, r7, #12
 80004d6:	4691      	mov	r9, r2
 80004d8:	0a64      	lsrs	r4, r4, #9
 80004da:	0ffa      	lsrs	r2, r7, #31
 80004dc:	0f4f      	lsrs	r7, r1, #29
 80004de:	006e      	lsls	r6, r5, #1
 80004e0:	4327      	orrs	r7, r4
 80004e2:	4692      	mov	sl, r2
 80004e4:	46b8      	mov	r8, r7
 80004e6:	0d76      	lsrs	r6, r6, #21
 80004e8:	0fed      	lsrs	r5, r5, #31
 80004ea:	00c9      	lsls	r1, r1, #3
 80004ec:	4295      	cmp	r5, r2
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x3e>
 80004f0:	e099      	b.n	8000626 <__aeabi_dadd+0x172>
 80004f2:	464c      	mov	r4, r9
 80004f4:	1b34      	subs	r4, r6, r4
 80004f6:	46a4      	mov	ip, r4
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_dadd+0x4a>
 80004fc:	e07c      	b.n	80005f8 <__aeabi_dadd+0x144>
 80004fe:	464a      	mov	r2, r9
 8000500:	2a00      	cmp	r2, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x52>
 8000504:	e0b8      	b.n	8000678 <__aeabi_dadd+0x1c4>
 8000506:	4ac5      	ldr	r2, [pc, #788]	; (800081c <__aeabi_dadd+0x368>)
 8000508:	4296      	cmp	r6, r2
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x5a>
 800050c:	e11c      	b.n	8000748 <__aeabi_dadd+0x294>
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	003c      	movs	r4, r7
 8000512:	0412      	lsls	r2, r2, #16
 8000514:	4314      	orrs	r4, r2
 8000516:	46a0      	mov	r8, r4
 8000518:	4662      	mov	r2, ip
 800051a:	2a38      	cmp	r2, #56	; 0x38
 800051c:	dd00      	ble.n	8000520 <__aeabi_dadd+0x6c>
 800051e:	e161      	b.n	80007e4 <__aeabi_dadd+0x330>
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x72>
 8000524:	e1cc      	b.n	80008c0 <__aeabi_dadd+0x40c>
 8000526:	4664      	mov	r4, ip
 8000528:	2220      	movs	r2, #32
 800052a:	1b12      	subs	r2, r2, r4
 800052c:	4644      	mov	r4, r8
 800052e:	4094      	lsls	r4, r2
 8000530:	000f      	movs	r7, r1
 8000532:	46a1      	mov	r9, r4
 8000534:	4664      	mov	r4, ip
 8000536:	4091      	lsls	r1, r2
 8000538:	40e7      	lsrs	r7, r4
 800053a:	464c      	mov	r4, r9
 800053c:	1e4a      	subs	r2, r1, #1
 800053e:	4191      	sbcs	r1, r2
 8000540:	433c      	orrs	r4, r7
 8000542:	4642      	mov	r2, r8
 8000544:	4321      	orrs	r1, r4
 8000546:	4664      	mov	r4, ip
 8000548:	40e2      	lsrs	r2, r4
 800054a:	1a80      	subs	r0, r0, r2
 800054c:	1a5c      	subs	r4, r3, r1
 800054e:	42a3      	cmp	r3, r4
 8000550:	419b      	sbcs	r3, r3
 8000552:	425f      	negs	r7, r3
 8000554:	1bc7      	subs	r7, r0, r7
 8000556:	023b      	lsls	r3, r7, #8
 8000558:	d400      	bmi.n	800055c <__aeabi_dadd+0xa8>
 800055a:	e0d0      	b.n	80006fe <__aeabi_dadd+0x24a>
 800055c:	027f      	lsls	r7, r7, #9
 800055e:	0a7f      	lsrs	r7, r7, #9
 8000560:	2f00      	cmp	r7, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0xb2>
 8000564:	e0ff      	b.n	8000766 <__aeabi_dadd+0x2b2>
 8000566:	0038      	movs	r0, r7
 8000568:	f001 f8c0 	bl	80016ec <__clzsi2>
 800056c:	0001      	movs	r1, r0
 800056e:	3908      	subs	r1, #8
 8000570:	2320      	movs	r3, #32
 8000572:	0022      	movs	r2, r4
 8000574:	1a5b      	subs	r3, r3, r1
 8000576:	408f      	lsls	r7, r1
 8000578:	40da      	lsrs	r2, r3
 800057a:	408c      	lsls	r4, r1
 800057c:	4317      	orrs	r7, r2
 800057e:	42b1      	cmp	r1, r6
 8000580:	da00      	bge.n	8000584 <__aeabi_dadd+0xd0>
 8000582:	e0ff      	b.n	8000784 <__aeabi_dadd+0x2d0>
 8000584:	1b89      	subs	r1, r1, r6
 8000586:	1c4b      	adds	r3, r1, #1
 8000588:	2b1f      	cmp	r3, #31
 800058a:	dd00      	ble.n	800058e <__aeabi_dadd+0xda>
 800058c:	e0a8      	b.n	80006e0 <__aeabi_dadd+0x22c>
 800058e:	2220      	movs	r2, #32
 8000590:	0039      	movs	r1, r7
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	0020      	movs	r0, r4
 8000596:	4094      	lsls	r4, r2
 8000598:	4091      	lsls	r1, r2
 800059a:	40d8      	lsrs	r0, r3
 800059c:	1e62      	subs	r2, r4, #1
 800059e:	4194      	sbcs	r4, r2
 80005a0:	40df      	lsrs	r7, r3
 80005a2:	2600      	movs	r6, #0
 80005a4:	4301      	orrs	r1, r0
 80005a6:	430c      	orrs	r4, r1
 80005a8:	0763      	lsls	r3, r4, #29
 80005aa:	d009      	beq.n	80005c0 <__aeabi_dadd+0x10c>
 80005ac:	230f      	movs	r3, #15
 80005ae:	4023      	ands	r3, r4
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d005      	beq.n	80005c0 <__aeabi_dadd+0x10c>
 80005b4:	1d23      	adds	r3, r4, #4
 80005b6:	42a3      	cmp	r3, r4
 80005b8:	41a4      	sbcs	r4, r4
 80005ba:	4264      	negs	r4, r4
 80005bc:	193f      	adds	r7, r7, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	023b      	lsls	r3, r7, #8
 80005c2:	d400      	bmi.n	80005c6 <__aeabi_dadd+0x112>
 80005c4:	e09e      	b.n	8000704 <__aeabi_dadd+0x250>
 80005c6:	4b95      	ldr	r3, [pc, #596]	; (800081c <__aeabi_dadd+0x368>)
 80005c8:	3601      	adds	r6, #1
 80005ca:	429e      	cmp	r6, r3
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x11c>
 80005ce:	e0b7      	b.n	8000740 <__aeabi_dadd+0x28c>
 80005d0:	4a93      	ldr	r2, [pc, #588]	; (8000820 <__aeabi_dadd+0x36c>)
 80005d2:	08e4      	lsrs	r4, r4, #3
 80005d4:	4017      	ands	r7, r2
 80005d6:	077b      	lsls	r3, r7, #29
 80005d8:	0571      	lsls	r1, r6, #21
 80005da:	027f      	lsls	r7, r7, #9
 80005dc:	4323      	orrs	r3, r4
 80005de:	0b3f      	lsrs	r7, r7, #12
 80005e0:	0d4a      	lsrs	r2, r1, #21
 80005e2:	0512      	lsls	r2, r2, #20
 80005e4:	433a      	orrs	r2, r7
 80005e6:	07ed      	lsls	r5, r5, #31
 80005e8:	432a      	orrs	r2, r5
 80005ea:	0018      	movs	r0, r3
 80005ec:	0011      	movs	r1, r2
 80005ee:	bce0      	pop	{r5, r6, r7}
 80005f0:	46ba      	mov	sl, r7
 80005f2:	46b1      	mov	r9, r6
 80005f4:	46a8      	mov	r8, r5
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d04b      	beq.n	8000694 <__aeabi_dadd+0x1e0>
 80005fc:	464c      	mov	r4, r9
 80005fe:	1ba4      	subs	r4, r4, r6
 8000600:	46a4      	mov	ip, r4
 8000602:	2e00      	cmp	r6, #0
 8000604:	d000      	beq.n	8000608 <__aeabi_dadd+0x154>
 8000606:	e123      	b.n	8000850 <__aeabi_dadd+0x39c>
 8000608:	0004      	movs	r4, r0
 800060a:	431c      	orrs	r4, r3
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x15c>
 800060e:	e1af      	b.n	8000970 <__aeabi_dadd+0x4bc>
 8000610:	4662      	mov	r2, ip
 8000612:	1e54      	subs	r4, r2, #1
 8000614:	2a01      	cmp	r2, #1
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x166>
 8000618:	e215      	b.n	8000a46 <__aeabi_dadd+0x592>
 800061a:	4d80      	ldr	r5, [pc, #512]	; (800081c <__aeabi_dadd+0x368>)
 800061c:	45ac      	cmp	ip, r5
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x16e>
 8000620:	e1c8      	b.n	80009b4 <__aeabi_dadd+0x500>
 8000622:	46a4      	mov	ip, r4
 8000624:	e11b      	b.n	800085e <__aeabi_dadd+0x3aa>
 8000626:	464a      	mov	r2, r9
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4694      	mov	ip, r2
 800062c:	2a00      	cmp	r2, #0
 800062e:	dc00      	bgt.n	8000632 <__aeabi_dadd+0x17e>
 8000630:	e0ac      	b.n	800078c <__aeabi_dadd+0x2d8>
 8000632:	464a      	mov	r2, r9
 8000634:	2a00      	cmp	r2, #0
 8000636:	d043      	beq.n	80006c0 <__aeabi_dadd+0x20c>
 8000638:	4a78      	ldr	r2, [pc, #480]	; (800081c <__aeabi_dadd+0x368>)
 800063a:	4296      	cmp	r6, r2
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x18c>
 800063e:	e1af      	b.n	80009a0 <__aeabi_dadd+0x4ec>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	003c      	movs	r4, r7
 8000644:	0412      	lsls	r2, r2, #16
 8000646:	4314      	orrs	r4, r2
 8000648:	46a0      	mov	r8, r4
 800064a:	4662      	mov	r2, ip
 800064c:	2a38      	cmp	r2, #56	; 0x38
 800064e:	dc67      	bgt.n	8000720 <__aeabi_dadd+0x26c>
 8000650:	2a1f      	cmp	r2, #31
 8000652:	dc00      	bgt.n	8000656 <__aeabi_dadd+0x1a2>
 8000654:	e15f      	b.n	8000916 <__aeabi_dadd+0x462>
 8000656:	4647      	mov	r7, r8
 8000658:	3a20      	subs	r2, #32
 800065a:	40d7      	lsrs	r7, r2
 800065c:	4662      	mov	r2, ip
 800065e:	2a20      	cmp	r2, #32
 8000660:	d005      	beq.n	800066e <__aeabi_dadd+0x1ba>
 8000662:	4664      	mov	r4, ip
 8000664:	2240      	movs	r2, #64	; 0x40
 8000666:	1b12      	subs	r2, r2, r4
 8000668:	4644      	mov	r4, r8
 800066a:	4094      	lsls	r4, r2
 800066c:	4321      	orrs	r1, r4
 800066e:	1e4a      	subs	r2, r1, #1
 8000670:	4191      	sbcs	r1, r2
 8000672:	000c      	movs	r4, r1
 8000674:	433c      	orrs	r4, r7
 8000676:	e057      	b.n	8000728 <__aeabi_dadd+0x274>
 8000678:	003a      	movs	r2, r7
 800067a:	430a      	orrs	r2, r1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1cc>
 800067e:	e105      	b.n	800088c <__aeabi_dadd+0x3d8>
 8000680:	0022      	movs	r2, r4
 8000682:	3a01      	subs	r2, #1
 8000684:	2c01      	cmp	r4, #1
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x1d6>
 8000688:	e182      	b.n	8000990 <__aeabi_dadd+0x4dc>
 800068a:	4c64      	ldr	r4, [pc, #400]	; (800081c <__aeabi_dadd+0x368>)
 800068c:	45a4      	cmp	ip, r4
 800068e:	d05b      	beq.n	8000748 <__aeabi_dadd+0x294>
 8000690:	4694      	mov	ip, r2
 8000692:	e741      	b.n	8000518 <__aeabi_dadd+0x64>
 8000694:	4c63      	ldr	r4, [pc, #396]	; (8000824 <__aeabi_dadd+0x370>)
 8000696:	1c77      	adds	r7, r6, #1
 8000698:	4227      	tst	r7, r4
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1ea>
 800069c:	e0c4      	b.n	8000828 <__aeabi_dadd+0x374>
 800069e:	0004      	movs	r4, r0
 80006a0:	431c      	orrs	r4, r3
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d000      	beq.n	80006a8 <__aeabi_dadd+0x1f4>
 80006a6:	e169      	b.n	800097c <__aeabi_dadd+0x4c8>
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x1fa>
 80006ac:	e1bf      	b.n	8000a2e <__aeabi_dadd+0x57a>
 80006ae:	4644      	mov	r4, r8
 80006b0:	430c      	orrs	r4, r1
 80006b2:	d000      	beq.n	80006b6 <__aeabi_dadd+0x202>
 80006b4:	e1d0      	b.n	8000a58 <__aeabi_dadd+0x5a4>
 80006b6:	0742      	lsls	r2, r0, #29
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	08c0      	lsrs	r0, r0, #3
 80006be:	e029      	b.n	8000714 <__aeabi_dadd+0x260>
 80006c0:	003a      	movs	r2, r7
 80006c2:	430a      	orrs	r2, r1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x214>
 80006c6:	e170      	b.n	80009aa <__aeabi_dadd+0x4f6>
 80006c8:	4662      	mov	r2, ip
 80006ca:	4664      	mov	r4, ip
 80006cc:	3a01      	subs	r2, #1
 80006ce:	2c01      	cmp	r4, #1
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x220>
 80006d2:	e0e0      	b.n	8000896 <__aeabi_dadd+0x3e2>
 80006d4:	4c51      	ldr	r4, [pc, #324]	; (800081c <__aeabi_dadd+0x368>)
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x228>
 80006da:	e161      	b.n	80009a0 <__aeabi_dadd+0x4ec>
 80006dc:	4694      	mov	ip, r2
 80006de:	e7b4      	b.n	800064a <__aeabi_dadd+0x196>
 80006e0:	003a      	movs	r2, r7
 80006e2:	391f      	subs	r1, #31
 80006e4:	40ca      	lsrs	r2, r1
 80006e6:	0011      	movs	r1, r2
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d003      	beq.n	80006f4 <__aeabi_dadd+0x240>
 80006ec:	2240      	movs	r2, #64	; 0x40
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	409f      	lsls	r7, r3
 80006f2:	433c      	orrs	r4, r7
 80006f4:	1e63      	subs	r3, r4, #1
 80006f6:	419c      	sbcs	r4, r3
 80006f8:	2700      	movs	r7, #0
 80006fa:	2600      	movs	r6, #0
 80006fc:	430c      	orrs	r4, r1
 80006fe:	0763      	lsls	r3, r4, #29
 8000700:	d000      	beq.n	8000704 <__aeabi_dadd+0x250>
 8000702:	e753      	b.n	80005ac <__aeabi_dadd+0xf8>
 8000704:	46b4      	mov	ip, r6
 8000706:	08e4      	lsrs	r4, r4, #3
 8000708:	077b      	lsls	r3, r7, #29
 800070a:	4323      	orrs	r3, r4
 800070c:	08f8      	lsrs	r0, r7, #3
 800070e:	4a43      	ldr	r2, [pc, #268]	; (800081c <__aeabi_dadd+0x368>)
 8000710:	4594      	cmp	ip, r2
 8000712:	d01d      	beq.n	8000750 <__aeabi_dadd+0x29c>
 8000714:	4662      	mov	r2, ip
 8000716:	0307      	lsls	r7, r0, #12
 8000718:	0552      	lsls	r2, r2, #21
 800071a:	0b3f      	lsrs	r7, r7, #12
 800071c:	0d52      	lsrs	r2, r2, #21
 800071e:	e760      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000720:	4644      	mov	r4, r8
 8000722:	430c      	orrs	r4, r1
 8000724:	1e62      	subs	r2, r4, #1
 8000726:	4194      	sbcs	r4, r2
 8000728:	18e4      	adds	r4, r4, r3
 800072a:	429c      	cmp	r4, r3
 800072c:	419b      	sbcs	r3, r3
 800072e:	425f      	negs	r7, r3
 8000730:	183f      	adds	r7, r7, r0
 8000732:	023b      	lsls	r3, r7, #8
 8000734:	d5e3      	bpl.n	80006fe <__aeabi_dadd+0x24a>
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <__aeabi_dadd+0x368>)
 8000738:	3601      	adds	r6, #1
 800073a:	429e      	cmp	r6, r3
 800073c:	d000      	beq.n	8000740 <__aeabi_dadd+0x28c>
 800073e:	e0b5      	b.n	80008ac <__aeabi_dadd+0x3f8>
 8000740:	0032      	movs	r2, r6
 8000742:	2700      	movs	r7, #0
 8000744:	2300      	movs	r3, #0
 8000746:	e74c      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000748:	0742      	lsls	r2, r0, #29
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	4313      	orrs	r3, r2
 800074e:	08c0      	lsrs	r0, r0, #3
 8000750:	001a      	movs	r2, r3
 8000752:	4302      	orrs	r2, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x2a4>
 8000756:	e1e1      	b.n	8000b1c <__aeabi_dadd+0x668>
 8000758:	2780      	movs	r7, #128	; 0x80
 800075a:	033f      	lsls	r7, r7, #12
 800075c:	4307      	orrs	r7, r0
 800075e:	033f      	lsls	r7, r7, #12
 8000760:	4a2e      	ldr	r2, [pc, #184]	; (800081c <__aeabi_dadd+0x368>)
 8000762:	0b3f      	lsrs	r7, r7, #12
 8000764:	e73d      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000766:	0020      	movs	r0, r4
 8000768:	f000 ffc0 	bl	80016ec <__clzsi2>
 800076c:	0001      	movs	r1, r0
 800076e:	3118      	adds	r1, #24
 8000770:	291f      	cmp	r1, #31
 8000772:	dc00      	bgt.n	8000776 <__aeabi_dadd+0x2c2>
 8000774:	e6fc      	b.n	8000570 <__aeabi_dadd+0xbc>
 8000776:	3808      	subs	r0, #8
 8000778:	4084      	lsls	r4, r0
 800077a:	0027      	movs	r7, r4
 800077c:	2400      	movs	r4, #0
 800077e:	42b1      	cmp	r1, r6
 8000780:	db00      	blt.n	8000784 <__aeabi_dadd+0x2d0>
 8000782:	e6ff      	b.n	8000584 <__aeabi_dadd+0xd0>
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <__aeabi_dadd+0x36c>)
 8000786:	1a76      	subs	r6, r6, r1
 8000788:	4017      	ands	r7, r2
 800078a:	e70d      	b.n	80005a8 <__aeabi_dadd+0xf4>
 800078c:	2a00      	cmp	r2, #0
 800078e:	d02f      	beq.n	80007f0 <__aeabi_dadd+0x33c>
 8000790:	464a      	mov	r2, r9
 8000792:	1b92      	subs	r2, r2, r6
 8000794:	4694      	mov	ip, r2
 8000796:	2e00      	cmp	r6, #0
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x2e8>
 800079a:	e0ad      	b.n	80008f8 <__aeabi_dadd+0x444>
 800079c:	4a1f      	ldr	r2, [pc, #124]	; (800081c <__aeabi_dadd+0x368>)
 800079e:	4591      	cmp	r9, r2
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x2f0>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x510>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0412      	lsls	r2, r2, #16
 80007a8:	4310      	orrs	r0, r2
 80007aa:	4662      	mov	r2, ip
 80007ac:	2a38      	cmp	r2, #56	; 0x38
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_dadd+0x2fe>
 80007b0:	e10f      	b.n	80009d2 <__aeabi_dadd+0x51e>
 80007b2:	2a1f      	cmp	r2, #31
 80007b4:	dd00      	ble.n	80007b8 <__aeabi_dadd+0x304>
 80007b6:	e180      	b.n	8000aba <__aeabi_dadd+0x606>
 80007b8:	4664      	mov	r4, ip
 80007ba:	2220      	movs	r2, #32
 80007bc:	001e      	movs	r6, r3
 80007be:	1b12      	subs	r2, r2, r4
 80007c0:	4667      	mov	r7, ip
 80007c2:	0004      	movs	r4, r0
 80007c4:	4093      	lsls	r3, r2
 80007c6:	4094      	lsls	r4, r2
 80007c8:	40fe      	lsrs	r6, r7
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	4193      	sbcs	r3, r2
 80007ce:	40f8      	lsrs	r0, r7
 80007d0:	4334      	orrs	r4, r6
 80007d2:	431c      	orrs	r4, r3
 80007d4:	4480      	add	r8, r0
 80007d6:	1864      	adds	r4, r4, r1
 80007d8:	428c      	cmp	r4, r1
 80007da:	41bf      	sbcs	r7, r7
 80007dc:	427f      	negs	r7, r7
 80007de:	464e      	mov	r6, r9
 80007e0:	4447      	add	r7, r8
 80007e2:	e7a6      	b.n	8000732 <__aeabi_dadd+0x27e>
 80007e4:	4642      	mov	r2, r8
 80007e6:	430a      	orrs	r2, r1
 80007e8:	0011      	movs	r1, r2
 80007ea:	1e4a      	subs	r2, r1, #1
 80007ec:	4191      	sbcs	r1, r2
 80007ee:	e6ad      	b.n	800054c <__aeabi_dadd+0x98>
 80007f0:	4c0c      	ldr	r4, [pc, #48]	; (8000824 <__aeabi_dadd+0x370>)
 80007f2:	1c72      	adds	r2, r6, #1
 80007f4:	4222      	tst	r2, r4
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x346>
 80007f8:	e0a1      	b.n	800093e <__aeabi_dadd+0x48a>
 80007fa:	0002      	movs	r2, r0
 80007fc:	431a      	orrs	r2, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_dadd+0x350>
 8000802:	e0fa      	b.n	80009fa <__aeabi_dadd+0x546>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x356>
 8000808:	e145      	b.n	8000a96 <__aeabi_dadd+0x5e2>
 800080a:	003a      	movs	r2, r7
 800080c:	430a      	orrs	r2, r1
 800080e:	d000      	beq.n	8000812 <__aeabi_dadd+0x35e>
 8000810:	e146      	b.n	8000aa0 <__aeabi_dadd+0x5ec>
 8000812:	0742      	lsls	r2, r0, #29
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	4313      	orrs	r3, r2
 8000818:	08c0      	lsrs	r0, r0, #3
 800081a:	e77b      	b.n	8000714 <__aeabi_dadd+0x260>
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4647      	mov	r7, r8
 800082a:	1a5c      	subs	r4, r3, r1
 800082c:	1bc2      	subs	r2, r0, r7
 800082e:	42a3      	cmp	r3, r4
 8000830:	41bf      	sbcs	r7, r7
 8000832:	427f      	negs	r7, r7
 8000834:	46b9      	mov	r9, r7
 8000836:	0017      	movs	r7, r2
 8000838:	464a      	mov	r2, r9
 800083a:	1abf      	subs	r7, r7, r2
 800083c:	023a      	lsls	r2, r7, #8
 800083e:	d500      	bpl.n	8000842 <__aeabi_dadd+0x38e>
 8000840:	e08d      	b.n	800095e <__aeabi_dadd+0x4aa>
 8000842:	0023      	movs	r3, r4
 8000844:	433b      	orrs	r3, r7
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x396>
 8000848:	e68a      	b.n	8000560 <__aeabi_dadd+0xac>
 800084a:	2000      	movs	r0, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e761      	b.n	8000714 <__aeabi_dadd+0x260>
 8000850:	4cb4      	ldr	r4, [pc, #720]	; (8000b24 <__aeabi_dadd+0x670>)
 8000852:	45a1      	cmp	r9, r4
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x3a4>
 8000856:	e0ad      	b.n	80009b4 <__aeabi_dadd+0x500>
 8000858:	2480      	movs	r4, #128	; 0x80
 800085a:	0424      	lsls	r4, r4, #16
 800085c:	4320      	orrs	r0, r4
 800085e:	4664      	mov	r4, ip
 8000860:	2c38      	cmp	r4, #56	; 0x38
 8000862:	dc3d      	bgt.n	80008e0 <__aeabi_dadd+0x42c>
 8000864:	4662      	mov	r2, ip
 8000866:	2c1f      	cmp	r4, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3b8>
 800086a:	e0b7      	b.n	80009dc <__aeabi_dadd+0x528>
 800086c:	2520      	movs	r5, #32
 800086e:	001e      	movs	r6, r3
 8000870:	1b2d      	subs	r5, r5, r4
 8000872:	0004      	movs	r4, r0
 8000874:	40ab      	lsls	r3, r5
 8000876:	40ac      	lsls	r4, r5
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4642      	mov	r2, r8
 800087e:	1e5d      	subs	r5, r3, #1
 8000880:	41ab      	sbcs	r3, r5
 8000882:	4334      	orrs	r4, r6
 8000884:	1a12      	subs	r2, r2, r0
 8000886:	4690      	mov	r8, r2
 8000888:	4323      	orrs	r3, r4
 800088a:	e02c      	b.n	80008e6 <__aeabi_dadd+0x432>
 800088c:	0742      	lsls	r2, r0, #29
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	4313      	orrs	r3, r2
 8000892:	08c0      	lsrs	r0, r0, #3
 8000894:	e73b      	b.n	800070e <__aeabi_dadd+0x25a>
 8000896:	185c      	adds	r4, r3, r1
 8000898:	429c      	cmp	r4, r3
 800089a:	419b      	sbcs	r3, r3
 800089c:	4440      	add	r0, r8
 800089e:	425b      	negs	r3, r3
 80008a0:	18c7      	adds	r7, r0, r3
 80008a2:	2601      	movs	r6, #1
 80008a4:	023b      	lsls	r3, r7, #8
 80008a6:	d400      	bmi.n	80008aa <__aeabi_dadd+0x3f6>
 80008a8:	e729      	b.n	80006fe <__aeabi_dadd+0x24a>
 80008aa:	2602      	movs	r6, #2
 80008ac:	4a9e      	ldr	r2, [pc, #632]	; (8000b28 <__aeabi_dadd+0x674>)
 80008ae:	0863      	lsrs	r3, r4, #1
 80008b0:	4017      	ands	r7, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	4014      	ands	r4, r2
 80008b6:	431c      	orrs	r4, r3
 80008b8:	07fb      	lsls	r3, r7, #31
 80008ba:	431c      	orrs	r4, r3
 80008bc:	087f      	lsrs	r7, r7, #1
 80008be:	e673      	b.n	80005a8 <__aeabi_dadd+0xf4>
 80008c0:	4644      	mov	r4, r8
 80008c2:	3a20      	subs	r2, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	4662      	mov	r2, ip
 80008c8:	2a20      	cmp	r2, #32
 80008ca:	d005      	beq.n	80008d8 <__aeabi_dadd+0x424>
 80008cc:	4667      	mov	r7, ip
 80008ce:	2240      	movs	r2, #64	; 0x40
 80008d0:	1bd2      	subs	r2, r2, r7
 80008d2:	4647      	mov	r7, r8
 80008d4:	4097      	lsls	r7, r2
 80008d6:	4339      	orrs	r1, r7
 80008d8:	1e4a      	subs	r2, r1, #1
 80008da:	4191      	sbcs	r1, r2
 80008dc:	4321      	orrs	r1, r4
 80008de:	e635      	b.n	800054c <__aeabi_dadd+0x98>
 80008e0:	4303      	orrs	r3, r0
 80008e2:	1e58      	subs	r0, r3, #1
 80008e4:	4183      	sbcs	r3, r0
 80008e6:	1acc      	subs	r4, r1, r3
 80008e8:	42a1      	cmp	r1, r4
 80008ea:	41bf      	sbcs	r7, r7
 80008ec:	4643      	mov	r3, r8
 80008ee:	427f      	negs	r7, r7
 80008f0:	4655      	mov	r5, sl
 80008f2:	464e      	mov	r6, r9
 80008f4:	1bdf      	subs	r7, r3, r7
 80008f6:	e62e      	b.n	8000556 <__aeabi_dadd+0xa2>
 80008f8:	0002      	movs	r2, r0
 80008fa:	431a      	orrs	r2, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x44c>
 80008fe:	e0bd      	b.n	8000a7c <__aeabi_dadd+0x5c8>
 8000900:	4662      	mov	r2, ip
 8000902:	4664      	mov	r4, ip
 8000904:	3a01      	subs	r2, #1
 8000906:	2c01      	cmp	r4, #1
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x458>
 800090a:	e0e5      	b.n	8000ad8 <__aeabi_dadd+0x624>
 800090c:	4c85      	ldr	r4, [pc, #532]	; (8000b24 <__aeabi_dadd+0x670>)
 800090e:	45a4      	cmp	ip, r4
 8000910:	d058      	beq.n	80009c4 <__aeabi_dadd+0x510>
 8000912:	4694      	mov	ip, r2
 8000914:	e749      	b.n	80007aa <__aeabi_dadd+0x2f6>
 8000916:	4664      	mov	r4, ip
 8000918:	2220      	movs	r2, #32
 800091a:	1b12      	subs	r2, r2, r4
 800091c:	4644      	mov	r4, r8
 800091e:	4094      	lsls	r4, r2
 8000920:	000f      	movs	r7, r1
 8000922:	46a1      	mov	r9, r4
 8000924:	4664      	mov	r4, ip
 8000926:	4091      	lsls	r1, r2
 8000928:	40e7      	lsrs	r7, r4
 800092a:	464c      	mov	r4, r9
 800092c:	1e4a      	subs	r2, r1, #1
 800092e:	4191      	sbcs	r1, r2
 8000930:	433c      	orrs	r4, r7
 8000932:	4642      	mov	r2, r8
 8000934:	430c      	orrs	r4, r1
 8000936:	4661      	mov	r1, ip
 8000938:	40ca      	lsrs	r2, r1
 800093a:	1880      	adds	r0, r0, r2
 800093c:	e6f4      	b.n	8000728 <__aeabi_dadd+0x274>
 800093e:	4c79      	ldr	r4, [pc, #484]	; (8000b24 <__aeabi_dadd+0x670>)
 8000940:	42a2      	cmp	r2, r4
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x492>
 8000944:	e6fd      	b.n	8000742 <__aeabi_dadd+0x28e>
 8000946:	1859      	adds	r1, r3, r1
 8000948:	4299      	cmp	r1, r3
 800094a:	419b      	sbcs	r3, r3
 800094c:	4440      	add	r0, r8
 800094e:	425f      	negs	r7, r3
 8000950:	19c7      	adds	r7, r0, r7
 8000952:	07fc      	lsls	r4, r7, #31
 8000954:	0849      	lsrs	r1, r1, #1
 8000956:	0016      	movs	r6, r2
 8000958:	430c      	orrs	r4, r1
 800095a:	087f      	lsrs	r7, r7, #1
 800095c:	e6cf      	b.n	80006fe <__aeabi_dadd+0x24a>
 800095e:	1acc      	subs	r4, r1, r3
 8000960:	42a1      	cmp	r1, r4
 8000962:	41bf      	sbcs	r7, r7
 8000964:	4643      	mov	r3, r8
 8000966:	427f      	negs	r7, r7
 8000968:	1a18      	subs	r0, r3, r0
 800096a:	4655      	mov	r5, sl
 800096c:	1bc7      	subs	r7, r0, r7
 800096e:	e5f7      	b.n	8000560 <__aeabi_dadd+0xac>
 8000970:	08c9      	lsrs	r1, r1, #3
 8000972:	077b      	lsls	r3, r7, #29
 8000974:	4655      	mov	r5, sl
 8000976:	430b      	orrs	r3, r1
 8000978:	08f8      	lsrs	r0, r7, #3
 800097a:	e6c8      	b.n	800070e <__aeabi_dadd+0x25a>
 800097c:	2c00      	cmp	r4, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dadd+0x4ce>
 8000980:	e081      	b.n	8000a86 <__aeabi_dadd+0x5d2>
 8000982:	4643      	mov	r3, r8
 8000984:	430b      	orrs	r3, r1
 8000986:	d115      	bne.n	80009b4 <__aeabi_dadd+0x500>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	2500      	movs	r5, #0
 800098c:	0300      	lsls	r0, r0, #12
 800098e:	e6e3      	b.n	8000758 <__aeabi_dadd+0x2a4>
 8000990:	1a5c      	subs	r4, r3, r1
 8000992:	42a3      	cmp	r3, r4
 8000994:	419b      	sbcs	r3, r3
 8000996:	1bc7      	subs	r7, r0, r7
 8000998:	425b      	negs	r3, r3
 800099a:	2601      	movs	r6, #1
 800099c:	1aff      	subs	r7, r7, r3
 800099e:	e5da      	b.n	8000556 <__aeabi_dadd+0xa2>
 80009a0:	0742      	lsls	r2, r0, #29
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	08c0      	lsrs	r0, r0, #3
 80009a8:	e6d2      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009aa:	0742      	lsls	r2, r0, #29
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	08c0      	lsrs	r0, r0, #3
 80009b2:	e6ac      	b.n	800070e <__aeabi_dadd+0x25a>
 80009b4:	4643      	mov	r3, r8
 80009b6:	4642      	mov	r2, r8
 80009b8:	08c9      	lsrs	r1, r1, #3
 80009ba:	075b      	lsls	r3, r3, #29
 80009bc:	4655      	mov	r5, sl
 80009be:	430b      	orrs	r3, r1
 80009c0:	08d0      	lsrs	r0, r2, #3
 80009c2:	e6c5      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009c4:	4643      	mov	r3, r8
 80009c6:	4642      	mov	r2, r8
 80009c8:	075b      	lsls	r3, r3, #29
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	430b      	orrs	r3, r1
 80009ce:	08d0      	lsrs	r0, r2, #3
 80009d0:	e6be      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009d2:	4303      	orrs	r3, r0
 80009d4:	001c      	movs	r4, r3
 80009d6:	1e63      	subs	r3, r4, #1
 80009d8:	419c      	sbcs	r4, r3
 80009da:	e6fc      	b.n	80007d6 <__aeabi_dadd+0x322>
 80009dc:	0002      	movs	r2, r0
 80009de:	3c20      	subs	r4, #32
 80009e0:	40e2      	lsrs	r2, r4
 80009e2:	0014      	movs	r4, r2
 80009e4:	4662      	mov	r2, ip
 80009e6:	2a20      	cmp	r2, #32
 80009e8:	d003      	beq.n	80009f2 <__aeabi_dadd+0x53e>
 80009ea:	2540      	movs	r5, #64	; 0x40
 80009ec:	1aad      	subs	r5, r5, r2
 80009ee:	40a8      	lsls	r0, r5
 80009f0:	4303      	orrs	r3, r0
 80009f2:	1e58      	subs	r0, r3, #1
 80009f4:	4183      	sbcs	r3, r0
 80009f6:	4323      	orrs	r3, r4
 80009f8:	e775      	b.n	80008e6 <__aeabi_dadd+0x432>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d0e2      	beq.n	80009c4 <__aeabi_dadd+0x510>
 80009fe:	003a      	movs	r2, r7
 8000a00:	430a      	orrs	r2, r1
 8000a02:	d0cd      	beq.n	80009a0 <__aeabi_dadd+0x4ec>
 8000a04:	0742      	lsls	r2, r0, #29
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	08c0      	lsrs	r0, r0, #3
 8000a0e:	0312      	lsls	r2, r2, #12
 8000a10:	4210      	tst	r0, r2
 8000a12:	d006      	beq.n	8000a22 <__aeabi_dadd+0x56e>
 8000a14:	08fc      	lsrs	r4, r7, #3
 8000a16:	4214      	tst	r4, r2
 8000a18:	d103      	bne.n	8000a22 <__aeabi_dadd+0x56e>
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	08cb      	lsrs	r3, r1, #3
 8000a1e:	077a      	lsls	r2, r7, #29
 8000a20:	4313      	orrs	r3, r2
 8000a22:	0f5a      	lsrs	r2, r3, #29
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	0752      	lsls	r2, r2, #29
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	e690      	b.n	8000750 <__aeabi_dadd+0x29c>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	430b      	orrs	r3, r1
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x582>
 8000a34:	e709      	b.n	800084a <__aeabi_dadd+0x396>
 8000a36:	4643      	mov	r3, r8
 8000a38:	4642      	mov	r2, r8
 8000a3a:	08c9      	lsrs	r1, r1, #3
 8000a3c:	075b      	lsls	r3, r3, #29
 8000a3e:	4655      	mov	r5, sl
 8000a40:	430b      	orrs	r3, r1
 8000a42:	08d0      	lsrs	r0, r2, #3
 8000a44:	e666      	b.n	8000714 <__aeabi_dadd+0x260>
 8000a46:	1acc      	subs	r4, r1, r3
 8000a48:	42a1      	cmp	r1, r4
 8000a4a:	4189      	sbcs	r1, r1
 8000a4c:	1a3f      	subs	r7, r7, r0
 8000a4e:	4249      	negs	r1, r1
 8000a50:	4655      	mov	r5, sl
 8000a52:	2601      	movs	r6, #1
 8000a54:	1a7f      	subs	r7, r7, r1
 8000a56:	e57e      	b.n	8000556 <__aeabi_dadd+0xa2>
 8000a58:	4642      	mov	r2, r8
 8000a5a:	1a5c      	subs	r4, r3, r1
 8000a5c:	1a87      	subs	r7, r0, r2
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	4252      	negs	r2, r2
 8000a64:	1abf      	subs	r7, r7, r2
 8000a66:	023a      	lsls	r2, r7, #8
 8000a68:	d53d      	bpl.n	8000ae6 <__aeabi_dadd+0x632>
 8000a6a:	1acc      	subs	r4, r1, r3
 8000a6c:	42a1      	cmp	r1, r4
 8000a6e:	4189      	sbcs	r1, r1
 8000a70:	4643      	mov	r3, r8
 8000a72:	4249      	negs	r1, r1
 8000a74:	1a1f      	subs	r7, r3, r0
 8000a76:	4655      	mov	r5, sl
 8000a78:	1a7f      	subs	r7, r7, r1
 8000a7a:	e595      	b.n	80005a8 <__aeabi_dadd+0xf4>
 8000a7c:	077b      	lsls	r3, r7, #29
 8000a7e:	08c9      	lsrs	r1, r1, #3
 8000a80:	430b      	orrs	r3, r1
 8000a82:	08f8      	lsrs	r0, r7, #3
 8000a84:	e643      	b.n	800070e <__aeabi_dadd+0x25a>
 8000a86:	4644      	mov	r4, r8
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	430c      	orrs	r4, r1
 8000a8c:	d130      	bne.n	8000af0 <__aeabi_dadd+0x63c>
 8000a8e:	0742      	lsls	r2, r0, #29
 8000a90:	4313      	orrs	r3, r2
 8000a92:	08c0      	lsrs	r0, r0, #3
 8000a94:	e65c      	b.n	8000750 <__aeabi_dadd+0x29c>
 8000a96:	077b      	lsls	r3, r7, #29
 8000a98:	08c9      	lsrs	r1, r1, #3
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	08f8      	lsrs	r0, r7, #3
 8000a9e:	e639      	b.n	8000714 <__aeabi_dadd+0x260>
 8000aa0:	185c      	adds	r4, r3, r1
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4440      	add	r0, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c7      	adds	r7, r0, r3
 8000aac:	023b      	lsls	r3, r7, #8
 8000aae:	d400      	bmi.n	8000ab2 <__aeabi_dadd+0x5fe>
 8000ab0:	e625      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <__aeabi_dadd+0x674>)
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	401f      	ands	r7, r3
 8000ab8:	e621      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000aba:	0004      	movs	r4, r0
 8000abc:	3a20      	subs	r2, #32
 8000abe:	40d4      	lsrs	r4, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	2a20      	cmp	r2, #32
 8000ac4:	d004      	beq.n	8000ad0 <__aeabi_dadd+0x61c>
 8000ac6:	2240      	movs	r2, #64	; 0x40
 8000ac8:	4666      	mov	r6, ip
 8000aca:	1b92      	subs	r2, r2, r6
 8000acc:	4090      	lsls	r0, r2
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	4193      	sbcs	r3, r2
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	e67e      	b.n	80007d6 <__aeabi_dadd+0x322>
 8000ad8:	185c      	adds	r4, r3, r1
 8000ada:	428c      	cmp	r4, r1
 8000adc:	4189      	sbcs	r1, r1
 8000ade:	4440      	add	r0, r8
 8000ae0:	4249      	negs	r1, r1
 8000ae2:	1847      	adds	r7, r0, r1
 8000ae4:	e6dd      	b.n	80008a2 <__aeabi_dadd+0x3ee>
 8000ae6:	0023      	movs	r3, r4
 8000ae8:	433b      	orrs	r3, r7
 8000aea:	d100      	bne.n	8000aee <__aeabi_dadd+0x63a>
 8000aec:	e6ad      	b.n	800084a <__aeabi_dadd+0x396>
 8000aee:	e606      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000af0:	0744      	lsls	r4, r0, #29
 8000af2:	4323      	orrs	r3, r4
 8000af4:	2480      	movs	r4, #128	; 0x80
 8000af6:	08c0      	lsrs	r0, r0, #3
 8000af8:	0324      	lsls	r4, r4, #12
 8000afa:	4220      	tst	r0, r4
 8000afc:	d008      	beq.n	8000b10 <__aeabi_dadd+0x65c>
 8000afe:	4642      	mov	r2, r8
 8000b00:	08d6      	lsrs	r6, r2, #3
 8000b02:	4226      	tst	r6, r4
 8000b04:	d104      	bne.n	8000b10 <__aeabi_dadd+0x65c>
 8000b06:	4655      	mov	r5, sl
 8000b08:	0030      	movs	r0, r6
 8000b0a:	08cb      	lsrs	r3, r1, #3
 8000b0c:	0751      	lsls	r1, r2, #29
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	0f5a      	lsrs	r2, r3, #29
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	0752      	lsls	r2, r2, #29
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	e619      	b.n	8000750 <__aeabi_dadd+0x29c>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4a01      	ldr	r2, [pc, #4]	; (8000b24 <__aeabi_dadd+0x670>)
 8000b20:	001f      	movs	r7, r3
 8000b22:	e55e      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff

08000b2c <__aeabi_ddiv>:
 8000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2e:	4657      	mov	r7, sl
 8000b30:	464e      	mov	r6, r9
 8000b32:	4645      	mov	r5, r8
 8000b34:	46de      	mov	lr, fp
 8000b36:	b5e0      	push	{r5, r6, r7, lr}
 8000b38:	4681      	mov	r9, r0
 8000b3a:	0005      	movs	r5, r0
 8000b3c:	030c      	lsls	r4, r1, #12
 8000b3e:	0048      	lsls	r0, r1, #1
 8000b40:	4692      	mov	sl, r2
 8000b42:	001f      	movs	r7, r3
 8000b44:	b085      	sub	sp, #20
 8000b46:	0b24      	lsrs	r4, r4, #12
 8000b48:	0d40      	lsrs	r0, r0, #21
 8000b4a:	0fce      	lsrs	r6, r1, #31
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_ddiv+0x26>
 8000b50:	e156      	b.n	8000e00 <__aeabi_ddiv+0x2d4>
 8000b52:	4bd4      	ldr	r3, [pc, #848]	; (8000ea4 <__aeabi_ddiv+0x378>)
 8000b54:	4298      	cmp	r0, r3
 8000b56:	d100      	bne.n	8000b5a <__aeabi_ddiv+0x2e>
 8000b58:	e172      	b.n	8000e40 <__aeabi_ddiv+0x314>
 8000b5a:	0f6b      	lsrs	r3, r5, #29
 8000b5c:	00e4      	lsls	r4, r4, #3
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	4323      	orrs	r3, r4
 8000b66:	4698      	mov	r8, r3
 8000b68:	4bcf      	ldr	r3, [pc, #828]	; (8000ea8 <__aeabi_ddiv+0x37c>)
 8000b6a:	00ed      	lsls	r5, r5, #3
 8000b6c:	469b      	mov	fp, r3
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4699      	mov	r9, r3
 8000b72:	4483      	add	fp, r0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	033c      	lsls	r4, r7, #12
 8000b78:	007b      	lsls	r3, r7, #1
 8000b7a:	4650      	mov	r0, sl
 8000b7c:	0b24      	lsrs	r4, r4, #12
 8000b7e:	0d5b      	lsrs	r3, r3, #21
 8000b80:	0fff      	lsrs	r7, r7, #31
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_ddiv+0x5c>
 8000b86:	e11f      	b.n	8000dc8 <__aeabi_ddiv+0x29c>
 8000b88:	4ac6      	ldr	r2, [pc, #792]	; (8000ea4 <__aeabi_ddiv+0x378>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_ddiv+0x64>
 8000b8e:	e162      	b.n	8000e56 <__aeabi_ddiv+0x32a>
 8000b90:	49c5      	ldr	r1, [pc, #788]	; (8000ea8 <__aeabi_ddiv+0x37c>)
 8000b92:	0f42      	lsrs	r2, r0, #29
 8000b94:	468c      	mov	ip, r1
 8000b96:	00e4      	lsls	r4, r4, #3
 8000b98:	4659      	mov	r1, fp
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	4463      	add	r3, ip
 8000ba0:	0412      	lsls	r2, r2, #16
 8000ba2:	1acb      	subs	r3, r1, r3
 8000ba4:	4314      	orrs	r4, r2
 8000ba6:	469b      	mov	fp, r3
 8000ba8:	00c2      	lsls	r2, r0, #3
 8000baa:	2000      	movs	r0, #0
 8000bac:	0033      	movs	r3, r6
 8000bae:	407b      	eors	r3, r7
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d827      	bhi.n	8000c08 <__aeabi_ddiv+0xdc>
 8000bb8:	49bc      	ldr	r1, [pc, #752]	; (8000eac <__aeabi_ddiv+0x380>)
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	58cb      	ldr	r3, [r1, r3]
 8000bbe:	469f      	mov	pc, r3
 8000bc0:	46b2      	mov	sl, r6
 8000bc2:	9b00      	ldr	r3, [sp, #0]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d016      	beq.n	8000bf6 <__aeabi_ddiv+0xca>
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d100      	bne.n	8000bce <__aeabi_ddiv+0xa2>
 8000bcc:	e28e      	b.n	80010ec <__aeabi_ddiv+0x5c0>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_ddiv+0xa8>
 8000bd2:	e0d9      	b.n	8000d88 <__aeabi_ddiv+0x25c>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	2500      	movs	r5, #0
 8000bda:	4652      	mov	r2, sl
 8000bdc:	051b      	lsls	r3, r3, #20
 8000bde:	4323      	orrs	r3, r4
 8000be0:	07d2      	lsls	r2, r2, #31
 8000be2:	4313      	orrs	r3, r2
 8000be4:	0028      	movs	r0, r5
 8000be6:	0019      	movs	r1, r3
 8000be8:	b005      	add	sp, #20
 8000bea:	bcf0      	pop	{r4, r5, r6, r7}
 8000bec:	46bb      	mov	fp, r7
 8000bee:	46b2      	mov	sl, r6
 8000bf0:	46a9      	mov	r9, r5
 8000bf2:	46a0      	mov	r8, r4
 8000bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	4baa      	ldr	r3, [pc, #680]	; (8000ea4 <__aeabi_ddiv+0x378>)
 8000bfc:	e7ed      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000bfe:	46ba      	mov	sl, r7
 8000c00:	46a0      	mov	r8, r4
 8000c02:	0015      	movs	r5, r2
 8000c04:	9000      	str	r0, [sp, #0]
 8000c06:	e7dc      	b.n	8000bc2 <__aeabi_ddiv+0x96>
 8000c08:	4544      	cmp	r4, r8
 8000c0a:	d200      	bcs.n	8000c0e <__aeabi_ddiv+0xe2>
 8000c0c:	e1c7      	b.n	8000f9e <__aeabi_ddiv+0x472>
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_ddiv+0xe6>
 8000c10:	e1c2      	b.n	8000f98 <__aeabi_ddiv+0x46c>
 8000c12:	2301      	movs	r3, #1
 8000c14:	425b      	negs	r3, r3
 8000c16:	469c      	mov	ip, r3
 8000c18:	002e      	movs	r6, r5
 8000c1a:	4640      	mov	r0, r8
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	44e3      	add	fp, ip
 8000c20:	0223      	lsls	r3, r4, #8
 8000c22:	0e14      	lsrs	r4, r2, #24
 8000c24:	431c      	orrs	r4, r3
 8000c26:	0c1b      	lsrs	r3, r3, #16
 8000c28:	4699      	mov	r9, r3
 8000c2a:	0423      	lsls	r3, r4, #16
 8000c2c:	0c1f      	lsrs	r7, r3, #16
 8000c2e:	0212      	lsls	r2, r2, #8
 8000c30:	4649      	mov	r1, r9
 8000c32:	9200      	str	r2, [sp, #0]
 8000c34:	9701      	str	r7, [sp, #4]
 8000c36:	f7ff faff 	bl	8000238 <__aeabi_uidivmod>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	437a      	muls	r2, r7
 8000c3e:	040b      	lsls	r3, r1, #16
 8000c40:	0c31      	lsrs	r1, r6, #16
 8000c42:	4680      	mov	r8, r0
 8000c44:	4319      	orrs	r1, r3
 8000c46:	428a      	cmp	r2, r1
 8000c48:	d907      	bls.n	8000c5a <__aeabi_ddiv+0x12e>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	425b      	negs	r3, r3
 8000c4e:	469c      	mov	ip, r3
 8000c50:	1909      	adds	r1, r1, r4
 8000c52:	44e0      	add	r8, ip
 8000c54:	428c      	cmp	r4, r1
 8000c56:	d800      	bhi.n	8000c5a <__aeabi_ddiv+0x12e>
 8000c58:	e207      	b.n	800106a <__aeabi_ddiv+0x53e>
 8000c5a:	1a88      	subs	r0, r1, r2
 8000c5c:	4649      	mov	r1, r9
 8000c5e:	f7ff faeb 	bl	8000238 <__aeabi_uidivmod>
 8000c62:	0409      	lsls	r1, r1, #16
 8000c64:	468c      	mov	ip, r1
 8000c66:	0431      	lsls	r1, r6, #16
 8000c68:	4666      	mov	r6, ip
 8000c6a:	9a01      	ldr	r2, [sp, #4]
 8000c6c:	0c09      	lsrs	r1, r1, #16
 8000c6e:	4342      	muls	r2, r0
 8000c70:	0003      	movs	r3, r0
 8000c72:	4331      	orrs	r1, r6
 8000c74:	428a      	cmp	r2, r1
 8000c76:	d904      	bls.n	8000c82 <__aeabi_ddiv+0x156>
 8000c78:	1909      	adds	r1, r1, r4
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	428c      	cmp	r4, r1
 8000c7e:	d800      	bhi.n	8000c82 <__aeabi_ddiv+0x156>
 8000c80:	e1ed      	b.n	800105e <__aeabi_ddiv+0x532>
 8000c82:	1a88      	subs	r0, r1, r2
 8000c84:	4642      	mov	r2, r8
 8000c86:	0412      	lsls	r2, r2, #16
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	4690      	mov	r8, r2
 8000c8c:	4641      	mov	r1, r8
 8000c8e:	9b00      	ldr	r3, [sp, #0]
 8000c90:	040e      	lsls	r6, r1, #16
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	001f      	movs	r7, r3
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	9b00      	ldr	r3, [sp, #0]
 8000c9a:	0c36      	lsrs	r6, r6, #16
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	0c19      	lsrs	r1, r3, #16
 8000ca0:	000b      	movs	r3, r1
 8000ca2:	4373      	muls	r3, r6
 8000ca4:	0c12      	lsrs	r2, r2, #16
 8000ca6:	437e      	muls	r6, r7
 8000ca8:	9103      	str	r1, [sp, #12]
 8000caa:	4351      	muls	r1, r2
 8000cac:	437a      	muls	r2, r7
 8000cae:	0c1f      	lsrs	r7, r3, #16
 8000cb0:	46bc      	mov	ip, r7
 8000cb2:	1876      	adds	r6, r6, r1
 8000cb4:	4466      	add	r6, ip
 8000cb6:	42b1      	cmp	r1, r6
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_ddiv+0x196>
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4462      	add	r2, ip
 8000cc2:	0c31      	lsrs	r1, r6, #16
 8000cc4:	188a      	adds	r2, r1, r2
 8000cc6:	0431      	lsls	r1, r6, #16
 8000cc8:	041e      	lsls	r6, r3, #16
 8000cca:	0c36      	lsrs	r6, r6, #16
 8000ccc:	198e      	adds	r6, r1, r6
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d302      	bcc.n	8000cd8 <__aeabi_ddiv+0x1ac>
 8000cd2:	d112      	bne.n	8000cfa <__aeabi_ddiv+0x1ce>
 8000cd4:	42b5      	cmp	r5, r6
 8000cd6:	d210      	bcs.n	8000cfa <__aeabi_ddiv+0x1ce>
 8000cd8:	4643      	mov	r3, r8
 8000cda:	1e59      	subs	r1, r3, #1
 8000cdc:	9b00      	ldr	r3, [sp, #0]
 8000cde:	469c      	mov	ip, r3
 8000ce0:	4465      	add	r5, ip
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	429d      	cmp	r5, r3
 8000ce6:	419b      	sbcs	r3, r3
 8000ce8:	425b      	negs	r3, r3
 8000cea:	191b      	adds	r3, r3, r4
 8000cec:	18c0      	adds	r0, r0, r3
 8000cee:	4284      	cmp	r4, r0
 8000cf0:	d200      	bcs.n	8000cf4 <__aeabi_ddiv+0x1c8>
 8000cf2:	e1a0      	b.n	8001036 <__aeabi_ddiv+0x50a>
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x1cc>
 8000cf6:	e19b      	b.n	8001030 <__aeabi_ddiv+0x504>
 8000cf8:	4688      	mov	r8, r1
 8000cfa:	1bae      	subs	r6, r5, r6
 8000cfc:	42b5      	cmp	r5, r6
 8000cfe:	41ad      	sbcs	r5, r5
 8000d00:	1a80      	subs	r0, r0, r2
 8000d02:	426d      	negs	r5, r5
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	4284      	cmp	r4, r0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x1e0>
 8000d0a:	e1d5      	b.n	80010b8 <__aeabi_ddiv+0x58c>
 8000d0c:	4649      	mov	r1, r9
 8000d0e:	f7ff fa93 	bl	8000238 <__aeabi_uidivmod>
 8000d12:	9a01      	ldr	r2, [sp, #4]
 8000d14:	040b      	lsls	r3, r1, #16
 8000d16:	4342      	muls	r2, r0
 8000d18:	0c31      	lsrs	r1, r6, #16
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	d900      	bls.n	8000d24 <__aeabi_ddiv+0x1f8>
 8000d22:	e16c      	b.n	8000ffe <__aeabi_ddiv+0x4d2>
 8000d24:	1a88      	subs	r0, r1, r2
 8000d26:	4649      	mov	r1, r9
 8000d28:	f7ff fa86 	bl	8000238 <__aeabi_uidivmod>
 8000d2c:	9a01      	ldr	r2, [sp, #4]
 8000d2e:	0436      	lsls	r6, r6, #16
 8000d30:	4342      	muls	r2, r0
 8000d32:	0409      	lsls	r1, r1, #16
 8000d34:	0c36      	lsrs	r6, r6, #16
 8000d36:	0003      	movs	r3, r0
 8000d38:	430e      	orrs	r6, r1
 8000d3a:	42b2      	cmp	r2, r6
 8000d3c:	d900      	bls.n	8000d40 <__aeabi_ddiv+0x214>
 8000d3e:	e153      	b.n	8000fe8 <__aeabi_ddiv+0x4bc>
 8000d40:	9803      	ldr	r0, [sp, #12]
 8000d42:	1ab6      	subs	r6, r6, r2
 8000d44:	0002      	movs	r2, r0
 8000d46:	042d      	lsls	r5, r5, #16
 8000d48:	431d      	orrs	r5, r3
 8000d4a:	9f02      	ldr	r7, [sp, #8]
 8000d4c:	042b      	lsls	r3, r5, #16
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	435a      	muls	r2, r3
 8000d52:	437b      	muls	r3, r7
 8000d54:	469c      	mov	ip, r3
 8000d56:	0c29      	lsrs	r1, r5, #16
 8000d58:	4348      	muls	r0, r1
 8000d5a:	0c13      	lsrs	r3, r2, #16
 8000d5c:	4484      	add	ip, r0
 8000d5e:	4463      	add	r3, ip
 8000d60:	4379      	muls	r1, r7
 8000d62:	4298      	cmp	r0, r3
 8000d64:	d903      	bls.n	8000d6e <__aeabi_ddiv+0x242>
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	0240      	lsls	r0, r0, #9
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	4461      	add	r1, ip
 8000d6e:	0c18      	lsrs	r0, r3, #16
 8000d70:	0412      	lsls	r2, r2, #16
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	0c12      	lsrs	r2, r2, #16
 8000d76:	1841      	adds	r1, r0, r1
 8000d78:	189b      	adds	r3, r3, r2
 8000d7a:	428e      	cmp	r6, r1
 8000d7c:	d200      	bcs.n	8000d80 <__aeabi_ddiv+0x254>
 8000d7e:	e0ff      	b.n	8000f80 <__aeabi_ddiv+0x454>
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x258>
 8000d82:	e0fa      	b.n	8000f7a <__aeabi_ddiv+0x44e>
 8000d84:	2301      	movs	r3, #1
 8000d86:	431d      	orrs	r5, r3
 8000d88:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <__aeabi_ddiv+0x384>)
 8000d8a:	445a      	add	r2, fp
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	dc00      	bgt.n	8000d92 <__aeabi_ddiv+0x266>
 8000d90:	e0aa      	b.n	8000ee8 <__aeabi_ddiv+0x3bc>
 8000d92:	076b      	lsls	r3, r5, #29
 8000d94:	d000      	beq.n	8000d98 <__aeabi_ddiv+0x26c>
 8000d96:	e13d      	b.n	8001014 <__aeabi_ddiv+0x4e8>
 8000d98:	08ed      	lsrs	r5, r5, #3
 8000d9a:	4643      	mov	r3, r8
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	d506      	bpl.n	8000dae <__aeabi_ddiv+0x282>
 8000da0:	4642      	mov	r2, r8
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <__aeabi_ddiv+0x388>)
 8000da4:	401a      	ands	r2, r3
 8000da6:	4690      	mov	r8, r2
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	00d2      	lsls	r2, r2, #3
 8000dac:	445a      	add	r2, fp
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <__aeabi_ddiv+0x38c>)
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_ddiv+0x28a>
 8000db4:	e71f      	b.n	8000bf6 <__aeabi_ddiv+0xca>
 8000db6:	4643      	mov	r3, r8
 8000db8:	075b      	lsls	r3, r3, #29
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	0552      	lsls	r2, r2, #21
 8000dc0:	025c      	lsls	r4, r3, #9
 8000dc2:	0b24      	lsrs	r4, r4, #12
 8000dc4:	0d53      	lsrs	r3, r2, #21
 8000dc6:	e708      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000dc8:	4652      	mov	r2, sl
 8000dca:	4322      	orrs	r2, r4
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x2a4>
 8000dce:	e07b      	b.n	8000ec8 <__aeabi_ddiv+0x39c>
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0x2aa>
 8000dd4:	e0fa      	b.n	8000fcc <__aeabi_ddiv+0x4a0>
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f000 fc88 	bl	80016ec <__clzsi2>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	3a0b      	subs	r2, #11
 8000de0:	231d      	movs	r3, #29
 8000de2:	0001      	movs	r1, r0
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	4652      	mov	r2, sl
 8000de8:	3908      	subs	r1, #8
 8000dea:	40da      	lsrs	r2, r3
 8000dec:	408c      	lsls	r4, r1
 8000dee:	4314      	orrs	r4, r2
 8000df0:	4652      	mov	r2, sl
 8000df2:	408a      	lsls	r2, r1
 8000df4:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <__aeabi_ddiv+0x390>)
 8000df6:	4458      	add	r0, fp
 8000df8:	469b      	mov	fp, r3
 8000dfa:	4483      	add	fp, r0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e6d5      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000e00:	464b      	mov	r3, r9
 8000e02:	4323      	orrs	r3, r4
 8000e04:	4698      	mov	r8, r3
 8000e06:	d044      	beq.n	8000e92 <__aeabi_ddiv+0x366>
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0x2e2>
 8000e0c:	e0ce      	b.n	8000fac <__aeabi_ddiv+0x480>
 8000e0e:	0020      	movs	r0, r4
 8000e10:	f000 fc6c 	bl	80016ec <__clzsi2>
 8000e14:	0001      	movs	r1, r0
 8000e16:	0002      	movs	r2, r0
 8000e18:	390b      	subs	r1, #11
 8000e1a:	231d      	movs	r3, #29
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	4649      	mov	r1, r9
 8000e20:	0010      	movs	r0, r2
 8000e22:	40d9      	lsrs	r1, r3
 8000e24:	3808      	subs	r0, #8
 8000e26:	4084      	lsls	r4, r0
 8000e28:	000b      	movs	r3, r1
 8000e2a:	464d      	mov	r5, r9
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4085      	lsls	r5, r0
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <__aeabi_ddiv+0x394>)
 8000e34:	1a83      	subs	r3, r0, r2
 8000e36:	469b      	mov	fp, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	e69a      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000e40:	464b      	mov	r3, r9
 8000e42:	4323      	orrs	r3, r4
 8000e44:	4698      	mov	r8, r3
 8000e46:	d11d      	bne.n	8000e84 <__aeabi_ddiv+0x358>
 8000e48:	2308      	movs	r3, #8
 8000e4a:	4699      	mov	r9, r3
 8000e4c:	3b06      	subs	r3, #6
 8000e4e:	2500      	movs	r5, #0
 8000e50:	4683      	mov	fp, r0
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	e68f      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000e56:	4652      	mov	r2, sl
 8000e58:	4322      	orrs	r2, r4
 8000e5a:	d109      	bne.n	8000e70 <__aeabi_ddiv+0x344>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	4649      	mov	r1, r9
 8000e60:	4319      	orrs	r1, r3
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <__aeabi_ddiv+0x398>)
 8000e64:	4689      	mov	r9, r1
 8000e66:	469c      	mov	ip, r3
 8000e68:	2400      	movs	r4, #0
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	44e3      	add	fp, ip
 8000e6e:	e69d      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000e70:	2303      	movs	r3, #3
 8000e72:	464a      	mov	r2, r9
 8000e74:	431a      	orrs	r2, r3
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <__aeabi_ddiv+0x398>)
 8000e78:	4691      	mov	r9, r2
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	2003      	movs	r0, #3
 8000e80:	44e3      	add	fp, ip
 8000e82:	e693      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000e84:	230c      	movs	r3, #12
 8000e86:	4699      	mov	r9, r3
 8000e88:	3b09      	subs	r3, #9
 8000e8a:	46a0      	mov	r8, r4
 8000e8c:	4683      	mov	fp, r0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	e671      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000e92:	2304      	movs	r3, #4
 8000e94:	4699      	mov	r9, r3
 8000e96:	2300      	movs	r3, #0
 8000e98:	469b      	mov	fp, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	e669      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	000007ff 	.word	0x000007ff
 8000ea8:	fffffc01 	.word	0xfffffc01
 8000eac:	08008120 	.word	0x08008120
 8000eb0:	000003ff 	.word	0x000003ff
 8000eb4:	feffffff 	.word	0xfeffffff
 8000eb8:	000007fe 	.word	0x000007fe
 8000ebc:	000003f3 	.word	0x000003f3
 8000ec0:	fffffc0d 	.word	0xfffffc0d
 8000ec4:	fffff801 	.word	0xfffff801
 8000ec8:	4649      	mov	r1, r9
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4319      	orrs	r1, r3
 8000ece:	4689      	mov	r9, r1
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	e66a      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2480      	movs	r4, #128	; 0x80
 8000eda:	469a      	mov	sl, r3
 8000edc:	2500      	movs	r5, #0
 8000ede:	4b8a      	ldr	r3, [pc, #552]	; (8001108 <__aeabi_ddiv+0x5dc>)
 8000ee0:	0324      	lsls	r4, r4, #12
 8000ee2:	e67a      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000ee4:	2501      	movs	r5, #1
 8000ee6:	426d      	negs	r5, r5
 8000ee8:	2301      	movs	r3, #1
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	2b38      	cmp	r3, #56	; 0x38
 8000eee:	dd00      	ble.n	8000ef2 <__aeabi_ddiv+0x3c6>
 8000ef0:	e670      	b.n	8000bd4 <__aeabi_ddiv+0xa8>
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	dc00      	bgt.n	8000ef8 <__aeabi_ddiv+0x3cc>
 8000ef6:	e0bf      	b.n	8001078 <__aeabi_ddiv+0x54c>
 8000ef8:	211f      	movs	r1, #31
 8000efa:	4249      	negs	r1, r1
 8000efc:	1a8a      	subs	r2, r1, r2
 8000efe:	4641      	mov	r1, r8
 8000f00:	40d1      	lsrs	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d004      	beq.n	8000f12 <__aeabi_ddiv+0x3e6>
 8000f08:	4641      	mov	r1, r8
 8000f0a:	4b80      	ldr	r3, [pc, #512]	; (800110c <__aeabi_ddiv+0x5e0>)
 8000f0c:	445b      	add	r3, fp
 8000f0e:	4099      	lsls	r1, r3
 8000f10:	430d      	orrs	r5, r1
 8000f12:	1e6b      	subs	r3, r5, #1
 8000f14:	419d      	sbcs	r5, r3
 8000f16:	2307      	movs	r3, #7
 8000f18:	432a      	orrs	r2, r5
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	4015      	ands	r5, r2
 8000f20:	4213      	tst	r3, r2
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x3fa>
 8000f24:	e0d4      	b.n	80010d0 <__aeabi_ddiv+0x5a4>
 8000f26:	210f      	movs	r1, #15
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4011      	ands	r1, r2
 8000f2c:	2904      	cmp	r1, #4
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0x406>
 8000f30:	e0cb      	b.n	80010ca <__aeabi_ddiv+0x59e>
 8000f32:	1d11      	adds	r1, r2, #4
 8000f34:	4291      	cmp	r1, r2
 8000f36:	4192      	sbcs	r2, r2
 8000f38:	4252      	negs	r2, r2
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	000a      	movs	r2, r1
 8000f3e:	0219      	lsls	r1, r3, #8
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_ddiv+0x418>
 8000f42:	e0c2      	b.n	80010ca <__aeabi_ddiv+0x59e>
 8000f44:	2301      	movs	r3, #1
 8000f46:	2400      	movs	r4, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e646      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	4641      	mov	r1, r8
 8000f50:	031b      	lsls	r3, r3, #12
 8000f52:	4219      	tst	r1, r3
 8000f54:	d008      	beq.n	8000f68 <__aeabi_ddiv+0x43c>
 8000f56:	421c      	tst	r4, r3
 8000f58:	d106      	bne.n	8000f68 <__aeabi_ddiv+0x43c>
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	0324      	lsls	r4, r4, #12
 8000f5e:	46ba      	mov	sl, r7
 8000f60:	0015      	movs	r5, r2
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <__aeabi_ddiv+0x5dc>)
 8000f64:	0b24      	lsrs	r4, r4, #12
 8000f66:	e638      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000f68:	2480      	movs	r4, #128	; 0x80
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	0324      	lsls	r4, r4, #12
 8000f6e:	431c      	orrs	r4, r3
 8000f70:	0324      	lsls	r4, r4, #12
 8000f72:	46b2      	mov	sl, r6
 8000f74:	4b64      	ldr	r3, [pc, #400]	; (8001108 <__aeabi_ddiv+0x5dc>)
 8000f76:	0b24      	lsrs	r4, r4, #12
 8000f78:	e62f      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x454>
 8000f7e:	e703      	b.n	8000d88 <__aeabi_ddiv+0x25c>
 8000f80:	19a6      	adds	r6, r4, r6
 8000f82:	1e68      	subs	r0, r5, #1
 8000f84:	42a6      	cmp	r6, r4
 8000f86:	d200      	bcs.n	8000f8a <__aeabi_ddiv+0x45e>
 8000f88:	e08d      	b.n	80010a6 <__aeabi_ddiv+0x57a>
 8000f8a:	428e      	cmp	r6, r1
 8000f8c:	d200      	bcs.n	8000f90 <__aeabi_ddiv+0x464>
 8000f8e:	e0a3      	b.n	80010d8 <__aeabi_ddiv+0x5ac>
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x468>
 8000f92:	e0b3      	b.n	80010fc <__aeabi_ddiv+0x5d0>
 8000f94:	0005      	movs	r5, r0
 8000f96:	e6f5      	b.n	8000d84 <__aeabi_ddiv+0x258>
 8000f98:	42aa      	cmp	r2, r5
 8000f9a:	d900      	bls.n	8000f9e <__aeabi_ddiv+0x472>
 8000f9c:	e639      	b.n	8000c12 <__aeabi_ddiv+0xe6>
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	07de      	lsls	r6, r3, #31
 8000fa2:	0858      	lsrs	r0, r3, #1
 8000fa4:	086b      	lsrs	r3, r5, #1
 8000fa6:	431e      	orrs	r6, r3
 8000fa8:	07ed      	lsls	r5, r5, #31
 8000faa:	e639      	b.n	8000c20 <__aeabi_ddiv+0xf4>
 8000fac:	4648      	mov	r0, r9
 8000fae:	f000 fb9d 	bl	80016ec <__clzsi2>
 8000fb2:	0001      	movs	r1, r0
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	3115      	adds	r1, #21
 8000fb8:	3220      	adds	r2, #32
 8000fba:	291c      	cmp	r1, #28
 8000fbc:	dc00      	bgt.n	8000fc0 <__aeabi_ddiv+0x494>
 8000fbe:	e72c      	b.n	8000e1a <__aeabi_ddiv+0x2ee>
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	3808      	subs	r0, #8
 8000fc4:	4083      	lsls	r3, r0
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	4698      	mov	r8, r3
 8000fca:	e732      	b.n	8000e32 <__aeabi_ddiv+0x306>
 8000fcc:	f000 fb8e 	bl	80016ec <__clzsi2>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	3215      	adds	r2, #21
 8000fd6:	3020      	adds	r0, #32
 8000fd8:	2a1c      	cmp	r2, #28
 8000fda:	dc00      	bgt.n	8000fde <__aeabi_ddiv+0x4b2>
 8000fdc:	e700      	b.n	8000de0 <__aeabi_ddiv+0x2b4>
 8000fde:	4654      	mov	r4, sl
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	409c      	lsls	r4, r3
 8000fe6:	e705      	b.n	8000df4 <__aeabi_ddiv+0x2c8>
 8000fe8:	1936      	adds	r6, r6, r4
 8000fea:	3b01      	subs	r3, #1
 8000fec:	42b4      	cmp	r4, r6
 8000fee:	d900      	bls.n	8000ff2 <__aeabi_ddiv+0x4c6>
 8000ff0:	e6a6      	b.n	8000d40 <__aeabi_ddiv+0x214>
 8000ff2:	42b2      	cmp	r2, r6
 8000ff4:	d800      	bhi.n	8000ff8 <__aeabi_ddiv+0x4cc>
 8000ff6:	e6a3      	b.n	8000d40 <__aeabi_ddiv+0x214>
 8000ff8:	1e83      	subs	r3, r0, #2
 8000ffa:	1936      	adds	r6, r6, r4
 8000ffc:	e6a0      	b.n	8000d40 <__aeabi_ddiv+0x214>
 8000ffe:	1909      	adds	r1, r1, r4
 8001000:	3d01      	subs	r5, #1
 8001002:	428c      	cmp	r4, r1
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x4dc>
 8001006:	e68d      	b.n	8000d24 <__aeabi_ddiv+0x1f8>
 8001008:	428a      	cmp	r2, r1
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x4e2>
 800100c:	e68a      	b.n	8000d24 <__aeabi_ddiv+0x1f8>
 800100e:	1e85      	subs	r5, r0, #2
 8001010:	1909      	adds	r1, r1, r4
 8001012:	e687      	b.n	8000d24 <__aeabi_ddiv+0x1f8>
 8001014:	230f      	movs	r3, #15
 8001016:	402b      	ands	r3, r5
 8001018:	2b04      	cmp	r3, #4
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x4f2>
 800101c:	e6bc      	b.n	8000d98 <__aeabi_ddiv+0x26c>
 800101e:	2305      	movs	r3, #5
 8001020:	425b      	negs	r3, r3
 8001022:	42ab      	cmp	r3, r5
 8001024:	419b      	sbcs	r3, r3
 8001026:	3504      	adds	r5, #4
 8001028:	425b      	negs	r3, r3
 800102a:	08ed      	lsrs	r5, r5, #3
 800102c:	4498      	add	r8, r3
 800102e:	e6b4      	b.n	8000d9a <__aeabi_ddiv+0x26e>
 8001030:	42af      	cmp	r7, r5
 8001032:	d900      	bls.n	8001036 <__aeabi_ddiv+0x50a>
 8001034:	e660      	b.n	8000cf8 <__aeabi_ddiv+0x1cc>
 8001036:	4282      	cmp	r2, r0
 8001038:	d804      	bhi.n	8001044 <__aeabi_ddiv+0x518>
 800103a:	d000      	beq.n	800103e <__aeabi_ddiv+0x512>
 800103c:	e65c      	b.n	8000cf8 <__aeabi_ddiv+0x1cc>
 800103e:	42ae      	cmp	r6, r5
 8001040:	d800      	bhi.n	8001044 <__aeabi_ddiv+0x518>
 8001042:	e659      	b.n	8000cf8 <__aeabi_ddiv+0x1cc>
 8001044:	2302      	movs	r3, #2
 8001046:	425b      	negs	r3, r3
 8001048:	469c      	mov	ip, r3
 800104a:	9b00      	ldr	r3, [sp, #0]
 800104c:	44e0      	add	r8, ip
 800104e:	469c      	mov	ip, r3
 8001050:	4465      	add	r5, ip
 8001052:	429d      	cmp	r5, r3
 8001054:	419b      	sbcs	r3, r3
 8001056:	425b      	negs	r3, r3
 8001058:	191b      	adds	r3, r3, r4
 800105a:	18c0      	adds	r0, r0, r3
 800105c:	e64d      	b.n	8000cfa <__aeabi_ddiv+0x1ce>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x538>
 8001062:	e60e      	b.n	8000c82 <__aeabi_ddiv+0x156>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	1909      	adds	r1, r1, r4
 8001068:	e60b      	b.n	8000c82 <__aeabi_ddiv+0x156>
 800106a:	428a      	cmp	r2, r1
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x544>
 800106e:	e5f4      	b.n	8000c5a <__aeabi_ddiv+0x12e>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4698      	mov	r8, r3
 8001074:	1909      	adds	r1, r1, r4
 8001076:	e5f0      	b.n	8000c5a <__aeabi_ddiv+0x12e>
 8001078:	4925      	ldr	r1, [pc, #148]	; (8001110 <__aeabi_ddiv+0x5e4>)
 800107a:	0028      	movs	r0, r5
 800107c:	4459      	add	r1, fp
 800107e:	408d      	lsls	r5, r1
 8001080:	4642      	mov	r2, r8
 8001082:	408a      	lsls	r2, r1
 8001084:	1e69      	subs	r1, r5, #1
 8001086:	418d      	sbcs	r5, r1
 8001088:	4641      	mov	r1, r8
 800108a:	40d8      	lsrs	r0, r3
 800108c:	40d9      	lsrs	r1, r3
 800108e:	4302      	orrs	r2, r0
 8001090:	432a      	orrs	r2, r5
 8001092:	000b      	movs	r3, r1
 8001094:	0751      	lsls	r1, r2, #29
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x56e>
 8001098:	e751      	b.n	8000f3e <__aeabi_ddiv+0x412>
 800109a:	210f      	movs	r1, #15
 800109c:	4011      	ands	r1, r2
 800109e:	2904      	cmp	r1, #4
 80010a0:	d000      	beq.n	80010a4 <__aeabi_ddiv+0x578>
 80010a2:	e746      	b.n	8000f32 <__aeabi_ddiv+0x406>
 80010a4:	e74b      	b.n	8000f3e <__aeabi_ddiv+0x412>
 80010a6:	0005      	movs	r5, r0
 80010a8:	428e      	cmp	r6, r1
 80010aa:	d000      	beq.n	80010ae <__aeabi_ddiv+0x582>
 80010ac:	e66a      	b.n	8000d84 <__aeabi_ddiv+0x258>
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d000      	beq.n	80010b6 <__aeabi_ddiv+0x58a>
 80010b4:	e666      	b.n	8000d84 <__aeabi_ddiv+0x258>
 80010b6:	e667      	b.n	8000d88 <__aeabi_ddiv+0x25c>
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <__aeabi_ddiv+0x5e8>)
 80010ba:	445a      	add	r2, fp
 80010bc:	2a00      	cmp	r2, #0
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_ddiv+0x596>
 80010c0:	e710      	b.n	8000ee4 <__aeabi_ddiv+0x3b8>
 80010c2:	2301      	movs	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	4498      	add	r8, r3
 80010c8:	e667      	b.n	8000d9a <__aeabi_ddiv+0x26e>
 80010ca:	075d      	lsls	r5, r3, #29
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	0b1c      	lsrs	r4, r3, #12
 80010d0:	08d2      	lsrs	r2, r2, #3
 80010d2:	2300      	movs	r3, #0
 80010d4:	4315      	orrs	r5, r2
 80010d6:	e580      	b.n	8000bda <__aeabi_ddiv+0xae>
 80010d8:	9800      	ldr	r0, [sp, #0]
 80010da:	3d02      	subs	r5, #2
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	4282      	cmp	r2, r0
 80010e0:	41bf      	sbcs	r7, r7
 80010e2:	427f      	negs	r7, r7
 80010e4:	193c      	adds	r4, r7, r4
 80010e6:	1936      	adds	r6, r6, r4
 80010e8:	9200      	str	r2, [sp, #0]
 80010ea:	e7dd      	b.n	80010a8 <__aeabi_ddiv+0x57c>
 80010ec:	2480      	movs	r4, #128	; 0x80
 80010ee:	4643      	mov	r3, r8
 80010f0:	0324      	lsls	r4, r4, #12
 80010f2:	431c      	orrs	r4, r3
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__aeabi_ddiv+0x5dc>)
 80010f8:	0b24      	lsrs	r4, r4, #12
 80010fa:	e56e      	b.n	8000bda <__aeabi_ddiv+0xae>
 80010fc:	9a00      	ldr	r2, [sp, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3ea      	bcc.n	80010d8 <__aeabi_ddiv+0x5ac>
 8001102:	0005      	movs	r5, r0
 8001104:	e7d3      	b.n	80010ae <__aeabi_ddiv+0x582>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	000007ff 	.word	0x000007ff
 800110c:	0000043e 	.word	0x0000043e
 8001110:	0000041e 	.word	0x0000041e
 8001114:	000003ff 	.word	0x000003ff

08001118 <__aeabi_dmul>:
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	4657      	mov	r7, sl
 800111c:	464e      	mov	r6, r9
 800111e:	4645      	mov	r5, r8
 8001120:	46de      	mov	lr, fp
 8001122:	b5e0      	push	{r5, r6, r7, lr}
 8001124:	4698      	mov	r8, r3
 8001126:	030c      	lsls	r4, r1, #12
 8001128:	004b      	lsls	r3, r1, #1
 800112a:	0006      	movs	r6, r0
 800112c:	4692      	mov	sl, r2
 800112e:	b087      	sub	sp, #28
 8001130:	0b24      	lsrs	r4, r4, #12
 8001132:	0d5b      	lsrs	r3, r3, #21
 8001134:	0fcf      	lsrs	r7, r1, #31
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_dmul+0x24>
 800113a:	e15c      	b.n	80013f6 <__aeabi_dmul+0x2de>
 800113c:	4ad9      	ldr	r2, [pc, #868]	; (80014a4 <__aeabi_dmul+0x38c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d100      	bne.n	8001144 <__aeabi_dmul+0x2c>
 8001142:	e175      	b.n	8001430 <__aeabi_dmul+0x318>
 8001144:	0f42      	lsrs	r2, r0, #29
 8001146:	00e4      	lsls	r4, r4, #3
 8001148:	4314      	orrs	r4, r2
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	0412      	lsls	r2, r2, #16
 800114e:	4314      	orrs	r4, r2
 8001150:	4ad5      	ldr	r2, [pc, #852]	; (80014a8 <__aeabi_dmul+0x390>)
 8001152:	00c5      	lsls	r5, r0, #3
 8001154:	4694      	mov	ip, r2
 8001156:	4463      	add	r3, ip
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	4699      	mov	r9, r3
 800115e:	469b      	mov	fp, r3
 8001160:	4643      	mov	r3, r8
 8001162:	4642      	mov	r2, r8
 8001164:	031e      	lsls	r6, r3, #12
 8001166:	0fd2      	lsrs	r2, r2, #31
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4650      	mov	r0, sl
 800116c:	4690      	mov	r8, r2
 800116e:	0b36      	lsrs	r6, r6, #12
 8001170:	0d5b      	lsrs	r3, r3, #21
 8001172:	d100      	bne.n	8001176 <__aeabi_dmul+0x5e>
 8001174:	e120      	b.n	80013b8 <__aeabi_dmul+0x2a0>
 8001176:	4acb      	ldr	r2, [pc, #812]	; (80014a4 <__aeabi_dmul+0x38c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d100      	bne.n	800117e <__aeabi_dmul+0x66>
 800117c:	e162      	b.n	8001444 <__aeabi_dmul+0x32c>
 800117e:	49ca      	ldr	r1, [pc, #808]	; (80014a8 <__aeabi_dmul+0x390>)
 8001180:	0f42      	lsrs	r2, r0, #29
 8001182:	468c      	mov	ip, r1
 8001184:	9900      	ldr	r1, [sp, #0]
 8001186:	4463      	add	r3, ip
 8001188:	00f6      	lsls	r6, r6, #3
 800118a:	468c      	mov	ip, r1
 800118c:	4316      	orrs	r6, r2
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	449c      	add	ip, r3
 8001192:	0412      	lsls	r2, r2, #16
 8001194:	4663      	mov	r3, ip
 8001196:	4316      	orrs	r6, r2
 8001198:	00c2      	lsls	r2, r0, #3
 800119a:	2000      	movs	r0, #0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	9900      	ldr	r1, [sp, #0]
 80011a0:	4643      	mov	r3, r8
 80011a2:	3101      	adds	r1, #1
 80011a4:	468c      	mov	ip, r1
 80011a6:	4649      	mov	r1, r9
 80011a8:	407b      	eors	r3, r7
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	290f      	cmp	r1, #15
 80011ae:	d826      	bhi.n	80011fe <__aeabi_dmul+0xe6>
 80011b0:	4bbe      	ldr	r3, [pc, #760]	; (80014ac <__aeabi_dmul+0x394>)
 80011b2:	0089      	lsls	r1, r1, #2
 80011b4:	5859      	ldr	r1, [r3, r1]
 80011b6:	468f      	mov	pc, r1
 80011b8:	4643      	mov	r3, r8
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	0034      	movs	r4, r6
 80011be:	0015      	movs	r5, r2
 80011c0:	4683      	mov	fp, r0
 80011c2:	465b      	mov	r3, fp
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d016      	beq.n	80011f6 <__aeabi_dmul+0xde>
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d100      	bne.n	80011ce <__aeabi_dmul+0xb6>
 80011cc:	e203      	b.n	80015d6 <__aeabi_dmul+0x4be>
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d000      	beq.n	80011d4 <__aeabi_dmul+0xbc>
 80011d2:	e0cd      	b.n	8001370 <__aeabi_dmul+0x258>
 80011d4:	2200      	movs	r2, #0
 80011d6:	2400      	movs	r4, #0
 80011d8:	2500      	movs	r5, #0
 80011da:	9b01      	ldr	r3, [sp, #4]
 80011dc:	0512      	lsls	r2, r2, #20
 80011de:	4322      	orrs	r2, r4
 80011e0:	07db      	lsls	r3, r3, #31
 80011e2:	431a      	orrs	r2, r3
 80011e4:	0028      	movs	r0, r5
 80011e6:	0011      	movs	r1, r2
 80011e8:	b007      	add	sp, #28
 80011ea:	bcf0      	pop	{r4, r5, r6, r7}
 80011ec:	46bb      	mov	fp, r7
 80011ee:	46b2      	mov	sl, r6
 80011f0:	46a9      	mov	r9, r5
 80011f2:	46a0      	mov	r8, r4
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	2400      	movs	r4, #0
 80011f8:	2500      	movs	r5, #0
 80011fa:	4aaa      	ldr	r2, [pc, #680]	; (80014a4 <__aeabi_dmul+0x38c>)
 80011fc:	e7ed      	b.n	80011da <__aeabi_dmul+0xc2>
 80011fe:	0c28      	lsrs	r0, r5, #16
 8001200:	042d      	lsls	r5, r5, #16
 8001202:	0c2d      	lsrs	r5, r5, #16
 8001204:	002b      	movs	r3, r5
 8001206:	0c11      	lsrs	r1, r2, #16
 8001208:	0412      	lsls	r2, r2, #16
 800120a:	0c12      	lsrs	r2, r2, #16
 800120c:	4353      	muls	r3, r2
 800120e:	4698      	mov	r8, r3
 8001210:	0013      	movs	r3, r2
 8001212:	002f      	movs	r7, r5
 8001214:	4343      	muls	r3, r0
 8001216:	4699      	mov	r9, r3
 8001218:	434f      	muls	r7, r1
 800121a:	444f      	add	r7, r9
 800121c:	46bb      	mov	fp, r7
 800121e:	4647      	mov	r7, r8
 8001220:	000b      	movs	r3, r1
 8001222:	0c3f      	lsrs	r7, r7, #16
 8001224:	46ba      	mov	sl, r7
 8001226:	4343      	muls	r3, r0
 8001228:	44da      	add	sl, fp
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	45d1      	cmp	r9, sl
 800122e:	d904      	bls.n	800123a <__aeabi_dmul+0x122>
 8001230:	2780      	movs	r7, #128	; 0x80
 8001232:	027f      	lsls	r7, r7, #9
 8001234:	46b9      	mov	r9, r7
 8001236:	444b      	add	r3, r9
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	4653      	mov	r3, sl
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	469b      	mov	fp, r3
 8001240:	4653      	mov	r3, sl
 8001242:	041f      	lsls	r7, r3, #16
 8001244:	4643      	mov	r3, r8
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	4698      	mov	r8, r3
 800124c:	003b      	movs	r3, r7
 800124e:	4443      	add	r3, r8
 8001250:	9304      	str	r3, [sp, #16]
 8001252:	0c33      	lsrs	r3, r6, #16
 8001254:	0436      	lsls	r6, r6, #16
 8001256:	0c36      	lsrs	r6, r6, #16
 8001258:	4698      	mov	r8, r3
 800125a:	0033      	movs	r3, r6
 800125c:	4343      	muls	r3, r0
 800125e:	4699      	mov	r9, r3
 8001260:	4643      	mov	r3, r8
 8001262:	4343      	muls	r3, r0
 8001264:	002f      	movs	r7, r5
 8001266:	469a      	mov	sl, r3
 8001268:	4643      	mov	r3, r8
 800126a:	4377      	muls	r7, r6
 800126c:	435d      	muls	r5, r3
 800126e:	0c38      	lsrs	r0, r7, #16
 8001270:	444d      	add	r5, r9
 8001272:	1945      	adds	r5, r0, r5
 8001274:	45a9      	cmp	r9, r5
 8001276:	d903      	bls.n	8001280 <__aeabi_dmul+0x168>
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	4699      	mov	r9, r3
 800127e:	44ca      	add	sl, r9
 8001280:	043f      	lsls	r7, r7, #16
 8001282:	0c28      	lsrs	r0, r5, #16
 8001284:	0c3f      	lsrs	r7, r7, #16
 8001286:	042d      	lsls	r5, r5, #16
 8001288:	19ed      	adds	r5, r5, r7
 800128a:	0c27      	lsrs	r7, r4, #16
 800128c:	0424      	lsls	r4, r4, #16
 800128e:	0c24      	lsrs	r4, r4, #16
 8001290:	0003      	movs	r3, r0
 8001292:	0020      	movs	r0, r4
 8001294:	4350      	muls	r0, r2
 8001296:	437a      	muls	r2, r7
 8001298:	4691      	mov	r9, r2
 800129a:	003a      	movs	r2, r7
 800129c:	4453      	add	r3, sl
 800129e:	9305      	str	r3, [sp, #20]
 80012a0:	0c03      	lsrs	r3, r0, #16
 80012a2:	469a      	mov	sl, r3
 80012a4:	434a      	muls	r2, r1
 80012a6:	4361      	muls	r1, r4
 80012a8:	4449      	add	r1, r9
 80012aa:	4451      	add	r1, sl
 80012ac:	44ab      	add	fp, r5
 80012ae:	4589      	cmp	r9, r1
 80012b0:	d903      	bls.n	80012ba <__aeabi_dmul+0x1a2>
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	4699      	mov	r9, r3
 80012b8:	444a      	add	r2, r9
 80012ba:	0400      	lsls	r0, r0, #16
 80012bc:	0c0b      	lsrs	r3, r1, #16
 80012be:	0c00      	lsrs	r0, r0, #16
 80012c0:	0409      	lsls	r1, r1, #16
 80012c2:	1809      	adds	r1, r1, r0
 80012c4:	0020      	movs	r0, r4
 80012c6:	4699      	mov	r9, r3
 80012c8:	4643      	mov	r3, r8
 80012ca:	4370      	muls	r0, r6
 80012cc:	435c      	muls	r4, r3
 80012ce:	437e      	muls	r6, r7
 80012d0:	435f      	muls	r7, r3
 80012d2:	0c03      	lsrs	r3, r0, #16
 80012d4:	4698      	mov	r8, r3
 80012d6:	19a4      	adds	r4, r4, r6
 80012d8:	4444      	add	r4, r8
 80012da:	444a      	add	r2, r9
 80012dc:	9703      	str	r7, [sp, #12]
 80012de:	42a6      	cmp	r6, r4
 80012e0:	d904      	bls.n	80012ec <__aeabi_dmul+0x1d4>
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	4698      	mov	r8, r3
 80012e8:	4447      	add	r7, r8
 80012ea:	9703      	str	r7, [sp, #12]
 80012ec:	0423      	lsls	r3, r4, #16
 80012ee:	9e02      	ldr	r6, [sp, #8]
 80012f0:	469a      	mov	sl, r3
 80012f2:	9b05      	ldr	r3, [sp, #20]
 80012f4:	445e      	add	r6, fp
 80012f6:	4698      	mov	r8, r3
 80012f8:	42ae      	cmp	r6, r5
 80012fa:	41ad      	sbcs	r5, r5
 80012fc:	1876      	adds	r6, r6, r1
 80012fe:	428e      	cmp	r6, r1
 8001300:	4189      	sbcs	r1, r1
 8001302:	0400      	lsls	r0, r0, #16
 8001304:	0c00      	lsrs	r0, r0, #16
 8001306:	4450      	add	r0, sl
 8001308:	4440      	add	r0, r8
 800130a:	426d      	negs	r5, r5
 800130c:	1947      	adds	r7, r0, r5
 800130e:	46b8      	mov	r8, r7
 8001310:	4693      	mov	fp, r2
 8001312:	4249      	negs	r1, r1
 8001314:	4689      	mov	r9, r1
 8001316:	44c3      	add	fp, r8
 8001318:	44d9      	add	r9, fp
 800131a:	4298      	cmp	r0, r3
 800131c:	4180      	sbcs	r0, r0
 800131e:	45a8      	cmp	r8, r5
 8001320:	41ad      	sbcs	r5, r5
 8001322:	4593      	cmp	fp, r2
 8001324:	4192      	sbcs	r2, r2
 8001326:	4589      	cmp	r9, r1
 8001328:	4189      	sbcs	r1, r1
 800132a:	426d      	negs	r5, r5
 800132c:	4240      	negs	r0, r0
 800132e:	4328      	orrs	r0, r5
 8001330:	0c24      	lsrs	r4, r4, #16
 8001332:	4252      	negs	r2, r2
 8001334:	4249      	negs	r1, r1
 8001336:	430a      	orrs	r2, r1
 8001338:	9b03      	ldr	r3, [sp, #12]
 800133a:	1900      	adds	r0, r0, r4
 800133c:	1880      	adds	r0, r0, r2
 800133e:	18c7      	adds	r7, r0, r3
 8001340:	464b      	mov	r3, r9
 8001342:	0ddc      	lsrs	r4, r3, #23
 8001344:	9b04      	ldr	r3, [sp, #16]
 8001346:	0275      	lsls	r5, r6, #9
 8001348:	431d      	orrs	r5, r3
 800134a:	1e6a      	subs	r2, r5, #1
 800134c:	4195      	sbcs	r5, r2
 800134e:	464b      	mov	r3, r9
 8001350:	0df6      	lsrs	r6, r6, #23
 8001352:	027f      	lsls	r7, r7, #9
 8001354:	4335      	orrs	r5, r6
 8001356:	025a      	lsls	r2, r3, #9
 8001358:	433c      	orrs	r4, r7
 800135a:	4315      	orrs	r5, r2
 800135c:	01fb      	lsls	r3, r7, #7
 800135e:	d400      	bmi.n	8001362 <__aeabi_dmul+0x24a>
 8001360:	e11c      	b.n	800159c <__aeabi_dmul+0x484>
 8001362:	2101      	movs	r1, #1
 8001364:	086a      	lsrs	r2, r5, #1
 8001366:	400d      	ands	r5, r1
 8001368:	4315      	orrs	r5, r2
 800136a:	07e2      	lsls	r2, r4, #31
 800136c:	4315      	orrs	r5, r2
 800136e:	0864      	lsrs	r4, r4, #1
 8001370:	494f      	ldr	r1, [pc, #316]	; (80014b0 <__aeabi_dmul+0x398>)
 8001372:	4461      	add	r1, ip
 8001374:	2900      	cmp	r1, #0
 8001376:	dc00      	bgt.n	800137a <__aeabi_dmul+0x262>
 8001378:	e0b0      	b.n	80014dc <__aeabi_dmul+0x3c4>
 800137a:	076b      	lsls	r3, r5, #29
 800137c:	d009      	beq.n	8001392 <__aeabi_dmul+0x27a>
 800137e:	220f      	movs	r2, #15
 8001380:	402a      	ands	r2, r5
 8001382:	2a04      	cmp	r2, #4
 8001384:	d005      	beq.n	8001392 <__aeabi_dmul+0x27a>
 8001386:	1d2a      	adds	r2, r5, #4
 8001388:	42aa      	cmp	r2, r5
 800138a:	41ad      	sbcs	r5, r5
 800138c:	426d      	negs	r5, r5
 800138e:	1964      	adds	r4, r4, r5
 8001390:	0015      	movs	r5, r2
 8001392:	01e3      	lsls	r3, r4, #7
 8001394:	d504      	bpl.n	80013a0 <__aeabi_dmul+0x288>
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <__aeabi_dmul+0x39c>)
 800139a:	00c9      	lsls	r1, r1, #3
 800139c:	4014      	ands	r4, r2
 800139e:	4461      	add	r1, ip
 80013a0:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <__aeabi_dmul+0x3a0>)
 80013a2:	4291      	cmp	r1, r2
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dmul+0x290>
 80013a6:	e726      	b.n	80011f6 <__aeabi_dmul+0xde>
 80013a8:	0762      	lsls	r2, r4, #29
 80013aa:	08ed      	lsrs	r5, r5, #3
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0549      	lsls	r1, r1, #21
 80013b0:	4315      	orrs	r5, r2
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	0d4a      	lsrs	r2, r1, #21
 80013b6:	e710      	b.n	80011da <__aeabi_dmul+0xc2>
 80013b8:	4652      	mov	r2, sl
 80013ba:	4332      	orrs	r2, r6
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dmul+0x2a8>
 80013be:	e07f      	b.n	80014c0 <__aeabi_dmul+0x3a8>
 80013c0:	2e00      	cmp	r6, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dmul+0x2ae>
 80013c4:	e0dc      	b.n	8001580 <__aeabi_dmul+0x468>
 80013c6:	0030      	movs	r0, r6
 80013c8:	f000 f990 	bl	80016ec <__clzsi2>
 80013cc:	0002      	movs	r2, r0
 80013ce:	3a0b      	subs	r2, #11
 80013d0:	231d      	movs	r3, #29
 80013d2:	0001      	movs	r1, r0
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	4652      	mov	r2, sl
 80013d8:	3908      	subs	r1, #8
 80013da:	40da      	lsrs	r2, r3
 80013dc:	408e      	lsls	r6, r1
 80013de:	4316      	orrs	r6, r2
 80013e0:	4652      	mov	r2, sl
 80013e2:	408a      	lsls	r2, r1
 80013e4:	9b00      	ldr	r3, [sp, #0]
 80013e6:	4935      	ldr	r1, [pc, #212]	; (80014bc <__aeabi_dmul+0x3a4>)
 80013e8:	1a18      	subs	r0, r3, r0
 80013ea:	0003      	movs	r3, r0
 80013ec:	468c      	mov	ip, r1
 80013ee:	4463      	add	r3, ip
 80013f0:	2000      	movs	r0, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	e6d3      	b.n	800119e <__aeabi_dmul+0x86>
 80013f6:	0025      	movs	r5, r4
 80013f8:	4305      	orrs	r5, r0
 80013fa:	d04a      	beq.n	8001492 <__aeabi_dmul+0x37a>
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d100      	bne.n	8001402 <__aeabi_dmul+0x2ea>
 8001400:	e0b0      	b.n	8001564 <__aeabi_dmul+0x44c>
 8001402:	0020      	movs	r0, r4
 8001404:	f000 f972 	bl	80016ec <__clzsi2>
 8001408:	0001      	movs	r1, r0
 800140a:	0002      	movs	r2, r0
 800140c:	390b      	subs	r1, #11
 800140e:	231d      	movs	r3, #29
 8001410:	0010      	movs	r0, r2
 8001412:	1a5b      	subs	r3, r3, r1
 8001414:	0031      	movs	r1, r6
 8001416:	0035      	movs	r5, r6
 8001418:	3808      	subs	r0, #8
 800141a:	4084      	lsls	r4, r0
 800141c:	40d9      	lsrs	r1, r3
 800141e:	4085      	lsls	r5, r0
 8001420:	430c      	orrs	r4, r1
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <__aeabi_dmul+0x3a4>)
 8001424:	1a83      	subs	r3, r0, r2
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	4699      	mov	r9, r3
 800142c:	469b      	mov	fp, r3
 800142e:	e697      	b.n	8001160 <__aeabi_dmul+0x48>
 8001430:	0005      	movs	r5, r0
 8001432:	4325      	orrs	r5, r4
 8001434:	d126      	bne.n	8001484 <__aeabi_dmul+0x36c>
 8001436:	2208      	movs	r2, #8
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2302      	movs	r3, #2
 800143c:	2400      	movs	r4, #0
 800143e:	4691      	mov	r9, r2
 8001440:	469b      	mov	fp, r3
 8001442:	e68d      	b.n	8001160 <__aeabi_dmul+0x48>
 8001444:	4652      	mov	r2, sl
 8001446:	9b00      	ldr	r3, [sp, #0]
 8001448:	4332      	orrs	r2, r6
 800144a:	d110      	bne.n	800146e <__aeabi_dmul+0x356>
 800144c:	4915      	ldr	r1, [pc, #84]	; (80014a4 <__aeabi_dmul+0x38c>)
 800144e:	2600      	movs	r6, #0
 8001450:	468c      	mov	ip, r1
 8001452:	4463      	add	r3, ip
 8001454:	4649      	mov	r1, r9
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2302      	movs	r3, #2
 800145a:	4319      	orrs	r1, r3
 800145c:	4689      	mov	r9, r1
 800145e:	2002      	movs	r0, #2
 8001460:	e69d      	b.n	800119e <__aeabi_dmul+0x86>
 8001462:	465b      	mov	r3, fp
 8001464:	9701      	str	r7, [sp, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d000      	beq.n	800146c <__aeabi_dmul+0x354>
 800146a:	e6ad      	b.n	80011c8 <__aeabi_dmul+0xb0>
 800146c:	e6c3      	b.n	80011f6 <__aeabi_dmul+0xde>
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <__aeabi_dmul+0x38c>)
 8001470:	2003      	movs	r0, #3
 8001472:	4694      	mov	ip, r2
 8001474:	4463      	add	r3, ip
 8001476:	464a      	mov	r2, r9
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2303      	movs	r3, #3
 800147c:	431a      	orrs	r2, r3
 800147e:	4691      	mov	r9, r2
 8001480:	4652      	mov	r2, sl
 8001482:	e68c      	b.n	800119e <__aeabi_dmul+0x86>
 8001484:	220c      	movs	r2, #12
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2303      	movs	r3, #3
 800148a:	0005      	movs	r5, r0
 800148c:	4691      	mov	r9, r2
 800148e:	469b      	mov	fp, r3
 8001490:	e666      	b.n	8001160 <__aeabi_dmul+0x48>
 8001492:	2304      	movs	r3, #4
 8001494:	4699      	mov	r9, r3
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	2400      	movs	r4, #0
 800149e:	469b      	mov	fp, r3
 80014a0:	e65e      	b.n	8001160 <__aeabi_dmul+0x48>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff
 80014a8:	fffffc01 	.word	0xfffffc01
 80014ac:	08008160 	.word	0x08008160
 80014b0:	000003ff 	.word	0x000003ff
 80014b4:	feffffff 	.word	0xfeffffff
 80014b8:	000007fe 	.word	0x000007fe
 80014bc:	fffffc0d 	.word	0xfffffc0d
 80014c0:	4649      	mov	r1, r9
 80014c2:	2301      	movs	r3, #1
 80014c4:	4319      	orrs	r1, r3
 80014c6:	4689      	mov	r9, r1
 80014c8:	2600      	movs	r6, #0
 80014ca:	2001      	movs	r0, #1
 80014cc:	e667      	b.n	800119e <__aeabi_dmul+0x86>
 80014ce:	2300      	movs	r3, #0
 80014d0:	2480      	movs	r4, #128	; 0x80
 80014d2:	2500      	movs	r5, #0
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <__aeabi_dmul+0x4cc>)
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	0324      	lsls	r4, r4, #12
 80014da:	e67e      	b.n	80011da <__aeabi_dmul+0xc2>
 80014dc:	2001      	movs	r0, #1
 80014de:	1a40      	subs	r0, r0, r1
 80014e0:	2838      	cmp	r0, #56	; 0x38
 80014e2:	dd00      	ble.n	80014e6 <__aeabi_dmul+0x3ce>
 80014e4:	e676      	b.n	80011d4 <__aeabi_dmul+0xbc>
 80014e6:	281f      	cmp	r0, #31
 80014e8:	dd5b      	ble.n	80015a2 <__aeabi_dmul+0x48a>
 80014ea:	221f      	movs	r2, #31
 80014ec:	0023      	movs	r3, r4
 80014ee:	4252      	negs	r2, r2
 80014f0:	1a51      	subs	r1, r2, r1
 80014f2:	40cb      	lsrs	r3, r1
 80014f4:	0019      	movs	r1, r3
 80014f6:	2820      	cmp	r0, #32
 80014f8:	d003      	beq.n	8001502 <__aeabi_dmul+0x3ea>
 80014fa:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <__aeabi_dmul+0x4d0>)
 80014fc:	4462      	add	r2, ip
 80014fe:	4094      	lsls	r4, r2
 8001500:	4325      	orrs	r5, r4
 8001502:	1e6a      	subs	r2, r5, #1
 8001504:	4195      	sbcs	r5, r2
 8001506:	002a      	movs	r2, r5
 8001508:	430a      	orrs	r2, r1
 800150a:	2107      	movs	r1, #7
 800150c:	000d      	movs	r5, r1
 800150e:	2400      	movs	r4, #0
 8001510:	4015      	ands	r5, r2
 8001512:	4211      	tst	r1, r2
 8001514:	d05b      	beq.n	80015ce <__aeabi_dmul+0x4b6>
 8001516:	210f      	movs	r1, #15
 8001518:	2400      	movs	r4, #0
 800151a:	4011      	ands	r1, r2
 800151c:	2904      	cmp	r1, #4
 800151e:	d053      	beq.n	80015c8 <__aeabi_dmul+0x4b0>
 8001520:	1d11      	adds	r1, r2, #4
 8001522:	4291      	cmp	r1, r2
 8001524:	4192      	sbcs	r2, r2
 8001526:	4252      	negs	r2, r2
 8001528:	18a4      	adds	r4, r4, r2
 800152a:	000a      	movs	r2, r1
 800152c:	0223      	lsls	r3, r4, #8
 800152e:	d54b      	bpl.n	80015c8 <__aeabi_dmul+0x4b0>
 8001530:	2201      	movs	r2, #1
 8001532:	2400      	movs	r4, #0
 8001534:	2500      	movs	r5, #0
 8001536:	e650      	b.n	80011da <__aeabi_dmul+0xc2>
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	031b      	lsls	r3, r3, #12
 800153c:	421c      	tst	r4, r3
 800153e:	d009      	beq.n	8001554 <__aeabi_dmul+0x43c>
 8001540:	421e      	tst	r6, r3
 8001542:	d107      	bne.n	8001554 <__aeabi_dmul+0x43c>
 8001544:	4333      	orrs	r3, r6
 8001546:	031c      	lsls	r4, r3, #12
 8001548:	4643      	mov	r3, r8
 800154a:	0015      	movs	r5, r2
 800154c:	0b24      	lsrs	r4, r4, #12
 800154e:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <__aeabi_dmul+0x4cc>)
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	e642      	b.n	80011da <__aeabi_dmul+0xc2>
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0312      	lsls	r2, r2, #12
 8001558:	4314      	orrs	r4, r2
 800155a:	0324      	lsls	r4, r4, #12
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <__aeabi_dmul+0x4cc>)
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	9701      	str	r7, [sp, #4]
 8001562:	e63a      	b.n	80011da <__aeabi_dmul+0xc2>
 8001564:	f000 f8c2 	bl	80016ec <__clzsi2>
 8001568:	0001      	movs	r1, r0
 800156a:	0002      	movs	r2, r0
 800156c:	3115      	adds	r1, #21
 800156e:	3220      	adds	r2, #32
 8001570:	291c      	cmp	r1, #28
 8001572:	dc00      	bgt.n	8001576 <__aeabi_dmul+0x45e>
 8001574:	e74b      	b.n	800140e <__aeabi_dmul+0x2f6>
 8001576:	0034      	movs	r4, r6
 8001578:	3808      	subs	r0, #8
 800157a:	2500      	movs	r5, #0
 800157c:	4084      	lsls	r4, r0
 800157e:	e750      	b.n	8001422 <__aeabi_dmul+0x30a>
 8001580:	f000 f8b4 	bl	80016ec <__clzsi2>
 8001584:	0003      	movs	r3, r0
 8001586:	001a      	movs	r2, r3
 8001588:	3215      	adds	r2, #21
 800158a:	3020      	adds	r0, #32
 800158c:	2a1c      	cmp	r2, #28
 800158e:	dc00      	bgt.n	8001592 <__aeabi_dmul+0x47a>
 8001590:	e71e      	b.n	80013d0 <__aeabi_dmul+0x2b8>
 8001592:	4656      	mov	r6, sl
 8001594:	3b08      	subs	r3, #8
 8001596:	2200      	movs	r2, #0
 8001598:	409e      	lsls	r6, r3
 800159a:	e723      	b.n	80013e4 <__aeabi_dmul+0x2cc>
 800159c:	9b00      	ldr	r3, [sp, #0]
 800159e:	469c      	mov	ip, r3
 80015a0:	e6e6      	b.n	8001370 <__aeabi_dmul+0x258>
 80015a2:	4912      	ldr	r1, [pc, #72]	; (80015ec <__aeabi_dmul+0x4d4>)
 80015a4:	0022      	movs	r2, r4
 80015a6:	4461      	add	r1, ip
 80015a8:	002e      	movs	r6, r5
 80015aa:	408d      	lsls	r5, r1
 80015ac:	408a      	lsls	r2, r1
 80015ae:	40c6      	lsrs	r6, r0
 80015b0:	1e69      	subs	r1, r5, #1
 80015b2:	418d      	sbcs	r5, r1
 80015b4:	4332      	orrs	r2, r6
 80015b6:	432a      	orrs	r2, r5
 80015b8:	40c4      	lsrs	r4, r0
 80015ba:	0753      	lsls	r3, r2, #29
 80015bc:	d0b6      	beq.n	800152c <__aeabi_dmul+0x414>
 80015be:	210f      	movs	r1, #15
 80015c0:	4011      	ands	r1, r2
 80015c2:	2904      	cmp	r1, #4
 80015c4:	d1ac      	bne.n	8001520 <__aeabi_dmul+0x408>
 80015c6:	e7b1      	b.n	800152c <__aeabi_dmul+0x414>
 80015c8:	0765      	lsls	r5, r4, #29
 80015ca:	0264      	lsls	r4, r4, #9
 80015cc:	0b24      	lsrs	r4, r4, #12
 80015ce:	08d2      	lsrs	r2, r2, #3
 80015d0:	4315      	orrs	r5, r2
 80015d2:	2200      	movs	r2, #0
 80015d4:	e601      	b.n	80011da <__aeabi_dmul+0xc2>
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4314      	orrs	r4, r2
 80015dc:	0324      	lsls	r4, r4, #12
 80015de:	4a01      	ldr	r2, [pc, #4]	; (80015e4 <__aeabi_dmul+0x4cc>)
 80015e0:	0b24      	lsrs	r4, r4, #12
 80015e2:	e5fa      	b.n	80011da <__aeabi_dmul+0xc2>
 80015e4:	000007ff 	.word	0x000007ff
 80015e8:	0000043e 	.word	0x0000043e
 80015ec:	0000041e 	.word	0x0000041e

080015f0 <__aeabi_d2iz>:
 80015f0:	000a      	movs	r2, r1
 80015f2:	b530      	push	{r4, r5, lr}
 80015f4:	4c13      	ldr	r4, [pc, #76]	; (8001644 <__aeabi_d2iz+0x54>)
 80015f6:	0053      	lsls	r3, r2, #1
 80015f8:	0309      	lsls	r1, r1, #12
 80015fa:	0005      	movs	r5, r0
 80015fc:	0b09      	lsrs	r1, r1, #12
 80015fe:	2000      	movs	r0, #0
 8001600:	0d5b      	lsrs	r3, r3, #21
 8001602:	0fd2      	lsrs	r2, r2, #31
 8001604:	42a3      	cmp	r3, r4
 8001606:	dd04      	ble.n	8001612 <__aeabi_d2iz+0x22>
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <__aeabi_d2iz+0x58>)
 800160a:	4283      	cmp	r3, r0
 800160c:	dd02      	ble.n	8001614 <__aeabi_d2iz+0x24>
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <__aeabi_d2iz+0x5c>)
 8001610:	18d0      	adds	r0, r2, r3
 8001612:	bd30      	pop	{r4, r5, pc}
 8001614:	2080      	movs	r0, #128	; 0x80
 8001616:	0340      	lsls	r0, r0, #13
 8001618:	4301      	orrs	r1, r0
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <__aeabi_d2iz+0x60>)
 800161c:	1ac0      	subs	r0, r0, r3
 800161e:	281f      	cmp	r0, #31
 8001620:	dd08      	ble.n	8001634 <__aeabi_d2iz+0x44>
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <__aeabi_d2iz+0x64>)
 8001624:	1ac3      	subs	r3, r0, r3
 8001626:	40d9      	lsrs	r1, r3
 8001628:	000b      	movs	r3, r1
 800162a:	4258      	negs	r0, r3
 800162c:	2a00      	cmp	r2, #0
 800162e:	d1f0      	bne.n	8001612 <__aeabi_d2iz+0x22>
 8001630:	0018      	movs	r0, r3
 8001632:	e7ee      	b.n	8001612 <__aeabi_d2iz+0x22>
 8001634:	4c08      	ldr	r4, [pc, #32]	; (8001658 <__aeabi_d2iz+0x68>)
 8001636:	40c5      	lsrs	r5, r0
 8001638:	46a4      	mov	ip, r4
 800163a:	4463      	add	r3, ip
 800163c:	4099      	lsls	r1, r3
 800163e:	000b      	movs	r3, r1
 8001640:	432b      	orrs	r3, r5
 8001642:	e7f2      	b.n	800162a <__aeabi_d2iz+0x3a>
 8001644:	000003fe 	.word	0x000003fe
 8001648:	0000041d 	.word	0x0000041d
 800164c:	7fffffff 	.word	0x7fffffff
 8001650:	00000433 	.word	0x00000433
 8001654:	00000413 	.word	0x00000413
 8001658:	fffffbed 	.word	0xfffffbed

0800165c <__aeabi_f2d>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	0043      	lsls	r3, r0, #1
 8001660:	0246      	lsls	r6, r0, #9
 8001662:	0fc4      	lsrs	r4, r0, #31
 8001664:	20fe      	movs	r0, #254	; 0xfe
 8001666:	0e1b      	lsrs	r3, r3, #24
 8001668:	1c59      	adds	r1, r3, #1
 800166a:	0a75      	lsrs	r5, r6, #9
 800166c:	4208      	tst	r0, r1
 800166e:	d00c      	beq.n	800168a <__aeabi_f2d+0x2e>
 8001670:	22e0      	movs	r2, #224	; 0xe0
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	4694      	mov	ip, r2
 8001676:	076d      	lsls	r5, r5, #29
 8001678:	0b36      	lsrs	r6, r6, #12
 800167a:	4463      	add	r3, ip
 800167c:	051b      	lsls	r3, r3, #20
 800167e:	4333      	orrs	r3, r6
 8001680:	07e4      	lsls	r4, r4, #31
 8001682:	4323      	orrs	r3, r4
 8001684:	0028      	movs	r0, r5
 8001686:	0019      	movs	r1, r3
 8001688:	bd70      	pop	{r4, r5, r6, pc}
 800168a:	2b00      	cmp	r3, #0
 800168c:	d114      	bne.n	80016b8 <__aeabi_f2d+0x5c>
 800168e:	2d00      	cmp	r5, #0
 8001690:	d01b      	beq.n	80016ca <__aeabi_f2d+0x6e>
 8001692:	0028      	movs	r0, r5
 8001694:	f000 f82a 	bl	80016ec <__clzsi2>
 8001698:	280a      	cmp	r0, #10
 800169a:	dc1c      	bgt.n	80016d6 <__aeabi_f2d+0x7a>
 800169c:	230b      	movs	r3, #11
 800169e:	002e      	movs	r6, r5
 80016a0:	1a1b      	subs	r3, r3, r0
 80016a2:	40de      	lsrs	r6, r3
 80016a4:	0003      	movs	r3, r0
 80016a6:	3315      	adds	r3, #21
 80016a8:	409d      	lsls	r5, r3
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <__aeabi_f2d+0x88>)
 80016ac:	0336      	lsls	r6, r6, #12
 80016ae:	1a12      	subs	r2, r2, r0
 80016b0:	0552      	lsls	r2, r2, #21
 80016b2:	0b36      	lsrs	r6, r6, #12
 80016b4:	0d53      	lsrs	r3, r2, #21
 80016b6:	e7e1      	b.n	800167c <__aeabi_f2d+0x20>
 80016b8:	2d00      	cmp	r5, #0
 80016ba:	d009      	beq.n	80016d0 <__aeabi_f2d+0x74>
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0b36      	lsrs	r6, r6, #12
 80016c0:	0312      	lsls	r2, r2, #12
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <__aeabi_f2d+0x8c>)
 80016c4:	076d      	lsls	r5, r5, #29
 80016c6:	4316      	orrs	r6, r2
 80016c8:	e7d8      	b.n	800167c <__aeabi_f2d+0x20>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2600      	movs	r6, #0
 80016ce:	e7d5      	b.n	800167c <__aeabi_f2d+0x20>
 80016d0:	2600      	movs	r6, #0
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <__aeabi_f2d+0x8c>)
 80016d4:	e7d2      	b.n	800167c <__aeabi_f2d+0x20>
 80016d6:	0003      	movs	r3, r0
 80016d8:	3b0b      	subs	r3, #11
 80016da:	409d      	lsls	r5, r3
 80016dc:	002e      	movs	r6, r5
 80016de:	2500      	movs	r5, #0
 80016e0:	e7e3      	b.n	80016aa <__aeabi_f2d+0x4e>
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	00000389 	.word	0x00000389
 80016e8:	000007ff 	.word	0x000007ff

080016ec <__clzsi2>:
 80016ec:	211c      	movs	r1, #28
 80016ee:	2301      	movs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	4298      	cmp	r0, r3
 80016f4:	d301      	bcc.n	80016fa <__clzsi2+0xe>
 80016f6:	0c00      	lsrs	r0, r0, #16
 80016f8:	3910      	subs	r1, #16
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	4298      	cmp	r0, r3
 80016fe:	d301      	bcc.n	8001704 <__clzsi2+0x18>
 8001700:	0a00      	lsrs	r0, r0, #8
 8001702:	3908      	subs	r1, #8
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	4298      	cmp	r0, r3
 8001708:	d301      	bcc.n	800170e <__clzsi2+0x22>
 800170a:	0900      	lsrs	r0, r0, #4
 800170c:	3904      	subs	r1, #4
 800170e:	a202      	add	r2, pc, #8	; (adr r2, 8001718 <__clzsi2+0x2c>)
 8001710:	5c10      	ldrb	r0, [r2, r0]
 8001712:	1840      	adds	r0, r0, r1
 8001714:	4770      	bx	lr
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	02020304 	.word	0x02020304
 800171c:	01010101 	.word	0x01010101
	...

08001728 <leds_init>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t dma_ready = 1;


void leds_init(led_controller *led, TIM_HandleTypeDef * htim, uint32_t Channel)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
	led->htim = htim;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	601a      	str	r2, [r3, #0]
	led->Channel = Channel;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	605a      	str	r2, [r3, #4]


	for(int i = 0; i < ARRAY_LEN - DELAY_LEN - FRONT_DELAY; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e009      	b.n	800175a <leds_init+0x32>
	{
		BUF_DMA[i+FRONT_DELAY] = LOW;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3308      	adds	r3, #8
 800174a:	001a      	movs	r2, r3
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <leds_init+0x48>)
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	210f      	movs	r1, #15
 8001752:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ARRAY_LEN - DELAY_LEN - FRONT_DELAY; i++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	2390      	movs	r3, #144	; 0x90
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf0      	blt.n	8001746 <leds_init+0x1e>
	}
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b006      	add	sp, #24
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	20000090 	.word	0x20000090

08001774 <set_color>:
	leds->led_array[pos].g = G;
	leds->led_array[pos].b = B;
}

void set_color(uint8_t R, uint8_t G, uint8_t B, uint16_t pos)
{
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	0005      	movs	r5, r0
 800177c:	000c      	movs	r4, r1
 800177e:	0010      	movs	r0, r2
 8001780:	0019      	movs	r1, r3
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	1c2a      	adds	r2, r5, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	1dbb      	adds	r3, r7, #6
 800178a:	1c22      	adds	r2, r4, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	1d7b      	adds	r3, r7, #5
 8001790:	1c02      	adds	r2, r0, #0
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	1cbb      	adds	r3, r7, #2
 8001796:	1c0a      	adds	r2, r1, #0
 8001798:	801a      	strh	r2, [r3, #0]
	int i;
	for(i = 0; i<8; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e081      	b.n	80018a4 <set_color+0x130>
	{
		if(BitIsSet(G, 7-i))
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2107      	movs	r1, #7
 80017a8:	1acb      	subs	r3, r1, r3
 80017aa:	411a      	asrs	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d00f      	beq.n	80017d4 <set_color+0x60>
			BUF_DMA[i+pos*24 + FRONT_DELAY] = HIGH;
 80017b4:	1cbb      	adds	r3, r7, #2
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	0013      	movs	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	001a      	movs	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	18d3      	adds	r3, r2, r3
 80017c6:	3308      	adds	r3, #8
 80017c8:	001a      	movs	r2, r3
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <set_color+0x144>)
 80017cc:	0052      	lsls	r2, r2, #1
 80017ce:	2123      	movs	r1, #35	; 0x23
 80017d0:	52d1      	strh	r1, [r2, r3]
 80017d2:	e00e      	b.n	80017f2 <set_color+0x7e>
		else
			BUF_DMA[i+pos*24+ FRONT_DELAY] = LOW;
 80017d4:	1cbb      	adds	r3, r7, #2
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	0013      	movs	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	189b      	adds	r3, r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	001a      	movs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	3308      	adds	r3, #8
 80017e8:	001a      	movs	r2, r3
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <set_color+0x144>)
 80017ec:	0052      	lsls	r2, r2, #1
 80017ee:	210f      	movs	r1, #15
 80017f0:	52d1      	strh	r1, [r2, r3]

		if(BitIsSet(R, 7-i))
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2107      	movs	r1, #7
 80017fa:	1acb      	subs	r3, r1, r3
 80017fc:	411a      	asrs	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	2201      	movs	r2, #1
 8001802:	4013      	ands	r3, r2
 8001804:	d010      	beq.n	8001828 <set_color+0xb4>
			BUF_DMA[i+8+pos*24+ FRONT_DELAY] = HIGH;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3308      	adds	r3, #8
 800180a:	0019      	movs	r1, r3
 800180c:	1cbb      	adds	r3, r7, #2
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	0013      	movs	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	189b      	adds	r3, r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	18cb      	adds	r3, r1, r3
 800181a:	3308      	adds	r3, #8
 800181c:	001a      	movs	r2, r3
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <set_color+0x144>)
 8001820:	0052      	lsls	r2, r2, #1
 8001822:	2123      	movs	r1, #35	; 0x23
 8001824:	52d1      	strh	r1, [r2, r3]
 8001826:	e00f      	b.n	8001848 <set_color+0xd4>
		else
			BUF_DMA[i+8+pos*24+ FRONT_DELAY] = LOW;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	0019      	movs	r1, r3
 800182e:	1cbb      	adds	r3, r7, #2
 8001830:	881a      	ldrh	r2, [r3, #0]
 8001832:	0013      	movs	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	189b      	adds	r3, r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	18cb      	adds	r3, r1, r3
 800183c:	3308      	adds	r3, #8
 800183e:	001a      	movs	r2, r3
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <set_color+0x144>)
 8001842:	0052      	lsls	r2, r2, #1
 8001844:	210f      	movs	r1, #15
 8001846:	52d1      	strh	r1, [r2, r3]

		if(BitIsSet(B, 7-i))
 8001848:	1d7b      	adds	r3, r7, #5
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2107      	movs	r1, #7
 8001850:	1acb      	subs	r3, r1, r3
 8001852:	411a      	asrs	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	2201      	movs	r2, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d010      	beq.n	800187e <set_color+0x10a>
			BUF_DMA[i+16+pos*24+ FRONT_DELAY] = HIGH;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3310      	adds	r3, #16
 8001860:	0019      	movs	r1, r3
 8001862:	1cbb      	adds	r3, r7, #2
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	0013      	movs	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	189b      	adds	r3, r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	18cb      	adds	r3, r1, r3
 8001870:	3308      	adds	r3, #8
 8001872:	001a      	movs	r2, r3
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <set_color+0x144>)
 8001876:	0052      	lsls	r2, r2, #1
 8001878:	2123      	movs	r1, #35	; 0x23
 800187a:	52d1      	strh	r1, [r2, r3]
 800187c:	e00f      	b.n	800189e <set_color+0x12a>
		else
			BUF_DMA[i+16+pos*24+ FRONT_DELAY] = LOW;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3310      	adds	r3, #16
 8001882:	0019      	movs	r1, r3
 8001884:	1cbb      	adds	r3, r7, #2
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	0013      	movs	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	189b      	adds	r3, r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	18cb      	adds	r3, r1, r3
 8001892:	3308      	adds	r3, #8
 8001894:	001a      	movs	r2, r3
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <set_color+0x144>)
 8001898:	0052      	lsls	r2, r2, #1
 800189a:	210f      	movs	r1, #15
 800189c:	52d1      	strh	r1, [r2, r3]
	for(i = 0; i<8; i++)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	dc00      	bgt.n	80018ac <set_color+0x138>
 80018aa:	e779      	b.n	80017a0 <set_color+0x2c>
	}
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b004      	add	sp, #16
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	20000090 	.word	0x20000090

080018bc <led_display>:

void led_display(led_controller *led)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	//while(!dma_ready);
	dma_ready = 0;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <led_display+0x28>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(led->htim, led->Channel, (uint32_t*)&BUF_DMA, ARRAY_LEN);	//ARRAY_LEN
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	23b4      	movs	r3, #180	; 0xb4
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <led_display+0x2c>)
 80018d8:	f003 fc82 	bl	80051e0 <HAL_TIM_PWM_Start_DMA>
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000090 	.word	0x20000090

080018ec <decode_packet>:

extern UART_HandleTypeDef huart2;


int decode_packet(char * rx_msg, int length)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b09c      	sub	sp, #112	; 0x70
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	int tmp;
	if(length < 1 || rx_msg[0] == 0)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	dd03      	ble.n	8001904 <decode_packet+0x18>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <decode_packet+0x1c>
		return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e09c      	b.n	8001a42 <decode_packet+0x156>


	char arg1[20] = {0}, arg2[20] = {0};
 8001908:	2450      	movs	r4, #80	; 0x50
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	3304      	adds	r3, #4
 8001912:	2210      	movs	r2, #16
 8001914:	2100      	movs	r1, #0
 8001916:	0018      	movs	r0, r3
 8001918:	f005 fea1 	bl	800765e <memset>
 800191c:	253c      	movs	r5, #60	; 0x3c
 800191e:	197b      	adds	r3, r7, r5
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	3304      	adds	r3, #4
 8001926:	2210      	movs	r2, #16
 8001928:	2100      	movs	r1, #0
 800192a:	0018      	movs	r0, r3
 800192c:	f005 fe97 	bl	800765e <memset>
	split_command(rx_msg, length, arg1, arg2);
 8001930:	197b      	adds	r3, r7, r5
 8001932:	193a      	adds	r2, r7, r4
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f892 	bl	8001a60 <split_command>

	char tmp_buf[50];
	memset(tmp_buf, 0, sizeof(tmp_buf));
 800193c:	2408      	movs	r4, #8
 800193e:	193b      	adds	r3, r7, r4
 8001940:	2232      	movs	r2, #50	; 0x32
 8001942:	2100      	movs	r1, #0
 8001944:	0018      	movs	r0, r3
 8001946:	f005 fe8a 	bl	800765e <memset>
	snprintf(tmp_buf, 50, "LEN: %d, DATA: %s\n", length, rx_msg);
 800194a:	6839      	ldr	r1, [r7, #0]
 800194c:	4a3f      	ldr	r2, [pc, #252]	; (8001a4c <decode_packet+0x160>)
 800194e:	1938      	adds	r0, r7, r4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	000b      	movs	r3, r1
 8001956:	2132      	movs	r1, #50	; 0x32
 8001958:	f005 fe8a 	bl	8007670 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 800195c:	193b      	adds	r3, r7, r4
 800195e:	0018      	movs	r0, r3
 8001960:	f7fe fbd2 	bl	8000108 <strlen>
 8001964:	0003      	movs	r3, r0
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <decode_packet+0x164>)
 800196a:	1939      	adds	r1, r7, r4
 800196c:	4839      	ldr	r0, [pc, #228]	; (8001a54 <decode_packet+0x168>)
 800196e:	f004 feab 	bl	80066c8 <HAL_UART_Transmit>


	switch(rx_msg[0])
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b61      	cmp	r3, #97	; 0x61
 8001978:	d008      	beq.n	800198c <decode_packet+0xa0>
 800197a:	dc47      	bgt.n	8001a0c <decode_packet+0x120>
 800197c:	2b2d      	cmp	r3, #45	; 0x2d
 800197e:	d002      	beq.n	8001986 <decode_packet+0x9a>
 8001980:	2b41      	cmp	r3, #65	; 0x41
 8001982:	d023      	beq.n	80019cc <decode_packet+0xe0>
 8001984:	e042      	b.n	8001a0c <decode_packet+0x120>
	{
		case '-':
			HAL_NVIC_SystemReset();
 8001986:	f001 ffa0 	bl	80038ca <HAL_NVIC_SystemReset>
			break;
 800198a:	e059      	b.n	8001a40 <decode_packet+0x154>

		case 'a':
		{
			//int tmp = atoi(arg1);
			tmp = atoi(arg1);
 800198c:	2350      	movs	r3, #80	; 0x50
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	0018      	movs	r0, r3
 8001992:	f005 fe2b 	bl	80075ec <atoi>
 8001996:	0003      	movs	r3, r0
 8001998:	667b      	str	r3, [r7, #100]	; 0x64
			memset(tmp_buf, 0, sizeof(tmp_buf));
 800199a:	2408      	movs	r4, #8
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2232      	movs	r2, #50	; 0x32
 80019a0:	2100      	movs	r1, #0
 80019a2:	0018      	movs	r0, r3
 80019a4:	f005 fe5b 	bl	800765e <memset>
			snprintf(tmp_buf, 50, "spin motor A %d\n", tmp);
 80019a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019aa:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <decode_packet+0x16c>)
 80019ac:	1938      	adds	r0, r7, r4
 80019ae:	2132      	movs	r1, #50	; 0x32
 80019b0:	f005 fe5e 	bl	8007670 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7fe fba6 	bl	8000108 <strlen>
 80019bc:	0003      	movs	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <decode_packet+0x164>)
 80019c2:	1939      	adds	r1, r7, r4
 80019c4:	4823      	ldr	r0, [pc, #140]	; (8001a54 <decode_packet+0x168>)
 80019c6:	f004 fe7f 	bl	80066c8 <HAL_UART_Transmit>

			//spin_motor(&dc_motor_1, tmp);
		}
			break;
 80019ca:	e039      	b.n	8001a40 <decode_packet+0x154>

		case 'A':
		{
			//int tmp = atoi(arg1);
			tmp = atoi(arg1);
 80019cc:	2350      	movs	r3, #80	; 0x50
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	0018      	movs	r0, r3
 80019d2:	f005 fe0b 	bl	80075ec <atoi>
 80019d6:	0003      	movs	r3, r0
 80019d8:	667b      	str	r3, [r7, #100]	; 0x64
			memset(tmp_buf, 0, sizeof(tmp_buf));
 80019da:	2408      	movs	r4, #8
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	2232      	movs	r2, #50	; 0x32
 80019e0:	2100      	movs	r1, #0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f005 fe3b 	bl	800765e <memset>
			snprintf(tmp_buf, 50, "spin motor A %d\n", tmp);
 80019e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019ea:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <decode_packet+0x16c>)
 80019ec:	1938      	adds	r0, r7, r4
 80019ee:	2132      	movs	r1, #50	; 0x32
 80019f0:	f005 fe3e 	bl	8007670 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fb86 	bl	8000108 <strlen>
 80019fc:	0003      	movs	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <decode_packet+0x164>)
 8001a02:	1939      	adds	r1, r7, r4
 8001a04:	4813      	ldr	r0, [pc, #76]	; (8001a54 <decode_packet+0x168>)
 8001a06:	f004 fe5f 	bl	80066c8 <HAL_UART_Transmit>

			//spin_motor(&dc_motor_1, tmp);
		}
			break;
 8001a0a:	e019      	b.n	8001a40 <decode_packet+0x154>


		default:
			memset(tmp_buf, 0, sizeof(tmp_buf));
 8001a0c:	2408      	movs	r4, #8
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	2232      	movs	r2, #50	; 0x32
 8001a12:	2100      	movs	r1, #0
 8001a14:	0018      	movs	r0, r3
 8001a16:	f005 fe22 	bl	800765e <memset>
			snprintf(tmp_buf, 50, "unknown command: '%c'\n", rx_msg[0]);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <decode_packet+0x170>)
 8001a20:	1938      	adds	r0, r7, r4
 8001a22:	2132      	movs	r1, #50	; 0x32
 8001a24:	f005 fe24 	bl	8007670 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7fe fb6c 	bl	8000108 <strlen>
 8001a30:	0003      	movs	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <decode_packet+0x164>)
 8001a36:	1939      	adds	r1, r7, r4
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <decode_packet+0x168>)
 8001a3a:	f004 fe45 	bl	80066c8 <HAL_UART_Transmit>
			break;
 8001a3e:	46c0      	nop			; (mov r8, r8)
	}
	return tmp;
 8001a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b01a      	add	sp, #104	; 0x68
 8001a48:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	080080c0 	.word	0x080080c0
 8001a50:	0000ffff 	.word	0x0000ffff
 8001a54:	200005f0 	.word	0x200005f0
 8001a58:	080080d4 	.word	0x080080d4
 8001a5c:	080080e8 	.word	0x080080e8

08001a60 <split_command>:

void split_command(char * packet, int len, char * arg1, char* arg2)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
    int index = 0, prev_index = 1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	2301      	movs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]

    index = getposition(packet, 0, ',');
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	222c      	movs	r2, #44	; 0x2c
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f885 	bl	8001b8c <getposition>
 8001a82:	0003      	movs	r3, r0
 8001a84:	617b      	str	r3, [r7, #20]

    if(index > 0)   //if found a ','
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	dd44      	ble.n	8001b16 <split_command+0xb6>
    {
        memcpy(arg1, packet + prev_index, index-1);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	18d1      	adds	r1, r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	001a      	movs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f005 fdd6 	bl	800764c <memcpy>
        prev_index = index + 1;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]


        index = getposition(packet + prev_index, 0, '\r');
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	220d      	movs	r2, #13
 8001aae:	2100      	movs	r1, #0
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f86b 	bl	8001b8c <getposition>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	617b      	str	r3, [r7, #20]
        if(index >= 0)   //if theres \r
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db08      	blt.n	8001ad2 <split_command+0x72>
        {
            memcpy(arg2, packet + prev_index, index);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	18d1      	adds	r1, r2, r3
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f005 fdbe 	bl	800764c <memcpy>
            {
                memcpy(arg1, packet + prev_index, len - prev_index);
            }
        }
    }
}
 8001ad0:	e058      	b.n	8001b84 <split_command+0x124>
            index = getposition(packet + prev_index, 0, '\n');
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	18d3      	adds	r3, r2, r3
 8001ad8:	220a      	movs	r2, #10
 8001ada:	2100      	movs	r1, #0
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 f855 	bl	8001b8c <getposition>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	617b      	str	r3, [r7, #20]
            if(index >= 0)   //if theres \n and its not in the first char
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db08      	blt.n	8001afe <split_command+0x9e>
                memcpy(arg2, packet + prev_index, index);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	18d1      	adds	r1, r2, r3
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f005 fda8 	bl	800764c <memcpy>
}
 8001afc:	e042      	b.n	8001b84 <split_command+0x124>
                memcpy(arg2, packet + prev_index, len - prev_index);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	18d1      	adds	r1, r2, r3
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f005 fd9c 	bl	800764c <memcpy>
}
 8001b14:	e036      	b.n	8001b84 <split_command+0x124>
        index = getposition(packet, 0, '\r');
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	220d      	movs	r2, #13
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f835 	bl	8001b8c <getposition>
 8001b22:	0003      	movs	r3, r0
 8001b24:	617b      	str	r3, [r7, #20]
        if(index >= 1)   //if theres \r and its not in the first char
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dd0a      	ble.n	8001b42 <split_command+0xe2>
            memcpy(arg1, packet + prev_index, index-1);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	18d1      	adds	r1, r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	001a      	movs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f005 fd86 	bl	800764c <memcpy>
}
 8001b40:	e020      	b.n	8001b84 <split_command+0x124>
            index = getposition(packet, 0, '\n');
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	220a      	movs	r2, #10
 8001b46:	2100      	movs	r1, #0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 f81f 	bl	8001b8c <getposition>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	617b      	str	r3, [r7, #20]
            if(index >= 1)   //if theres \n and its not in the first char
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	dd0a      	ble.n	8001b6e <split_command+0x10e>
                memcpy(arg1, packet + prev_index, index-1);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	18d1      	adds	r1, r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	001a      	movs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f005 fd70 	bl	800764c <memcpy>
}
 8001b6c:	e00a      	b.n	8001b84 <split_command+0x124>
                memcpy(arg1, packet + prev_index, len - prev_index);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	18d1      	adds	r1, r2, r3
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f005 fd64 	bl	800764c <memcpy>
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b006      	add	sp, #24
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <getposition>:

int getposition(const char *array, size_t size, char c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	701a      	strb	r2, [r3, #0]
    char *ret = strchr(array, c);
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f005 fd98 	bl	80076d8 <strchr>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	617b      	str	r3, [r7, #20]
    if(ret != NULL)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <getposition+0x2e>
        return ret - array;
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	e001      	b.n	8001bbe <getposition+0x32>
    else
        return -1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	425b      	negs	r3, r3
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b006      	add	sp, #24
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <press_type_detection>:
int left_button_flag = 0;



int press_type_detection() // 1 - long press , 0-short press
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	long press_time=0, release_time=0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
	while(1)
	{
		left_button_pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	005a      	lsls	r2, r3, #1
 8001bda:	2390      	movs	r3, #144	; 0x90
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f002 fa11 	bl	8004008 <HAL_GPIO_ReadPin>
 8001be6:	0003      	movs	r3, r0
 8001be8:	001a      	movs	r2, r3
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <press_type_detection+0x94>)
 8001bec:	601a      	str	r2, [r3, #0]
		if(!left_button_pin)
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <press_type_detection+0x94>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ef      	bne.n	8001bd6 <press_type_detection+0xe>
		{
			press_time = HAL_GetTick();
 8001bf6:	f001 fb09 	bl	800320c <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	607b      	str	r3, [r7, #4]
			set_color(0, 0, 0, 1);
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff fdb5 	bl	8001774 <set_color>
			led_display(&led_indicator);
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <press_type_detection+0x98>)
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff fe55 	bl	80018bc <led_display>
			while(1)
			{
				left_button_pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	2390      	movs	r3, #144	; 0x90
 8001c18:	05db      	lsls	r3, r3, #23
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f002 f9f3 	bl	8004008 <HAL_GPIO_ReadPin>
 8001c22:	0003      	movs	r3, r0
 8001c24:	001a      	movs	r2, r3
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <press_type_detection+0x94>)
 8001c28:	601a      	str	r2, [r3, #0]
				if(left_button_pin)
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <press_type_detection+0x94>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d100      	bne.n	8001c34 <press_type_detection+0x6c>
				left_button_pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001c32:	e7ee      	b.n	8001c12 <press_type_detection+0x4a>
					break;
 8001c34:	46c0      	nop			; (mov r8, r8)
			}
			release_time=HAL_GetTick();
 8001c36:	f001 fae9 	bl	800320c <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	603b      	str	r3, [r7, #0]
			if( release_time - press_time > Long_press_duration)
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	23fa      	movs	r3, #250	; 0xfa
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dd01      	ble.n	8001c50 <press_type_detection+0x88>
				return 1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <press_type_detection+0x8a>
			else
				return 0;
 8001c50:	2300      	movs	r3, #0
		}
	}

}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	20000368 	.word	0x20000368
 8001c60:	200006d4 	.word	0x200006d4

08001c64 <motor_assy_logic>:


void motor_assy_logic()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	while(right_button_flag < 3)
 8001c68:	e04a      	b.n	8001d00 <motor_assy_logic+0x9c>
	{
		right_button_pin = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9);
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	009a      	lsls	r2, r3, #2
 8001c6e:	2390      	movs	r3, #144	; 0x90
 8001c70:	05db      	lsls	r3, r3, #23
 8001c72:	0011      	movs	r1, r2
 8001c74:	0018      	movs	r0, r3
 8001c76:	f002 f9c7 	bl	8004008 <HAL_GPIO_ReadPin>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <motor_assy_logic+0xac>)
 8001c80:	601a      	str	r2, [r3, #0]
		if(!right_button_pin && right_button_flag==0)
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <motor_assy_logic+0xac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d107      	bne.n	8001c9a <motor_assy_logic+0x36>
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <motor_assy_logic+0xb0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <motor_assy_logic+0x36>
			right_button_flag=1;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <motor_assy_logic+0xb0>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e00a      	b.n	8001cb0 <motor_assy_logic+0x4c>

		else if(!right_button_pin && right_button_flag==1)
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <motor_assy_logic+0xac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <motor_assy_logic+0x4c>
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <motor_assy_logic+0xb0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <motor_assy_logic+0x4c>
			right_button_flag = 2;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <motor_assy_logic+0xb0>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]

		if(right_button_flag == 1) //assy mode of the rotor
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <motor_assy_logic+0xb0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10f      	bne.n	8001cd8 <motor_assy_logic+0x74>
		{
			set_color(255, 100, 0, 0); // Yellow led - assy mode in progress
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2164      	movs	r1, #100	; 0x64
 8001cbe:	20ff      	movs	r0, #255	; 0xff
 8001cc0:	f7ff fd58 	bl	8001774 <set_color>
			set_color(0, 255, 0, 1);
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	21ff      	movs	r1, #255	; 0xff
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fd52 	bl	8001774 <set_color>
			led_display(&led_indicator);
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <motor_assy_logic+0xb4>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7ff fdf2 	bl	80018bc <led_display>
		}

		if(right_button_flag == 2)
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <motor_assy_logic+0xb0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d10c      	bne.n	8001cfa <motor_assy_logic+0x96>
		{
			set_color(0, 255, 0, 0); // Green led - assy mode is done
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	21ff      	movs	r1, #255	; 0xff
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fd44 	bl	8001774 <set_color>
			led_display(&led_indicator);
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <motor_assy_logic+0xb4>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fde4 	bl	80018bc <led_display>
			right_button_flag=3; // to stop the loop. flag goes to 0 after torque test is done
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <motor_assy_logic+0xb0>)
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	601a      	str	r2, [r3, #0]
		}

		HAL_Delay(250);
 8001cfa:	20fa      	movs	r0, #250	; 0xfa
 8001cfc:	f001 fa90 	bl	8003220 <HAL_Delay>
	while(right_button_flag < 3)
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <motor_assy_logic+0xb0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	ddb0      	ble.n	8001c6a <motor_assy_logic+0x6>
	}
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000364 	.word	0x20000364
 8001d14:	2000036c 	.word	0x2000036c
 8001d18:	200006d4 	.word	0x200006d4

08001d1c <motor_torque_check>:


void motor_torque_check()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
	int press_count = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
	int retry_count = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		left_button_flag=press_type_detection();
 8001d2a:	f7ff ff4d 	bl	8001bc8 <press_type_detection>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <motor_torque_check+0x150>)
 8001d32:	601a      	str	r2, [r3, #0]
		if(left_button_flag == 1)
 8001d34:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <motor_torque_check+0x150>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d125      	bne.n	8001d88 <motor_torque_check+0x6c>
		{
			set_color(0, 0, 255, 0);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	22ff      	movs	r2, #255	; 0xff
 8001d40:	2100      	movs	r1, #0
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fd16 	bl	8001774 <set_color>
			set_color(0, 0, 255, 1);
 8001d48:	2301      	movs	r3, #1
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff fd10 	bl	8001774 <set_color>
			led_display(&led_indicator);
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <motor_torque_check+0x154>)
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7ff fdb0 	bl	80018bc <led_display>
			HAL_Delay(2000);
 8001d5c:	23fa      	movs	r3, #250	; 0xfa
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	0018      	movs	r0, r3
 8001d62:	f001 fa5d 	bl	8003220 <HAL_Delay>
			set_color(0, 255, 0, 0);
 8001d66:	2300      	movs	r3, #0
 8001d68:	2200      	movs	r2, #0
 8001d6a:	21ff      	movs	r1, #255	; 0xff
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fd01 	bl	8001774 <set_color>
			set_color(0, 255, 0, 1);
 8001d72:	2301      	movs	r3, #1
 8001d74:	2200      	movs	r2, #0
 8001d76:	21ff      	movs	r1, #255	; 0xff
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fcfb 	bl	8001774 <set_color>
			led_display(&led_indicator);
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <motor_torque_check+0x154>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff fd9b 	bl	80018bc <led_display>
			break;
 8001d86:	e065      	b.n	8001e54 <motor_torque_check+0x138>
		}
		if(left_button_flag == 0)
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <motor_torque_check+0x150>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1cc      	bne.n	8001d2a <motor_torque_check+0xe>
		{
			for(int i = 0;i < MAX_Presses ;i++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	e028      	b.n	8001de8 <motor_torque_check+0xcc>
			{
				servo_move(&servo_motor_1,80);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <motor_torque_check+0x158>)
 8001d98:	2150      	movs	r1, #80	; 0x50
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fd68 	bl	8002870 <servo_move>
				HAL_Delay(500);
 8001da0:	23fa      	movs	r3, #250	; 0xfa
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	0018      	movs	r0, r3
 8001da6:	f001 fa3b 	bl	8003220 <HAL_Delay>
				microswitch_pin = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10);
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <motor_torque_check+0x15c>)
 8001db0:	0019      	movs	r1, r3
 8001db2:	0010      	movs	r0, r2
 8001db4:	f002 f928 	bl	8004008 <HAL_GPIO_ReadPin>
 8001db8:	0003      	movs	r3, r0
 8001dba:	001a      	movs	r2, r3
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <motor_torque_check+0x160>)
 8001dbe:	601a      	str	r2, [r3, #0]
				if(microswitch_pin == 0)
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <motor_torque_check+0x160>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <motor_torque_check+0xb2>
					press_count++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
				servo_move(&servo_motor_1,0);
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <motor_torque_check+0x158>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fd4c 	bl	8002870 <servo_move>
				HAL_Delay(500);
 8001dd8:	23fa      	movs	r3, #250	; 0xfa
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f001 fa1f 	bl	8003220 <HAL_Delay>
			for(int i = 0;i < MAX_Presses ;i++)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3301      	adds	r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	ddd3      	ble.n	8001d96 <motor_torque_check+0x7a>
			}
			retry_count++;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
			left_button_flag=2; // finish movement waiting for  press detection
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <motor_torque_check+0x150>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]

			if(press_count == MAX_Presses) //passed mode
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d111      	bne.n	8001e24 <motor_torque_check+0x108>
			{
				set_color(0, 255, 0, 1);
 8001e00:	2301      	movs	r3, #1
 8001e02:	2200      	movs	r2, #0
 8001e04:	21ff      	movs	r1, #255	; 0xff
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fcb4 	bl	8001774 <set_color>
				led_display(&led_indicator);
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <motor_torque_check+0x154>)
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff fd54 	bl	80018bc <led_display>
				servo_move(&servo_motor_1,300);
 8001e14:	2396      	movs	r3, #150	; 0x96
 8001e16:	005a      	lsls	r2, r3, #1
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <motor_torque_check+0x158>)
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fd27 	bl	8002870 <servo_move>
				break;
 8001e22:	e017      	b.n	8001e54 <motor_torque_check+0x138>
			}

			else if(retry_count < MAX_Retry) //retry mode
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	dc0a      	bgt.n	8001e40 <motor_torque_check+0x124>
			{
				set_color(255, 100, 0, 1);
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2164      	movs	r1, #100	; 0x64
 8001e30:	20ff      	movs	r0, #255	; 0xff
 8001e32:	f7ff fc9f 	bl	8001774 <set_color>
				led_display(&led_indicator);
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <motor_torque_check+0x154>)
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fd3f 	bl	80018bc <led_display>
 8001e3e:	e774      	b.n	8001d2a <motor_torque_check+0xe>
			}

			else
			{
				set_color(255, 0, 0, 1); //failure mode
 8001e40:	2301      	movs	r3, #1
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	20ff      	movs	r0, #255	; 0xff
 8001e48:	f7ff fc94 	bl	8001774 <set_color>
				led_display(&led_indicator);
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <motor_torque_check+0x154>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff fd34 	bl	80018bc <led_display>
				break;
			}
		}
	}
	press_count = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
	right_button_flag = 0;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <motor_torque_check+0x164>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
	left_button_flag = 0;
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <motor_torque_check+0x150>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b004      	add	sp, #16
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000370 	.word	0x20000370
 8001e70:	200006d4 	.word	0x200006d4
 8001e74:	200006b8 	.word	0x200006b8
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	20000360 	.word	0x20000360
 8001e80:	2000036c 	.word	0x2000036c

08001e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0c4      	sub	sp, #272	; 0x110
 8001e88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8a:	f001 f965 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e8e:	f000 f87d 	bl	8001f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e92:	f000 fc09 	bl	80026a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e96:	f000 fbd9 	bl	800264c <MX_DMA_Init>
  MX_ADC_Init();
 8001e9a:	f000 f8f3 	bl	8002084 <MX_ADC_Init>
  MX_TIM2_Init();
 8001e9e:	f000 f9b3 	bl	8002208 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001ea2:	f000 faf7 	bl	8002494 <MX_TIM16_Init>
  MX_TIM3_Init();
 8001ea6:	f000 fa11 	bl	80022cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001eaa:	f000 fb9f 	bl	80025ec <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001eae:	f000 fb75 	bl	800259c <MX_TIM17_Init>
  MX_TIM14_Init();
 8001eb2:	f000 faa1 	bl	80023f8 <MX_TIM14_Init>
  MX_I2C1_Init();
 8001eb6:	f000 f967 	bl	8002188 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001eba:	f000 f8d5 	bl	8002068 <MX_NVIC_Init>

//  setup_uart();

//-------------------------------------------------servo init

  servo_init(&servo_motor_1,&htim3,TIM_CHANNEL_2,servo_offset,GPIOB,GPIO_PIN_5);
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <main+0xe8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	492a      	ldr	r1, [pc, #168]	; (8001f70 <main+0xec>)
 8001ec8:	482a      	ldr	r0, [pc, #168]	; (8001f74 <main+0xf0>)
 8001eca:	2220      	movs	r2, #32
 8001ecc:	9201      	str	r2, [sp, #4]
 8001ece:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <main+0xf4>)
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	f000 fc81 	bl	80027da <servo_init>

//-------------------------------------------------led init

  leds_init(&led_indicator, &htim16, TIM_CHANNEL_1);
 8001ed8:	4928      	ldr	r1, [pc, #160]	; (8001f7c <main+0xf8>)
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <main+0xfc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff fc22 	bl	8001728 <leds_init>
  HAL_Delay(500);
 8001ee4:	23fa      	movs	r3, #250	; 0xfa
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f001 f999 	bl	8003220 <HAL_Delay>
//  set_led_color(&led_indicator,0, 255, 0, 0);
//  set_led_color(&led_indicator,0, 255, 0, 1);
  set_color(0,300,0,0);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fc3d 	bl	8001774 <set_color>
  set_color(0,300,0,1);
 8001efa:	2301      	movs	r3, #1
 8001efc:	2200      	movs	r2, #0
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fc37 	bl	8001774 <set_color>
  led_display(&led_indicator);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <main+0xfc>)
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff fcd7 	bl	80018bc <led_display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(IsDataAvailable())
 8001f0e:	f001 f87f 	bl	8003010 <IsDataAvailable>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d01f      	beq.n	8001f56 <main+0xd2>
	  {
		  char rxBuf[255] = {0};
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <main+0x100>)
 8001f18:	2284      	movs	r2, #132	; 0x84
 8001f1a:	0052      	lsls	r2, r2, #1
 8001f1c:	189b      	adds	r3, r3, r2
 8001f1e:	19db      	adds	r3, r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	22fb      	movs	r2, #251	; 0xfb
 8001f28:	2100      	movs	r1, #0
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f005 fb97 	bl	800765e <memset>
	 	  int len = read_serial_all(rxBuf);
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	0018      	movs	r0, r3
 8001f34:	f001 f884 	bl	8003040 <read_serial_all>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	1d7a      	adds	r2, r7, #5
 8001f3c:	32ff      	adds	r2, #255	; 0xff
 8001f3e:	6013      	str	r3, [r2, #0]
		  servo_ang=decode_packet(rxBuf, len);
 8001f40:	1d7b      	adds	r3, r7, #5
 8001f42:	33ff      	adds	r3, #255	; 0xff
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	0011      	movs	r1, r2
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff fcce 	bl	80018ec <decode_packet>
 8001f50:	0002      	movs	r2, r0
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <main+0x104>)
 8001f54:	601a      	str	r2, [r3, #0]
	  }

	  motor_assy_logic();
 8001f56:	f7ff fe85 	bl	8001c64 <motor_assy_logic>
	  servo_move(&servo_motor_1,0);
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <main+0xf0>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 fc86 	bl	8002870 <servo_move>
	  motor_torque_check();
 8001f64:	f7ff feda 	bl	8001d1c <motor_torque_check>
	  if(IsDataAvailable())
 8001f68:	e7d1      	b.n	8001f0e <main+0x8a>
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	200006cc 	.word	0x200006cc
 8001f70:	2000048c 	.word	0x2000048c
 8001f74:	200006b8 	.word	0x200006b8
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	2000051c 	.word	0x2000051c
 8001f80:	200006d4 	.word	0x200006d4
 8001f84:	fffffefc 	.word	0xfffffefc
 8001f88:	200006d0 	.word	0x200006d0

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b099      	sub	sp, #100	; 0x64
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	242c      	movs	r4, #44	; 0x2c
 8001f94:	193b      	adds	r3, r7, r4
 8001f96:	0018      	movs	r0, r3
 8001f98:	2334      	movs	r3, #52	; 0x34
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	f005 fb5e 	bl	800765e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa2:	231c      	movs	r3, #28
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	2310      	movs	r3, #16
 8001faa:	001a      	movs	r2, r3
 8001fac:	2100      	movs	r1, #0
 8001fae:	f005 fb56 	bl	800765e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb2:	003b      	movs	r3, r7
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	231c      	movs	r3, #28
 8001fb8:	001a      	movs	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f005 fb4f 	bl	800765e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001fc0:	0021      	movs	r1, r4
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2213      	movs	r2, #19
 8001fc6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2201      	movs	r2, #1
 8001fcc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fce:	187b      	adds	r3, r7, r1
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2210      	movs	r2, #16
 8001fde:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2202      	movs	r2, #2
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	0252      	lsls	r2, r2, #9
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	0352      	lsls	r2, r2, #13
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	2200      	movs	r2, #0
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	187b      	adds	r3, r7, r1
 8002004:	0018      	movs	r0, r3
 8002006:	f002 f98d 	bl	8004324 <HAL_RCC_OscConfig>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d001      	beq.n	8002012 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800200e:	f000 fbdf 	bl	80027d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002012:	211c      	movs	r1, #28
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2207      	movs	r2, #7
 8002018:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	187b      	adds	r3, r7, r1
 800201c:	2202      	movs	r2, #2
 800201e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2101      	movs	r1, #1
 8002030:	0018      	movs	r0, r3
 8002032:	f002 fcfd 	bl	8004a30 <HAL_RCC_ClockConfig>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800203a:	f000 fbc9 	bl	80027d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800203e:	003b      	movs	r3, r7
 8002040:	2222      	movs	r2, #34	; 0x22
 8002042:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002044:	003b      	movs	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800204a:	003b      	movs	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002050:	003b      	movs	r3, r7
 8002052:	0018      	movs	r0, r3
 8002054:	f002 fe66 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d001      	beq.n	8002060 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800205c:	f000 fbb8 	bl	80027d0 <Error_Handler>
  }
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b019      	add	sp, #100	; 0x64
 8002066:	bd90      	pop	{r4, r7, pc}

08002068 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	201c      	movs	r0, #28
 8002072:	f001 fc05 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002076:	201c      	movs	r0, #28
 8002078:	f001 fc17 	bl	80038aa <HAL_NVIC_EnableIRQ>
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	0018      	movs	r0, r3
 800208e:	230c      	movs	r3, #12
 8002090:	001a      	movs	r2, r3
 8002092:	2100      	movs	r1, #0
 8002094:	f005 fae3 	bl	800765e <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <MX_ADC_Init+0xfc>)
 800209a:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <MX_ADC_Init+0x100>)
 800209c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <MX_ADC_Init+0xfc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <MX_ADC_Init+0xfc>)
 80020a6:	2208      	movs	r2, #8
 80020a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <MX_ADC_Init+0xfc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <MX_ADC_Init+0xfc>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <MX_ADC_Init+0xfc>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80020bc:	4b30      	ldr	r3, [pc, #192]	; (8002180 <MX_ADC_Init+0xfc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <MX_ADC_Init+0xfc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <MX_ADC_Init+0xfc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <MX_ADC_Init+0xfc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <MX_ADC_Init+0xfc>)
 80020d6:	22c2      	movs	r2, #194	; 0xc2
 80020d8:	32ff      	adds	r2, #255	; 0xff
 80020da:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <MX_ADC_Init+0xfc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <MX_ADC_Init+0xfc>)
 80020e4:	2224      	movs	r2, #36	; 0x24
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <MX_ADC_Init+0xfc>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <MX_ADC_Init+0xfc>)
 80020f2:	0018      	movs	r0, r3
 80020f4:	f001 f8b8 	bl	8003268 <HAL_ADC_Init>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f000 fb68 	bl	80027d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2203      	movs	r2, #3
 8002104:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	0152      	lsls	r2, r2, #5
 800210c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	2206      	movs	r2, #6
 8002112:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002114:	1d3a      	adds	r2, r7, #4
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_ADC_Init+0xfc>)
 8002118:	0011      	movs	r1, r2
 800211a:	0018      	movs	r0, r3
 800211c:	f001 f9e4 	bl	80034e8 <HAL_ADC_ConfigChannel>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002124:	f000 fb54 	bl	80027d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2204      	movs	r2, #4
 800212c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800212e:	1d3a      	adds	r2, r7, #4
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <MX_ADC_Init+0xfc>)
 8002132:	0011      	movs	r1, r2
 8002134:	0018      	movs	r0, r3
 8002136:	f001 f9d7 	bl	80034e8 <HAL_ADC_ConfigChannel>
 800213a:	1e03      	subs	r3, r0, #0
 800213c:	d001      	beq.n	8002142 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800213e:	f000 fb47 	bl	80027d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2205      	movs	r2, #5
 8002146:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002148:	1d3a      	adds	r2, r7, #4
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <MX_ADC_Init+0xfc>)
 800214c:	0011      	movs	r1, r2
 800214e:	0018      	movs	r0, r3
 8002150:	f001 f9ca 	bl	80034e8 <HAL_ADC_ConfigChannel>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d001      	beq.n	800215c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002158:	f000 fb3a 	bl	80027d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2207      	movs	r2, #7
 8002160:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002162:	1d3a      	adds	r2, r7, #4
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_ADC_Init+0xfc>)
 8002166:	0011      	movs	r1, r2
 8002168:	0018      	movs	r0, r3
 800216a:	f001 f9bd 	bl	80034e8 <HAL_ADC_ConfigChannel>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d001      	beq.n	8002176 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8002172:	f000 fb2d 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b004      	add	sp, #16
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	20000374 	.word	0x20000374
 8002184:	40012400 	.word	0x40012400

08002188 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <MX_I2C1_Init+0x74>)
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <MX_I2C1_Init+0x78>)
 8002190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_I2C1_Init+0x74>)
 8002194:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <MX_I2C1_Init+0x7c>)
 8002196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <MX_I2C1_Init+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_I2C1_Init+0x74>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_I2C1_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_I2C1_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_I2C1_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_I2C1_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_I2C1_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_I2C1_Init+0x74>)
 80021c4:	0018      	movs	r0, r3
 80021c6:	f001 ff7f 	bl	80040c8 <HAL_I2C_Init>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d001      	beq.n	80021d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021ce:	f000 faff 	bl	80027d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_I2C1_Init+0x74>)
 80021d4:	2100      	movs	r1, #0
 80021d6:	0018      	movs	r0, r3
 80021d8:	f002 f80c 	bl	80041f4 <HAL_I2CEx_ConfigAnalogFilter>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021e0:	f000 faf6 	bl	80027d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <MX_I2C1_Init+0x74>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	0018      	movs	r0, r3
 80021ea:	f002 f84f 	bl	800428c <HAL_I2CEx_ConfigDigitalFilter>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021f2:	f000 faed 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200003f8 	.word	0x200003f8
 8002200:	40005400 	.word	0x40005400
 8002204:	2000090e 	.word	0x2000090e

08002208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08d      	sub	sp, #52	; 0x34
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800220e:	240c      	movs	r4, #12
 8002210:	193b      	adds	r3, r7, r4
 8002212:	0018      	movs	r0, r3
 8002214:	2324      	movs	r3, #36	; 0x24
 8002216:	001a      	movs	r2, r3
 8002218:	2100      	movs	r1, #0
 800221a:	f005 fa20 	bl	800765e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	0018      	movs	r0, r3
 8002222:	2308      	movs	r3, #8
 8002224:	001a      	movs	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	f005 fa19 	bl	800765e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <MX_TIM2_Init+0xc0>)
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	05d2      	lsls	r2, r2, #23
 8002232:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <MX_TIM2_Init+0xc0>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <MX_TIM2_Init+0xc0>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <MX_TIM2_Init+0xc0>)
 8002242:	2201      	movs	r2, #1
 8002244:	4252      	negs	r2, r2
 8002246:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <MX_TIM2_Init+0xc0>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <MX_TIM2_Init+0xc0>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002254:	0021      	movs	r1, r4
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2203      	movs	r2, #3
 800225a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2201      	movs	r2, #1
 8002266:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2201      	movs	r2, #1
 800227e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800228c:	187a      	adds	r2, r7, r1
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_TIM2_Init+0xc0>)
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f003 f95a 	bl	800554c <HAL_TIM_Encoder_Init>
 8002298:	1e03      	subs	r3, r0, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800229c:	f000 fa98 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ac:	1d3a      	adds	r2, r7, #4
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_TIM2_Init+0xc0>)
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f004 f8e8 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 80022b8:	1e03      	subs	r3, r0, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80022bc:	f000 fa88 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b00d      	add	sp, #52	; 0x34
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20000444 	.word	0x20000444

080022cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	2328      	movs	r3, #40	; 0x28
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	0018      	movs	r0, r3
 80022d8:	2310      	movs	r3, #16
 80022da:	001a      	movs	r2, r3
 80022dc:	2100      	movs	r1, #0
 80022de:	f005 f9be 	bl	800765e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e2:	2320      	movs	r3, #32
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	0018      	movs	r0, r3
 80022e8:	2308      	movs	r3, #8
 80022ea:	001a      	movs	r2, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	f005 f9b6 	bl	800765e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	0018      	movs	r0, r3
 80022f6:	231c      	movs	r3, #28
 80022f8:	001a      	movs	r2, r3
 80022fa:	2100      	movs	r1, #0
 80022fc:	f005 f9af 	bl	800765e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <MX_TIM3_Init+0x120>)
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <MX_TIM3_Init+0x124>)
 8002304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <MX_TIM3_Init+0x120>)
 8002308:	22e0      	movs	r2, #224	; 0xe0
 800230a:	32ff      	adds	r2, #255	; 0xff
 800230c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <MX_TIM3_Init+0x120>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <MX_TIM3_Init+0x120>)
 8002316:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <MX_TIM3_Init+0x128>)
 8002318:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <MX_TIM3_Init+0x120>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002320:	4b32      	ldr	r3, [pc, #200]	; (80023ec <MX_TIM3_Init+0x120>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <MX_TIM3_Init+0x120>)
 8002328:	0018      	movs	r0, r3
 800232a:	f002 fdf9 	bl	8004f20 <HAL_TIM_Base_Init>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002332:	f000 fa4d 	bl	80027d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002336:	2128      	movs	r1, #40	; 0x28
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	0152      	lsls	r2, r2, #5
 800233e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002340:	187a      	adds	r2, r7, r1
 8002342:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <MX_TIM3_Init+0x120>)
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f003 fb84 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002350:	f000 fa3e 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <MX_TIM3_Init+0x120>)
 8002356:	0018      	movs	r0, r3
 8002358:	f002 fe32 	bl	8004fc0 <HAL_TIM_PWM_Init>
 800235c:	1e03      	subs	r3, r0, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002360:	f000 fa36 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002364:	2120      	movs	r1, #32
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002372:	187a      	adds	r2, r7, r1
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <MX_TIM3_Init+0x120>)
 8002376:	0011      	movs	r1, r2
 8002378:	0018      	movs	r0, r3
 800237a:	f004 f885 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002382:	f000 fa25 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2260      	movs	r2, #96	; 0x60
 800238a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2232      	movs	r2, #50	; 0x32
 8002390:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800239e:	1d39      	adds	r1, r7, #4
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <MX_TIM3_Init+0x120>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	0018      	movs	r0, r3
 80023a6:	f003 fa8f 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80023ae:	f000 fa0f 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023b2:	1d39      	adds	r1, r7, #4
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <MX_TIM3_Init+0x120>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	0018      	movs	r0, r3
 80023ba:	f003 fa85 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80023c2:	f000 fa05 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023c6:	1d39      	adds	r1, r7, #4
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_TIM3_Init+0x120>)
 80023ca:	2208      	movs	r2, #8
 80023cc:	0018      	movs	r0, r3
 80023ce:	f003 fa7b 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80023d6:	f000 f9fb 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <MX_TIM3_Init+0x120>)
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 fc6d 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b00e      	add	sp, #56	; 0x38
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	2000048c 	.word	0x2000048c
 80023f0:	40000400 	.word	0x40000400
 80023f4:	000007cf 	.word	0x000007cf

080023f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	0018      	movs	r0, r3
 8002402:	231c      	movs	r3, #28
 8002404:	001a      	movs	r2, r3
 8002406:	2100      	movs	r1, #0
 8002408:	f005 f929 	bl	800765e <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <MX_TIM14_Init+0x94>)
 800240e:	4a20      	ldr	r2, [pc, #128]	; (8002490 <MX_TIM14_Init+0x98>)
 8002410:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2;
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <MX_TIM14_Init+0x94>)
 8002414:	2202      	movs	r2, #2
 8002416:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MX_TIM14_Init+0x94>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_TIM14_Init+0x94>)
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_TIM14_Init+0x94>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <MX_TIM14_Init+0x94>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_TIM14_Init+0x94>)
 8002432:	0018      	movs	r0, r3
 8002434:	f002 fd74 	bl	8004f20 <HAL_TIM_Base_Init>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800243c:	f000 f9c8 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_TIM14_Init+0x94>)
 8002442:	0018      	movs	r0, r3
 8002444:	f002 fdbc 	bl	8004fc0 <HAL_TIM_PWM_Init>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800244c:	f000 f9c0 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2260      	movs	r2, #96	; 0x60
 8002454:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002468:	1d39      	adds	r1, r7, #4
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_TIM14_Init+0x94>)
 800246c:	2200      	movs	r2, #0
 800246e:	0018      	movs	r0, r3
 8002470:	f003 fa2a 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d001      	beq.n	800247c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002478:	f000 f9aa 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <MX_TIM14_Init+0x94>)
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fc1c 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b008      	add	sp, #32
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200004d4 	.word	0x200004d4
 8002490:	40002000 	.word	0x40002000

08002494 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b090      	sub	sp, #64	; 0x40
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800249a:	2324      	movs	r3, #36	; 0x24
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	0018      	movs	r0, r3
 80024a0:	231c      	movs	r3, #28
 80024a2:	001a      	movs	r2, r3
 80024a4:	2100      	movs	r1, #0
 80024a6:	f005 f8da 	bl	800765e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	0018      	movs	r0, r3
 80024ae:	2320      	movs	r3, #32
 80024b0:	001a      	movs	r2, r3
 80024b2:	2100      	movs	r1, #0
 80024b4:	f005 f8d3 	bl	800765e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024b8:	4b36      	ldr	r3, [pc, #216]	; (8002594 <MX_TIM16_Init+0x100>)
 80024ba:	4a37      	ldr	r2, [pc, #220]	; (8002598 <MX_TIM16_Init+0x104>)
 80024bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <MX_TIM16_Init+0x100>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <MX_TIM16_Init+0x100>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 59;
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <MX_TIM16_Init+0x100>)
 80024cc:	223b      	movs	r2, #59	; 0x3b
 80024ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <MX_TIM16_Init+0x100>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80024d6:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <MX_TIM16_Init+0x100>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <MX_TIM16_Init+0x100>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80024e2:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <MX_TIM16_Init+0x100>)
 80024e4:	0018      	movs	r0, r3
 80024e6:	f002 fd1b 	bl	8004f20 <HAL_TIM_Base_Init>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80024ee:	f000 f96f 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <MX_TIM16_Init+0x100>)
 80024f4:	0018      	movs	r0, r3
 80024f6:	f002 fd63 	bl	8004fc0 <HAL_TIM_PWM_Init>
 80024fa:	1e03      	subs	r3, r0, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80024fe:	f000 f967 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002502:	2124      	movs	r1, #36	; 0x24
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2260      	movs	r2, #96	; 0x60
 8002508:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	220f      	movs	r2, #15
 800250e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252e:	1879      	adds	r1, r7, r1
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <MX_TIM16_Init+0x100>)
 8002532:	2200      	movs	r2, #0
 8002534:	0018      	movs	r0, r3
 8002536:	f003 f9c7 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800253e:	f000 f947 	bl	80027d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	0192      	lsls	r2, r2, #6
 8002566:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800256e:	1d3a      	adds	r2, r7, #4
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_TIM16_Init+0x100>)
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f003 ffe5 	bl	8006544 <HAL_TIMEx_ConfigBreakDeadTime>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800257e:	f000 f927 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <MX_TIM16_Init+0x100>)
 8002584:	0018      	movs	r0, r3
 8002586:	f000 fb99 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b010      	add	sp, #64	; 0x40
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	2000051c 	.word	0x2000051c
 8002598:	40014400 	.word	0x40014400

0800259c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <MX_TIM17_Init+0x48>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4799;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <MX_TIM17_Init+0x4c>)
 80025aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025b4:	2263      	movs	r2, #99	; 0x63
 80025b6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <MX_TIM17_Init+0x44>)
 80025cc:	0018      	movs	r0, r3
 80025ce:	f002 fca7 	bl	8004f20 <HAL_TIM_Base_Init>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80025d6:	f000 f8fb 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000564 	.word	0x20000564
 80025e4:	40014800 	.word	0x40014800
 80025e8:	000012bf 	.word	0x000012bf

080025ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_USART2_UART_Init+0x58>)
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <MX_USART2_UART_Init+0x5c>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_USART2_UART_Init+0x58>)
 80025f8:	22e1      	movs	r2, #225	; 0xe1
 80025fa:	0252      	lsls	r2, r2, #9
 80025fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART2_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART2_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART2_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002630:	0018      	movs	r0, r3
 8002632:	f003 fff5 	bl	8006620 <HAL_UART_Init>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800263a:	f000 f8c9 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200005f0 	.word	0x200005f0
 8002648:	40004400 	.word	0x40004400

0800264c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <MX_DMA_Init+0x58>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <MX_DMA_Init+0x58>)
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	615a      	str	r2, [r3, #20]
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_DMA_Init+0x58>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2009      	movs	r0, #9
 8002670:	f001 f906 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002674:	2009      	movs	r0, #9
 8002676:	f001 f918 	bl	80038aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	200a      	movs	r0, #10
 8002680:	f001 f8fe 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002684:	200a      	movs	r0, #10
 8002686:	f001 f910 	bl	80038aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	200b      	movs	r0, #11
 8002690:	f001 f8f6 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002694:	200b      	movs	r0, #11
 8002696:	f001 f908 	bl	80038aa <HAL_NVIC_EnableIRQ>

}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40021000 	.word	0x40021000

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	240c      	movs	r4, #12
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0018      	movs	r0, r3
 80026b4:	2314      	movs	r3, #20
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f004 ffd0 	bl	800765e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	03c9      	lsls	r1, r1, #15
 80026c8:	430a      	orrs	r2, r1
 80026ca:	615a      	str	r2, [r3, #20]
 80026cc:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	03db      	lsls	r3, r3, #15
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	0289      	lsls	r1, r1, #10
 80026e4:	430a      	orrs	r2, r1
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	4013      	ands	r3, r2
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	02c9      	lsls	r1, r1, #11
 8002700:	430a      	orrs	r2, r1
 8002702:	615a      	str	r2, [r3, #20]
 8002704:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <MX_GPIO_Init+0x11c>)
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	02db      	lsls	r3, r3, #11
 800270c:	4013      	ands	r3, r2
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, servo_en1_Pin|servo_en2_Pin|servo_en3_Pin|dcmotor_mode_Pin
 8002712:	492d      	ldr	r1, [pc, #180]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <MX_GPIO_Init+0x124>)
 8002716:	2200      	movs	r2, #0
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fc92 	bl	8004042 <HAL_GPIO_WritePin>
                          |user_led_Pin|dcmotor_sleep_n_Pin|dcmotor_in2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800271e:	193b      	adds	r3, r7, r4
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	00d2      	lsls	r2, r2, #3
 8002724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002726:	193b      	adds	r3, r7, r4
 8002728:	2288      	movs	r2, #136	; 0x88
 800272a:	0352      	lsls	r2, r2, #13
 800272c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	193b      	adds	r3, r7, r4
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	193b      	adds	r3, r7, r4
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <MX_GPIO_Init+0x124>)
 8002738:	0019      	movs	r1, r3
 800273a:	0010      	movs	r0, r2
 800273c:	f001 faec 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : servo_en1_Pin servo_en2_Pin servo_en3_Pin dcmotor_mode_Pin
                           user_led_Pin dcmotor_sleep_n_Pin dcmotor_in2_Pin */
  GPIO_InitStruct.Pin = servo_en1_Pin|servo_en2_Pin|servo_en3_Pin|dcmotor_mode_Pin
 8002740:	193b      	adds	r3, r7, r4
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002744:	601a      	str	r2, [r3, #0]
                          |user_led_Pin|dcmotor_sleep_n_Pin|dcmotor_in2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	193b      	adds	r3, r7, r4
 8002748:	2201      	movs	r2, #1
 800274a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	193b      	adds	r3, r7, r4
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	193b      	adds	r3, r7, r4
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <MX_GPIO_Init+0x124>)
 800275c:	0019      	movs	r1, r3
 800275e:	0010      	movs	r0, r2
 8002760:	f001 fada 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : dcmotor_flt_n_Pin */
  GPIO_InitStruct.Pin = dcmotor_flt_n_Pin;
 8002764:	0021      	movs	r1, r4
 8002766:	187b      	adds	r3, r7, r1
 8002768:	2280      	movs	r2, #128	; 0x80
 800276a:	0212      	lsls	r2, r2, #8
 800276c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276e:	000c      	movs	r4, r1
 8002770:	193b      	adds	r3, r7, r4
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dcmotor_flt_n_GPIO_Port, &GPIO_InitStruct);
 800277c:	193b      	adds	r3, r7, r4
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <MX_GPIO_Init+0x124>)
 8002780:	0019      	movs	r1, r3
 8002782:	0010      	movs	r0, r2
 8002784:	f001 fac8 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : microswitch0_Pin microswitch1_Pin */
  GPIO_InitStruct.Pin = microswitch0_Pin|microswitch1_Pin;
 8002788:	0021      	movs	r1, r4
 800278a:	187b      	adds	r3, r7, r1
 800278c:	22c0      	movs	r2, #192	; 0xc0
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	187a      	adds	r2, r7, r1
 80027a0:	2390      	movs	r3, #144	; 0x90
 80027a2:	05db      	lsls	r3, r3, #23
 80027a4:	0011      	movs	r1, r2
 80027a6:	0018      	movs	r0, r3
 80027a8:	f001 fab6 	bl	8003d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	2007      	movs	r0, #7
 80027b2:	f001 f865 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80027b6:	2007      	movs	r0, #7
 80027b8:	f001 f877 	bl	80038aa <HAL_NVIC_EnableIRQ>

}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b009      	add	sp, #36	; 0x24
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	000078c8 	.word	0x000078c8
 80027cc:	48000400 	.word	0x48000400

080027d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <Error_Handler+0x8>

080027da <servo_init>:
 *	we want a total of 50hz signal, so (clk_freq)/(prescaler* 2000) = 50hz, in our case, prescaler = 479
 *
 */
void servo_init(servo_controller *motor, TIM_HandleTypeDef * htim, uint32_t Channel, int16_t offset,
		 GPIO_TypeDef * PORT, uint16_t PIN)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	001a      	movs	r2, r3
 80027e8:	1cbb      	adds	r3, r7, #2
 80027ea:	801a      	strh	r2, [r3, #0]
	motor->htim = htim;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	601a      	str	r2, [r3, #0]
	motor->Channel = Channel;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]
	motor->offset = offset;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1cba      	adds	r2, r7, #2
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	811a      	strh	r2, [r3, #8]

	motor->PORT = PORT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	60da      	str	r2, [r3, #12]
	motor->PIN = PIN;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	221c      	movs	r2, #28
 800280a:	18ba      	adds	r2, r7, r2
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	821a      	strh	r2, [r3, #16]

	motor->FAULTS = 0x00;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	749a      	strb	r2, [r3, #18]

	HAL_TIM_PWM_Start(htim, Channel);
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0011      	movs	r1, r2
 800281c:	0018      	movs	r0, r3
 800281e:	f002 fc27 	bl	8005070 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <servo_init+0x5c>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002834:	e018      	b.n	8002868 <servo_init+0x8e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d105      	bne.n	800284a <servo_init+0x70>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2300      	movs	r3, #0
 8002846:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002848:	e00e      	b.n	8002868 <servo_init+0x8e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b08      	cmp	r3, #8
 8002850:	d105      	bne.n	800285e <servo_init+0x84>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800285c:	e004      	b.n	8002868 <servo_init+0x8e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}

08002870 <servo_move>:

void servo_move(servo_controller *motor, int loc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	// (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// (loc - 0) * (220 - 70) / (180 - 0) + 70;
	int mapped = (float)loc * (SERVO_OUT_MAX - SERVO_OUT_MIN) / 180.0 + SERVO_OUT_MIN; // TODO use config.h to easily change servo scale
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f7fd fdcc 	bl	8000418 <__aeabi_i2f>
 8002880:	1c03      	adds	r3, r0, #0
 8002882:	1c18      	adds	r0, r3, #0
 8002884:	f7fe feea 	bl	800165c <__aeabi_f2d>
 8002888:	2200      	movs	r2, #0
 800288a:	4b25      	ldr	r3, [pc, #148]	; (8002920 <servo_move+0xb0>)
 800288c:	f7fe fc44 	bl	8001118 <__aeabi_dmul>
 8002890:	0002      	movs	r2, r0
 8002892:	000b      	movs	r3, r1
 8002894:	0010      	movs	r0, r2
 8002896:	0019      	movs	r1, r3
 8002898:	2200      	movs	r2, #0
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <servo_move+0xb4>)
 800289c:	f7fe f946 	bl	8000b2c <__aeabi_ddiv>
 80028a0:	0002      	movs	r2, r0
 80028a2:	000b      	movs	r3, r1
 80028a4:	0010      	movs	r0, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <servo_move+0xb8>)
 80028ac:	f7fd fe02 	bl	80004b4 <__aeabi_dadd>
 80028b0:	0002      	movs	r2, r0
 80028b2:	000b      	movs	r3, r1
 80028b4:	0010      	movs	r0, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	f7fe fe9a 	bl	80015f0 <__aeabi_d2iz>
 80028bc:	0003      	movs	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]

	// TODO: enter limits while still allowing servo release

	HAL_GPIO_WritePin (motor->PORT, motor->PIN, GPIO_PIN_SET);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68d8      	ldr	r0, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8a1b      	ldrh	r3, [r3, #16]
 80028c8:	2201      	movs	r2, #1
 80028ca:	0019      	movs	r1, r3
 80028cc:	f001 fbb9 	bl	8004042 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, mapped);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <servo_move+0x74>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028e2:	e018      	b.n	8002916 <servo_move+0xa6>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, mapped);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d105      	bne.n	80028f8 <servo_move+0x88>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028f6:	e00e      	b.n	8002916 <servo_move+0xa6>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, mapped);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d105      	bne.n	800290c <servo_move+0x9c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800290a:	e004      	b.n	8002916 <servo_move+0xa6>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, mapped);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b004      	add	sp, #16
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	40622000 	.word	0x40622000
 8002924:	40668000 	.word	0x40668000
 8002928:	4052c000 	.word	0x4052c000

0800292c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_MspInit+0x44>)
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_MspInit+0x44>)
 8002938:	2101      	movs	r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	619a      	str	r2, [r3, #24]
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_MspInit+0x44>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_MspInit+0x44>)
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_MspInit+0x44>)
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0549      	lsls	r1, r1, #21
 8002954:	430a      	orrs	r2, r1
 8002956:	61da      	str	r2, [r3, #28]
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_MspInit+0x44>)
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	055b      	lsls	r3, r3, #21
 8002960:	4013      	ands	r3, r2
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b08b      	sub	sp, #44	; 0x2c
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	2414      	movs	r4, #20
 800297e:	193b      	adds	r3, r7, r4
 8002980:	0018      	movs	r0, r3
 8002982:	2314      	movs	r3, #20
 8002984:	001a      	movs	r2, r3
 8002986:	2100      	movs	r1, #0
 8002988:	f004 fe69 	bl	800765e <memset>
  if(hadc->Instance==ADC1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_ADC_MspInit+0xd4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d153      	bne.n	8002a3e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_ADC_MspInit+0xd8>)
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_ADC_MspInit+0xd8>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0089      	lsls	r1, r1, #2
 80029a0:	430a      	orrs	r2, r1
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <HAL_ADC_MspInit+0xd8>)
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_ADC_MspInit+0xd8>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_ADC_MspInit+0xd8>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0289      	lsls	r1, r1, #10
 80029bc:	430a      	orrs	r2, r1
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_ADC_MspInit+0xd8>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = IR_0_Pin|IR_1_Pin|IR_2_Pin|DC_I_PROP_Pin;
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	22b8      	movs	r2, #184	; 0xb8
 80029d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	2203      	movs	r2, #3
 80029d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	193a      	adds	r2, r7, r4
 80029e2:	2390      	movs	r3, #144	; 0x90
 80029e4:	05db      	lsls	r3, r3, #23
 80029e6:	0011      	movs	r1, r2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f001 f995 	bl	8003d18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 80029f0:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_ADC_MspInit+0xe0>)
 80029f2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	0052      	lsls	r2, r2, #1
 8002a0c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	00d2      	lsls	r2, r2, #3
 8002a14:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a18:	2220      	movs	r2, #32
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 ff61 	bl	80038ec <HAL_DMA_Init>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002a2e:	f7ff fecf 	bl	80027d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_ADC_MspInit+0xdc>)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b00b      	add	sp, #44	; 0x2c
 8002a44:	bd90      	pop	{r4, r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40012400 	.word	0x40012400
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	200003b4 	.word	0x200003b4
 8002a54:	40020008 	.word	0x40020008

08002a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b08b      	sub	sp, #44	; 0x2c
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	2414      	movs	r4, #20
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	0018      	movs	r0, r3
 8002a66:	2314      	movs	r3, #20
 8002a68:	001a      	movs	r2, r3
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	f004 fdf7 	bl	800765e <memset>
  if(hi2c->Instance==I2C1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_I2C_MspInit+0x90>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d132      	bne.n	8002ae0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_I2C_MspInit+0x94>)
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_I2C_MspInit+0x94>)
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	02c9      	lsls	r1, r1, #11
 8002a84:	430a      	orrs	r2, r1
 8002a86:	615a      	str	r2, [r3, #20]
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_I2C_MspInit+0x94>)
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	02db      	lsls	r3, r3, #11
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	22c0      	movs	r2, #192	; 0xc0
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9e:	0021      	movs	r1, r4
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2212      	movs	r2, #18
 8002aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_I2C_MspInit+0x98>)
 8002abc:	0019      	movs	r1, r3
 8002abe:	0010      	movs	r0, r2
 8002ac0:	f001 f92a 	bl	8003d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_I2C_MspInit+0x94>)
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_I2C_MspInit+0x94>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0389      	lsls	r1, r1, #14
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	61da      	str	r2, [r3, #28]
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_I2C_MspInit+0x94>)
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	039b      	lsls	r3, r3, #14
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b00b      	add	sp, #44	; 0x2c
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	40021000 	.word	0x40021000
 8002af0:	48000400 	.word	0x48000400

08002af4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b08b      	sub	sp, #44	; 0x2c
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	2414      	movs	r4, #20
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	0018      	movs	r0, r3
 8002b02:	2314      	movs	r3, #20
 8002b04:	001a      	movs	r2, r3
 8002b06:	2100      	movs	r1, #0
 8002b08:	f004 fda9 	bl	800765e <memset>
  if(htim_encoder->Instance==TIM2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	05db      	lsls	r3, r3, #23
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d130      	bne.n	8002b7a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	61da      	str	r2, [r3, #28]
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	0289      	lsls	r1, r1, #10
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	615a      	str	r2, [r3, #20]
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b4c:	0021      	movs	r1, r4
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2203      	movs	r2, #3
 8002b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2202      	movs	r2, #2
 8002b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2202      	movs	r2, #2
 8002b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	187a      	adds	r2, r7, r1
 8002b6e:	2390      	movs	r3, #144	; 0x90
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f001 f8cf 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b00b      	add	sp, #44	; 0x2c
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a42      	ldr	r2, [pc, #264]	; (8002ca0 <HAL_TIM_Base_MspInit+0x118>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10c      	bne.n	8002bb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	61da      	str	r2, [r3, #28]
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002bb2:	e071      	b.n	8002c98 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM14)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <HAL_TIM_Base_MspInit+0x120>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0049      	lsls	r1, r1, #1
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
 8002bcc:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
}
 8002bda:	e05d      	b.n	8002c98 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM16)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a32      	ldr	r2, [pc, #200]	; (8002cac <HAL_TIM_Base_MspInit+0x124>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d13d      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002be6:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0289      	lsls	r1, r1, #10
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	029b      	lsls	r3, r3, #10
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c04:	4a2b      	ldr	r2, [pc, #172]	; (8002cb4 <HAL_TIM_Base_MspInit+0x12c>)
 8002c06:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c14:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c1a:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0052      	lsls	r2, r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	00d2      	lsls	r2, r2, #3
 8002c28:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c32:	22c0      	movs	r2, #192	; 0xc0
 8002c34:	0192      	lsls	r2, r2, #6
 8002c36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 fe56 	bl	80038ec <HAL_DMA_Init>
 8002c40:	1e03      	subs	r3, r0, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_TIM_Base_MspInit+0xc0>
      Error_Handler();
 8002c44:	f7ff fdc4 	bl	80027d0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c58:	621a      	str	r2, [r3, #32]
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_TIM_Base_MspInit+0x128>)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c60:	e01a      	b.n	8002c98 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM17)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_TIM_Base_MspInit+0x130>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d115      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	02c9      	lsls	r1, r1, #11
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_TIM_Base_MspInit+0x11c>)
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	02db      	lsls	r3, r3, #11
 8002c82:	4013      	ands	r3, r2
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2016      	movs	r0, #22
 8002c8e:	f000 fdf7 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c92:	2016      	movs	r0, #22
 8002c94:	f000 fe09 	bl	80038aa <HAL_NVIC_EnableIRQ>
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40002000 	.word	0x40002000
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	200005ac 	.word	0x200005ac
 8002cb4:	40020030 	.word	0x40020030
 8002cb8:	40014800 	.word	0x40014800

08002cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b08b      	sub	sp, #44	; 0x2c
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	2414      	movs	r4, #20
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	0018      	movs	r0, r3
 8002cca:	2314      	movs	r3, #20
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f004 fcc5 	bl	800765e <memset>
  if(htim->Instance==TIM3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <HAL_TIM_MspPostInit+0x11c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d124      	bne.n	8002d28 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	02c9      	lsls	r1, r1, #11
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	02db      	lsls	r3, r3, #11
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = tim3ch3_servo3_Pin|tim3ch1_servo1_Pin|tim3ch2_servo2_Pin;
 8002cfa:	0021      	movs	r1, r4
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2231      	movs	r2, #49	; 0x31
 8002d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2202      	movs	r2, #2
 8002d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002d14:	187b      	adds	r3, r7, r1
 8002d16:	2201      	movs	r2, #1
 8002d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1a:	187b      	adds	r3, r7, r1
 8002d1c:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <HAL_TIM_MspPostInit+0x124>)
 8002d1e:	0019      	movs	r1, r3
 8002d20:	0010      	movs	r0, r2
 8002d22:	f000 fff9 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002d26:	e053      	b.n	8002dd0 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM14)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_TIM_MspPostInit+0x128>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d124      	bne.n	8002d7c <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	02c9      	lsls	r1, r1, #11
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	615a      	str	r2, [r3, #20]
 8002d40:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	02db      	lsls	r3, r3, #11
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d4e:	2114      	movs	r1, #20
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2202      	movs	r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2202      	movs	r2, #2
 8002d5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_TIM_MspPostInit+0x124>)
 8002d72:	0019      	movs	r1, r3
 8002d74:	0010      	movs	r0, r2
 8002d76:	f000 ffcf 	bl	8003d18 <HAL_GPIO_Init>
}
 8002d7a:	e029      	b.n	8002dd0 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_TIM_MspPostInit+0x12c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d124      	bne.n	8002dd0 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	0289      	lsls	r1, r1, #10
 8002d90:	430a      	orrs	r2, r1
 8002d92:	615a      	str	r2, [r3, #20]
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_TIM_MspPostInit+0x120>)
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = tim16ch1_rgb_leds_Pin;
 8002da2:	2114      	movs	r1, #20
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2202      	movs	r2, #2
 8002dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2203      	movs	r2, #3
 8002dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(tim16ch1_rgb_leds_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	187a      	adds	r2, r7, r1
 8002dc4:	2390      	movs	r3, #144	; 0x90
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 ffa4 	bl	8003d18 <HAL_GPIO_Init>
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b00b      	add	sp, #44	; 0x2c
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	48000400 	.word	0x48000400
 8002de4:	40002000 	.word	0x40002000
 8002de8:	40014400 	.word	0x40014400

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b08b      	sub	sp, #44	; 0x2c
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	2414      	movs	r4, #20
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	0018      	movs	r0, r3
 8002dfa:	2314      	movs	r3, #20
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f004 fc2d 	bl	800765e <memset>
  if(huart->Instance==USART2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <HAL_UART_MspInit+0xdc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d158      	bne.n	8002ec0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_UART_MspInit+0xe0>)
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <HAL_UART_MspInit+0xe0>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0289      	lsls	r1, r1, #10
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_UART_MspInit+0xe0>)
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	029b      	lsls	r3, r3, #10
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_UART_MspInit+0xe0>)
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_UART_MspInit+0xe0>)
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	0289      	lsls	r1, r1, #10
 8002e34:	430a      	orrs	r2, r1
 8002e36:	615a      	str	r2, [r3, #20]
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_UART_MspInit+0xe0>)
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	029b      	lsls	r3, r3, #10
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002e46:	0021      	movs	r1, r4
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_UART_MspInit+0xe4>)
 8002e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2202      	movs	r2, #2
 8002e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	2201      	movs	r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	187a      	adds	r2, r7, r1
 8002e68:	2390      	movs	r3, #144	; 0x90
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	0011      	movs	r1, r2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 ff52 	bl	8003d18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <HAL_UART_MspInit+0xec>)
 8002e78:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fd20 	bl	80038ec <HAL_DMA_Init>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8002eb0:	f7ff fc8e 	bl	80027d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002eb8:	671a      	str	r2, [r3, #112]	; 0x70
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_UART_MspInit+0xe8>)
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b00b      	add	sp, #44	; 0x2c
 8002ec6:	bd90      	pop	{r4, r7, pc}
 8002ec8:	40004400 	.word	0x40004400
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	00008004 	.word	0x00008004
 8002ed4:	20000674 	.word	0x20000674
 8002ed8:	40020058 	.word	0x40020058

08002edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <NMI_Handler+0x4>

08002ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <HardFault_Handler+0x4>

08002ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f00:	f000 f972 	bl	80031e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 f8b2 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <DMA1_Channel1_IRQHandler+0x14>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fe0b 	bl	8003b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	200003b4 	.word	0x200003b4

08002f38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <DMA1_Channel2_3_IRQHandler+0x14>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fdff 	bl	8003b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	200005ac 	.word	0x200005ac

08002f50 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 fdf3 	bl	8003b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	20000674 	.word	0x20000674

08002f68 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <TIM17_IRQHandler+0x14>)
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f002 fb94 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	20000564 	.word	0x20000564

08002f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <USART2_IRQHandler+0x14>)
 8002f86:	0018      	movs	r0, r3
 8002f88:	f003 fc48 	bl	800681c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	200005f0 	.word	0x200005f0

08002f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <_sbrk+0x5c>)
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <_sbrk+0x60>)
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <_sbrk+0x64>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <_sbrk+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	18d3      	adds	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc8:	f004 fb16 	bl	80075f8 <__errno>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	220c      	movs	r2, #12
 8002fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	e009      	b.n	8002fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	18d2      	adds	r2, r2, r3
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <_sbrk+0x64>)
 8002fe8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b006      	add	sp, #24
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20004000 	.word	0x20004000
 8002ff8:	00000400 	.word	0x00000400
 8002ffc:	2000070c 	.word	0x2000070c
 8003000:	20000b30 	.word	0x20000b30

08003004 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <IsDataAvailable>:

	memset(circular_rx_buffer,0 , sizeof(circular_rx_buffer));
}

int IsDataAvailable()
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  return (CIRCULAR_BUFFER_SIZE + head - tail) % CIRCULAR_BUFFER_SIZE;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <IsDataAvailable+0x24>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <IsDataAvailable+0x28>)
 800301a:	189a      	adds	r2, r3, r2
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <IsDataAvailable+0x2c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	4905      	ldr	r1, [pc, #20]	; (8003038 <IsDataAvailable+0x28>)
 8003024:	0018      	movs	r0, r3
 8003026:	f7fd f9f1 	bl	800040c <__aeabi_idivmod>
 800302a:	000b      	movs	r3, r1
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	20000b10 	.word	0x20000b10
 8003038:	000003ff 	.word	0x000003ff
 800303c:	20000b14 	.word	0x20000b14

08003040 <read_serial_all>:

//maybe do a read_until function
int read_serial_all(char * rxBuffer)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	//get data from circular buffer
	int length = (CIRCULAR_BUFFER_SIZE + head - tail) % CIRCULAR_BUFFER_SIZE;
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <read_serial_all+0xb4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2a      	ldr	r2, [pc, #168]	; (80030f8 <read_serial_all+0xb8>)
 800304e:	189a      	adds	r2, r3, r2
 8003050:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <read_serial_all+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	4928      	ldr	r1, [pc, #160]	; (80030f8 <read_serial_all+0xb8>)
 8003058:	0018      	movs	r0, r3
 800305a:	f7fd f9d7 	bl	800040c <__aeabi_idivmod>
 800305e:	000b      	movs	r3, r1
 8003060:	60fb      	str	r3, [r7, #12]
	if(length < 0)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	da02      	bge.n	800306e <read_serial_all+0x2e>
		return -1;
 8003068:	2301      	movs	r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	e03d      	b.n	80030ea <read_serial_all+0xaa>

	memset(rxBuffer, 0, sizeof(rxBuffer));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2204      	movs	r2, #4
 8003072:	2100      	movs	r1, #0
 8003074:	0018      	movs	r0, r3
 8003076:	f004 faf2 	bl	800765e <memset>

	if(head > tail)	//if didn't roll over yet
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <read_serial_all+0xb4>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <read_serial_all+0xbc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	dd0f      	ble.n	80030a6 <read_serial_all+0x66>
	{
		memcpy(rxBuffer, circular_rx_buffer + tail, head - tail);
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <read_serial_all+0xbc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	001a      	movs	r2, r3
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <read_serial_all+0xc0>)
 800308e:	18d1      	adds	r1, r2, r3
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <read_serial_all+0xb4>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <read_serial_all+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	001a      	movs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f004 fad4 	bl	800764c <memcpy>
 80030a4:	e01c      	b.n	80030e0 <read_serial_all+0xa0>
	}
	else			//if roll over occurred
	{
		int data_len_to_cpy = CIRCULAR_BUFFER_SIZE - tail;
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <read_serial_all+0xbc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <read_serial_all+0xb8>)
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	60bb      	str	r3, [r7, #8]
		memcpy(rxBuffer, circular_rx_buffer + tail, data_len_to_cpy);
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <read_serial_all+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	001a      	movs	r2, r3
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <read_serial_all+0xc0>)
 80030b8:	18d1      	adds	r1, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f004 fac4 	bl	800764c <memcpy>
		memcpy(rxBuffer + data_len_to_cpy, circular_rx_buffer, IsDataAvailable() - data_len_to_cpy);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	18d4      	adds	r4, r2, r3
 80030ca:	f7ff ffa1 	bl	8003010 <IsDataAvailable>
 80030ce:	0002      	movs	r2, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	001a      	movs	r2, r3
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <read_serial_all+0xc0>)
 80030d8:	0019      	movs	r1, r3
 80030da:	0020      	movs	r0, r4
 80030dc:	f004 fab6 	bl	800764c <memcpy>

	}

	tail = head;
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <read_serial_all+0xb4>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <read_serial_all+0xbc>)
 80030e6:	601a      	str	r2, [r3, #0]

	return length;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b005      	add	sp, #20
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	20000b10 	.word	0x20000b10
 80030f8:	000003ff 	.word	0x000003ff
 80030fc:	20000b14 	.word	0x20000b14
 8003100:	20000710 	.word	0x20000710

08003104 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003106:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <LoopForever+0x6>)
  ldr r1, =_edata
 800310a:	490e      	ldr	r1, [pc, #56]	; (8003144 <LoopForever+0xa>)
  ldr r2, =_sidata
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <LoopForever+0xe>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003110:	e002      	b.n	8003118 <LoopCopyDataInit>

08003112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003116:	3304      	adds	r3, #4

08003118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800311c:	d3f9      	bcc.n	8003112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311e:	4a0b      	ldr	r2, [pc, #44]	; (800314c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003120:	4c0b      	ldr	r4, [pc, #44]	; (8003150 <LoopForever+0x16>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003124:	e001      	b.n	800312a <LoopFillZerobss>

08003126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003128:	3204      	adds	r2, #4

0800312a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800312c:	d3fb      	bcc.n	8003126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800312e:	f7ff ff69 	bl	8003004 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003132:	f004 fa67 	bl	8007604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003136:	f7fe fea5 	bl	8001e84 <main>

0800313a <LoopForever>:

LoopForever:
    b LoopForever
 800313a:	e7fe      	b.n	800313a <LoopForever>
  ldr   r0, =_estack
 800313c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003144:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003148:	080082f4 	.word	0x080082f4
  ldr r2, =_sbss
 800314c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003150:	20000b2c 	.word	0x20000b2c

08003154 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC1_COMP_IRQHandler>
	...

08003158 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_Init+0x24>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_Init+0x24>)
 8003162:	2110      	movs	r1, #16
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003168:	2000      	movs	r0, #0
 800316a:	f000 f809 	bl	8003180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800316e:	f7ff fbdd 	bl	800292c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40022000 	.word	0x40022000

08003180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_InitTick+0x5c>)
 800318a:	681c      	ldr	r4, [r3, #0]
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_InitTick+0x60>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	0019      	movs	r1, r3
 8003192:	23fa      	movs	r3, #250	; 0xfa
 8003194:	0098      	lsls	r0, r3, #2
 8003196:	f7fc ffc9 	bl	800012c <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	0019      	movs	r1, r3
 800319e:	0020      	movs	r0, r4
 80031a0:	f7fc ffc4 	bl	800012c <__udivsi3>
 80031a4:	0003      	movs	r3, r0
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 fb93 	bl	80038d2 <HAL_SYSTICK_Config>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e00f      	b.n	80031d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d80b      	bhi.n	80031d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	2301      	movs	r3, #1
 80031be:	425b      	negs	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 fb5c 	bl	8003880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_InitTick+0x64>)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b003      	add	sp, #12
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	20000004 	.word	0x20000004
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	20000008 	.word	0x20000008

080031e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_IncTick+0x1c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	001a      	movs	r2, r3
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_IncTick+0x20>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	18d2      	adds	r2, r2, r3
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_IncTick+0x20>)
 80031fa:	601a      	str	r2, [r3, #0]
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	2000000c 	.word	0x2000000c
 8003208:	20000b18 	.word	0x20000b18

0800320c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b02      	ldr	r3, [pc, #8]	; (800321c <HAL_GetTick+0x10>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	20000b18 	.word	0x20000b18

08003220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003228:	f7ff fff0 	bl	800320c <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3301      	adds	r3, #1
 8003238:	d005      	beq.n	8003246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_Delay+0x44>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	001a      	movs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	189b      	adds	r3, r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	f7ff ffe0 	bl	800320c <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	429a      	cmp	r2, r3
 8003256:	d8f7      	bhi.n	8003248 <HAL_Delay+0x28>
  {
  }
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	2000000c 	.word	0x2000000c

08003268 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e125      	b.n	80034d2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2234      	movs	r2, #52	; 0x34
 8003298:	2100      	movs	r1, #0
 800329a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f7ff fb68 	bl	8002974 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	2210      	movs	r2, #16
 80032aa:	4013      	ands	r3, r2
 80032ac:	d000      	beq.n	80032b0 <HAL_ADC_Init+0x48>
 80032ae:	e103      	b.n	80034b8 <HAL_ADC_Init+0x250>
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d000      	beq.n	80032bc <HAL_ADC_Init+0x54>
 80032ba:	e0fd      	b.n	80034b8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2204      	movs	r2, #4
 80032c4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80032c6:	d000      	beq.n	80032ca <HAL_ADC_Init+0x62>
 80032c8:	e0f6      	b.n	80034b8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	4a83      	ldr	r2, [pc, #524]	; (80034dc <HAL_ADC_Init+0x274>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	2202      	movs	r2, #2
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2203      	movs	r2, #3
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d112      	bne.n	800330e <HAL_ADC_Init+0xa6>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d009      	beq.n	800330a <HAL_ADC_Init+0xa2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	401a      	ands	r2, r3
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	429a      	cmp	r2, r3
 8003308:	d101      	bne.n	800330e <HAL_ADC_Init+0xa6>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_ADC_Init+0xa8>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d116      	bne.n	8003342 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2218      	movs	r2, #24
 800331c:	4393      	bics	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	0899      	lsrs	r1, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4964      	ldr	r1, [pc, #400]	; (80034e0 <HAL_ADC_Init+0x278>)
 800334e:	400a      	ands	r2, r1
 8003350:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7e1b      	ldrb	r3, [r3, #24]
 8003356:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7e5b      	ldrb	r3, [r3, #25]
 800335c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800335e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e9b      	ldrb	r3, [r3, #26]
 8003364:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003366:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b01      	cmp	r3, #1
 800336e:	d002      	beq.n	8003376 <HAL_ADC_Init+0x10e>
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	015b      	lsls	r3, r3, #5
 8003374:	e000      	b.n	8003378 <HAL_ADC_Init+0x110>
 8003376:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003378:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800337e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d101      	bne.n	800338c <HAL_ADC_Init+0x124>
 8003388:	2304      	movs	r3, #4
 800338a:	e000      	b.n	800338e <HAL_ADC_Init+0x126>
 800338c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800338e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2124      	movs	r1, #36	; 0x24
 8003394:	5c5b      	ldrb	r3, [r3, r1]
 8003396:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003398:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7edb      	ldrb	r3, [r3, #27]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d115      	bne.n	80033d4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e9b      	ldrb	r3, [r3, #26]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	0252      	lsls	r2, r2, #9
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	e00b      	b.n	80033d4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2220      	movs	r2, #32
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	2201      	movs	r2, #1
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	23c2      	movs	r3, #194	; 0xc2
 80033da:	33ff      	adds	r3, #255	; 0xff
 80033dc:	429a      	cmp	r2, r3
 80033de:	d007      	beq.n	80033f0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033e8:	4313      	orrs	r3, r2
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68d9      	ldr	r1, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	055b      	lsls	r3, r3, #21
 8003408:	429a      	cmp	r2, r3
 800340a:	d01b      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d017      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	2b02      	cmp	r3, #2
 800341a:	d013      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	2b03      	cmp	r3, #3
 8003422:	d00f      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	2b04      	cmp	r3, #4
 800342a:	d00b      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	2b05      	cmp	r3, #5
 8003432:	d007      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	2b06      	cmp	r3, #6
 800343a:	d003      	beq.n	8003444 <HAL_ADC_Init+0x1dc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	2b07      	cmp	r3, #7
 8003442:	d112      	bne.n	800346a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2107      	movs	r1, #7
 8003450:	438a      	bics	r2, r1
 8003452:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6959      	ldr	r1, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	2207      	movs	r2, #7
 8003460:	401a      	ands	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <HAL_ADC_Init+0x27c>)
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d10b      	bne.n	8003492 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	2203      	movs	r2, #3
 8003486:	4393      	bics	r3, r2
 8003488:	2201      	movs	r2, #1
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003490:	e01c      	b.n	80034cc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	2212      	movs	r2, #18
 8003498:	4393      	bics	r3, r2
 800349a:	2210      	movs	r2, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2201      	movs	r2, #1
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80034ae:	230f      	movs	r3, #15
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034b6:	e009      	b.n	80034cc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	2210      	movs	r2, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80034c4:	230f      	movs	r3, #15
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034cc:	230f      	movs	r3, #15
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	fffffefd 	.word	0xfffffefd
 80034e0:	fffe0219 	.word	0xfffe0219
 80034e4:	833fffe7 	.word	0x833fffe7

080034e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f2:	230f      	movs	r3, #15
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	055b      	lsls	r3, r3, #21
 8003506:	429a      	cmp	r2, r3
 8003508:	d011      	beq.n	800352e <HAL_ADC_ConfigChannel+0x46>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d00d      	beq.n	800352e <HAL_ADC_ConfigChannel+0x46>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	2b02      	cmp	r3, #2
 8003518:	d009      	beq.n	800352e <HAL_ADC_ConfigChannel+0x46>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	2b03      	cmp	r3, #3
 8003520:	d005      	beq.n	800352e <HAL_ADC_ConfigChannel+0x46>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	2b04      	cmp	r3, #4
 8003528:	d001      	beq.n	800352e <HAL_ADC_ConfigChannel+0x46>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2234      	movs	r2, #52	; 0x34
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x54>
 8003538:	2302      	movs	r3, #2
 800353a:	e0d0      	b.n	80036de <HAL_ADC_ConfigChannel+0x1f6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2234      	movs	r2, #52	; 0x34
 8003540:	2101      	movs	r1, #1
 8003542:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2204      	movs	r2, #4
 800354c:	4013      	ands	r3, r2
 800354e:	d000      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x6a>
 8003550:	e0b4      	b.n	80036bc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a64      	ldr	r2, [pc, #400]	; (80036e8 <HAL_ADC_ConfigChannel+0x200>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d100      	bne.n	800355e <HAL_ADC_ConfigChannel+0x76>
 800355c:	e082      	b.n	8003664 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2201      	movs	r2, #1
 800356a:	409a      	lsls	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	055b      	lsls	r3, r3, #21
 800357c:	429a      	cmp	r2, r3
 800357e:	d037      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d033      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b02      	cmp	r3, #2
 800358e:	d02f      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2b03      	cmp	r3, #3
 8003596:	d02b      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	2b04      	cmp	r3, #4
 800359e:	d027      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d023      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d01f      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d01b      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	2107      	movs	r1, #7
 80035c4:	400b      	ands	r3, r1
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d012      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2107      	movs	r1, #7
 80035d6:	438a      	bics	r2, r1
 80035d8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6959      	ldr	r1, [r3, #20]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2207      	movs	r2, #7
 80035e6:	401a      	ands	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d007      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x120>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b11      	cmp	r3, #17
 80035fe:	d003      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x120>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b12      	cmp	r3, #18
 8003606:	d163      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003608:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_ADC_ConfigChannel+0x204>)
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b10      	cmp	r3, #16
 8003612:	d009      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x140>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b11      	cmp	r3, #17
 800361a:	d102      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x13a>
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	03db      	lsls	r3, r3, #15
 8003620:	e004      	b.n	800362c <HAL_ADC_ConfigChannel+0x144>
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	045b      	lsls	r3, r3, #17
 8003626:	e001      	b.n	800362c <HAL_ADC_ConfigChannel+0x144>
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <HAL_ADC_ConfigChannel+0x204>)
 800362e:	430b      	orrs	r3, r1
 8003630:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b10      	cmp	r3, #16
 8003638:	d14a      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <HAL_ADC_ConfigChannel+0x208>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	492d      	ldr	r1, [pc, #180]	; (80036f4 <HAL_ADC_ConfigChannel+0x20c>)
 8003640:	0018      	movs	r0, r3
 8003642:	f7fc fd73 	bl	800012c <__udivsi3>
 8003646:	0003      	movs	r3, r0
 8003648:	001a      	movs	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	189b      	adds	r3, r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003654:	e002      	b.n	800365c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3b01      	subs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x16e>
 8003662:	e035      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2101      	movs	r1, #1
 8003670:	4099      	lsls	r1, r3
 8003672:	000b      	movs	r3, r1
 8003674:	43d9      	mvns	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	400a      	ands	r2, r1
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b10      	cmp	r3, #16
 8003684:	d007      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x1ae>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b11      	cmp	r3, #17
 800368c:	d003      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x1ae>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b12      	cmp	r3, #18
 8003694:	d11c      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_ADC_ConfigChannel+0x204>)
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d007      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x1ca>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b11      	cmp	r3, #17
 80036a8:	d101      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x1c6>
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_ADC_ConfigChannel+0x210>)
 80036ac:	e002      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x1cc>
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_ADC_ConfigChannel+0x214>)
 80036b0:	e000      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x1cc>
 80036b2:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_ADC_ConfigChannel+0x218>)
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <HAL_ADC_ConfigChannel+0x204>)
 80036b6:	400b      	ands	r3, r1
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e009      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	2220      	movs	r2, #32
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80036c8:	230f      	movs	r3, #15
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2234      	movs	r2, #52	; 0x34
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	00001001 	.word	0x00001001
 80036ec:	40012708 	.word	0x40012708
 80036f0:	20000004 	.word	0x20000004
 80036f4:	000f4240 	.word	0x000f4240
 80036f8:	ffbfffff 	.word	0xffbfffff
 80036fc:	feffffff 	.word	0xfeffffff
 8003700:	ff7fffff 	.word	0xff7fffff

08003704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	0002      	movs	r2, r0
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b7f      	cmp	r3, #127	; 0x7f
 8003716:	d809      	bhi.n	800372c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003718:	1dfb      	adds	r3, r7, #7
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	001a      	movs	r2, r3
 800371e:	231f      	movs	r3, #31
 8003720:	401a      	ands	r2, r3
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__NVIC_EnableIRQ+0x30>)
 8003724:	2101      	movs	r1, #1
 8003726:	4091      	lsls	r1, r2
 8003728:	000a      	movs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
  }
}
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}
 8003734:	e000e100 	.word	0xe000e100

08003738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	0002      	movs	r2, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b7f      	cmp	r3, #127	; 0x7f
 800374c:	d828      	bhi.n	80037a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800374e:	4a2f      	ldr	r2, [pc, #188]	; (800380c <__NVIC_SetPriority+0xd4>)
 8003750:	1dfb      	adds	r3, r7, #7
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b25b      	sxtb	r3, r3
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	33c0      	adds	r3, #192	; 0xc0
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	589b      	ldr	r3, [r3, r2]
 800375e:	1dfa      	adds	r2, r7, #7
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	0011      	movs	r1, r2
 8003764:	2203      	movs	r2, #3
 8003766:	400a      	ands	r2, r1
 8003768:	00d2      	lsls	r2, r2, #3
 800376a:	21ff      	movs	r1, #255	; 0xff
 800376c:	4091      	lsls	r1, r2
 800376e:	000a      	movs	r2, r1
 8003770:	43d2      	mvns	r2, r2
 8003772:	401a      	ands	r2, r3
 8003774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	401a      	ands	r2, r3
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	0018      	movs	r0, r3
 8003784:	2303      	movs	r3, #3
 8003786:	4003      	ands	r3, r0
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800378c:	481f      	ldr	r0, [pc, #124]	; (800380c <__NVIC_SetPriority+0xd4>)
 800378e:	1dfb      	adds	r3, r7, #7
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	430a      	orrs	r2, r1
 8003798:	33c0      	adds	r3, #192	; 0xc0
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800379e:	e031      	b.n	8003804 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <__NVIC_SetPriority+0xd8>)
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	0019      	movs	r1, r3
 80037a8:	230f      	movs	r3, #15
 80037aa:	400b      	ands	r3, r1
 80037ac:	3b08      	subs	r3, #8
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3306      	adds	r3, #6
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	18d3      	adds	r3, r2, r3
 80037b6:	3304      	adds	r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1dfa      	adds	r2, r7, #7
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	0011      	movs	r1, r2
 80037c0:	2203      	movs	r2, #3
 80037c2:	400a      	ands	r2, r1
 80037c4:	00d2      	lsls	r2, r2, #3
 80037c6:	21ff      	movs	r1, #255	; 0xff
 80037c8:	4091      	lsls	r1, r2
 80037ca:	000a      	movs	r2, r1
 80037cc:	43d2      	mvns	r2, r2
 80037ce:	401a      	ands	r2, r3
 80037d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	401a      	ands	r2, r3
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0018      	movs	r0, r3
 80037e0:	2303      	movs	r3, #3
 80037e2:	4003      	ands	r3, r0
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e8:	4809      	ldr	r0, [pc, #36]	; (8003810 <__NVIC_SetPriority+0xd8>)
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	001c      	movs	r4, r3
 80037f0:	230f      	movs	r3, #15
 80037f2:	4023      	ands	r3, r4
 80037f4:	3b08      	subs	r3, #8
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	430a      	orrs	r2, r1
 80037fa:	3306      	adds	r3, #6
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	18c3      	adds	r3, r0, r3
 8003800:	3304      	adds	r3, #4
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b003      	add	sp, #12
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003818:	f3bf 8f4f 	dsb	sy
}
 800381c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <__NVIC_SystemReset+0x1c>)
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <__NVIC_SystemReset+0x20>)
 8003822:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003824:	f3bf 8f4f 	dsb	sy
}
 8003828:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	e7fd      	b.n	800382a <__NVIC_SystemReset+0x16>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	e000ed00 	.word	0xe000ed00
 8003834:	05fa0004 	.word	0x05fa0004

08003838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	045b      	lsls	r3, r3, #17
 8003848:	429a      	cmp	r2, r3
 800384a:	d301      	bcc.n	8003850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384c:	2301      	movs	r3, #1
 800384e:	e010      	b.n	8003872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <SysTick_Config+0x44>)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	3a01      	subs	r2, #1
 8003856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003858:	2301      	movs	r3, #1
 800385a:	425b      	negs	r3, r3
 800385c:	2103      	movs	r1, #3
 800385e:	0018      	movs	r0, r3
 8003860:	f7ff ff6a 	bl	8003738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <SysTick_Config+0x44>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <SysTick_Config+0x44>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	210f      	movs	r1, #15
 800388c:	187b      	adds	r3, r7, r1
 800388e:	1c02      	adds	r2, r0, #0
 8003890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	187b      	adds	r3, r7, r1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b25b      	sxtb	r3, r3
 800389a:	0011      	movs	r1, r2
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ff4b 	bl	8003738 <__NVIC_SetPriority>
}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	0002      	movs	r2, r0
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff ff21 	bl	8003704 <__NVIC_EnableIRQ>
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80038ce:	f7ff ffa1 	bl	8003814 <__NVIC_SystemReset>

080038d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ffab 	bl	8003838 <SysTick_Config>
 80038e2:	0003      	movs	r3, r0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e036      	b.n	8003970 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2221      	movs	r2, #33	; 0x21
 8003906:	2102      	movs	r1, #2
 8003908:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_DMA_Init+0x8c>)
 8003916:	4013      	ands	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f9c4 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}  
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	ffffc00f 	.word	0xffffc00f

0800397c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800398a:	2317      	movs	r3, #23
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_DMA_Start_IT+0x24>
 800399c:	2302      	movs	r3, #2
 800399e:	e04f      	b.n	8003a40 <HAL_DMA_Start_IT+0xc4>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2221      	movs	r2, #33	; 0x21
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d13a      	bne.n	8003a2a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2221      	movs	r2, #33	; 0x21
 80039b8:	2102      	movs	r1, #2
 80039ba:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2101      	movs	r1, #1
 80039ce:	438a      	bics	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f954 	bl	8003c86 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	210e      	movs	r1, #14
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e00f      	b.n	8003a18 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	210a      	movs	r1, #10
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2104      	movs	r1, #4
 8003a14:	438a      	bics	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003a32:	2317      	movs	r3, #23
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2202      	movs	r2, #2
 8003a38:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003a3a:	2317      	movs	r3, #23
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	781b      	ldrb	r3, [r3, #0]
} 
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b006      	add	sp, #24
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2221      	movs	r2, #33	; 0x21
 8003a54:	5c9b      	ldrb	r3, [r3, r2]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d008      	beq.n	8003a6e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e020      	b.n	8003ab0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	210e      	movs	r1, #14
 8003a7a:	438a      	bics	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	438a      	bics	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2101      	movs	r1, #1
 8003a98:	4091      	lsls	r1, r2
 8003a9a:	000a      	movs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2221      	movs	r2, #33	; 0x21
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	210f      	movs	r1, #15
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2221      	movs	r2, #33	; 0x21
 8003acc:	5c9b      	ldrb	r3, [r3, r2]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d006      	beq.n	8003ae2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e028      	b.n	8003b34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	210e      	movs	r1, #14
 8003aee:	438a      	bics	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	438a      	bics	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4091      	lsls	r1, r2
 8003b0e:	000a      	movs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2221      	movs	r2, #33	; 0x21
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	0010      	movs	r0, r2
 8003b32:	4798      	blx	r3
    } 
  }
  return status;
 8003b34:	230f      	movs	r3, #15
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	781b      	ldrb	r3, [r3, #0]
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2204      	movs	r2, #4
 8003b60:	409a      	lsls	r2, r3
 8003b62:	0013      	movs	r3, r2
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	d024      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x72>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d020      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d107      	bne.n	8003b8e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2104      	movs	r1, #4
 8003b8a:	438a      	bics	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	2104      	movs	r1, #4
 8003b98:	4091      	lsls	r1, r2
 8003b9a:	000a      	movs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d100      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x66>
 8003ba6:	e06a      	b.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	0010      	movs	r0, r2
 8003bb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	e064      	b.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2202      	movs	r2, #2
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d02b      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xda>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d027      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	210a      	movs	r1, #10
 8003be4:	438a      	bics	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2221      	movs	r2, #33	; 0x21
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4091      	lsls	r1, r2
 8003bfc:	000a      	movs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d036      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	0010      	movs	r0, r2
 8003c18:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c1a:	e030      	b.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2208      	movs	r2, #8
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d028      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2208      	movs	r2, #8
 8003c30:	4013      	ands	r3, r2
 8003c32:	d024      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	210e      	movs	r1, #14
 8003c40:	438a      	bics	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4091      	lsls	r1, r2
 8003c50:	000a      	movs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2221      	movs	r2, #33	; 0x21
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	2100      	movs	r1, #0
 8003c68:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	0010      	movs	r0, r2
 8003c7a:	4798      	blx	r3
    }
   }
}  
 8003c7c:	e7ff      	b.n	8003c7e <HAL_DMA_IRQHandler+0x13c>
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4091      	lsls	r1, r2
 8003ca0:	000a      	movs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d108      	bne.n	8003cc6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cc4:	e007      	b.n	8003cd6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	60da      	str	r2, [r3, #12]
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <DMA_CalcBaseAndBitshift+0x30>)
 8003cee:	4694      	mov	ip, r2
 8003cf0:	4463      	add	r3, ip
 8003cf2:	2114      	movs	r1, #20
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7fc fa19 	bl	800012c <__udivsi3>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	009a      	lsls	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <DMA_CalcBaseAndBitshift+0x34>)
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	bffdfff8 	.word	0xbffdfff8
 8003d14:	40020000 	.word	0x40020000

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d26:	e155      	b.n	8003fd4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4091      	lsls	r1, r2
 8003d32:	000a      	movs	r2, r1
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d100      	bne.n	8003d40 <HAL_GPIO_Init+0x28>
 8003d3e:	e146      	b.n	8003fce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2203      	movs	r2, #3
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d005      	beq.n	8003d58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d130      	bne.n	8003dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	0013      	movs	r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d8e:	2201      	movs	r2, #1
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	409a      	lsls	r2, r3
 8003d94:	0013      	movs	r3, r2
 8003d96:	43da      	mvns	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	2201      	movs	r2, #1
 8003da6:	401a      	ands	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	409a      	lsls	r2, r3
 8003dac:	0013      	movs	r3, r2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d017      	beq.n	8003df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d123      	bne.n	8003e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	58d3      	ldr	r3, [r2, r3]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2207      	movs	r2, #7
 8003e14:	4013      	ands	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2107      	movs	r1, #7
 8003e2e:	400b      	ands	r3, r1
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	409a      	lsls	r2, r3
 8003e58:	0013      	movs	r3, r2
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2203      	movs	r2, #3
 8003e68:	401a      	ands	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	0013      	movs	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	23c0      	movs	r3, #192	; 0xc0
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	4013      	ands	r3, r2
 8003e88:	d100      	bne.n	8003e8c <HAL_GPIO_Init+0x174>
 8003e8a:	e0a0      	b.n	8003fce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8c:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_GPIO_Init+0x2d4>)
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_GPIO_Init+0x2d4>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]
 8003e98:	4b54      	ldr	r3, [pc, #336]	; (8003fec <HAL_GPIO_Init+0x2d4>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ea4:	4a52      	ldr	r2, [pc, #328]	; (8003ff0 <HAL_GPIO_Init+0x2d8>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	589b      	ldr	r3, [r3, r2]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	0013      	movs	r3, r2
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	2390      	movs	r3, #144	; 0x90
 8003ecc:	05db      	lsls	r3, r3, #23
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d019      	beq.n	8003f06 <HAL_GPIO_Init+0x1ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a47      	ldr	r2, [pc, #284]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_GPIO_Init+0x1ea>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a46      	ldr	r2, [pc, #280]	; (8003ff8 <HAL_GPIO_Init+0x2e0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00d      	beq.n	8003efe <HAL_GPIO_Init+0x1e6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a45      	ldr	r2, [pc, #276]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <HAL_GPIO_Init+0x1e2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a44      	ldr	r2, [pc, #272]	; (8004000 <HAL_GPIO_Init+0x2e8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_GPIO_Init+0x1de>
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	e008      	b.n	8003f08 <HAL_GPIO_Init+0x1f0>
 8003ef6:	2305      	movs	r3, #5
 8003ef8:	e006      	b.n	8003f08 <HAL_GPIO_Init+0x1f0>
 8003efa:	2303      	movs	r3, #3
 8003efc:	e004      	b.n	8003f08 <HAL_GPIO_Init+0x1f0>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e002      	b.n	8003f08 <HAL_GPIO_Init+0x1f0>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_GPIO_Init+0x1f0>
 8003f06:	2300      	movs	r3, #0
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	0092      	lsls	r2, r2, #2
 8003f10:	4093      	lsls	r3, r2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f18:	4935      	ldr	r1, [pc, #212]	; (8003ff0 <HAL_GPIO_Init+0x2d8>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f26:	4b37      	ldr	r3, [pc, #220]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f4a:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003f50:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f74:	4b23      	ldr	r3, [pc, #140]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43da      	mvns	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	035b      	lsls	r3, r3, #13
 8003f92:	4013      	ands	r3, r2
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003fa4:	4b17      	ldr	r3, [pc, #92]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	039b      	lsls	r3, r3, #14
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	40da      	lsrs	r2, r3
 8003fdc:	1e13      	subs	r3, r2, #0
 8003fde:	d000      	beq.n	8003fe2 <HAL_GPIO_Init+0x2ca>
 8003fe0:	e6a2      	b.n	8003d28 <HAL_GPIO_Init+0x10>
  } 
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b006      	add	sp, #24
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	48000400 	.word	0x48000400
 8003ff8:	48000800 	.word	0x48000800
 8003ffc:	48000c00 	.word	0x48000c00
 8004000:	48001000 	.word	0x48001000
 8004004:	40010400 	.word	0x40010400

08004008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	000a      	movs	r2, r1
 8004012:	1cbb      	adds	r3, r7, #2
 8004014:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	1cba      	adds	r2, r7, #2
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	4013      	ands	r3, r2
 8004020:	d004      	beq.n	800402c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004022:	230f      	movs	r3, #15
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e003      	b.n	8004034 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800402c:	230f      	movs	r3, #15
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004034:	230f      	movs	r3, #15
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	781b      	ldrb	r3, [r3, #0]
  }
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b004      	add	sp, #16
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	0008      	movs	r0, r1
 800404c:	0011      	movs	r1, r2
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	1c02      	adds	r2, r0, #0
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	1c7b      	adds	r3, r7, #1
 8004056:	1c0a      	adds	r2, r1, #0
 8004058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800405a:	1c7b      	adds	r3, r7, #1
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004062:	1cbb      	adds	r3, r7, #2
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800406a:	e003      	b.n	8004074 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406c:	1cbb      	adds	r3, r7, #2
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	0002      	movs	r2, r0
 8004084:	1dbb      	adds	r3, r7, #6
 8004086:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	1dba      	adds	r2, r7, #6
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	4013      	ands	r3, r2
 8004092:	d008      	beq.n	80040a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004096:	1dba      	adds	r2, r7, #6
 8004098:	8812      	ldrh	r2, [r2, #0]
 800409a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800409c:	1dbb      	adds	r3, r7, #6
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f000 f807 	bl	80040b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b002      	add	sp, #8
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40010400 	.word	0x40010400

080040b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	0002      	movs	r2, r0
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e082      	b.n	80041e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2241      	movs	r2, #65	; 0x41
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	2100      	movs	r1, #0
 80040ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fe fcb1 	bl	8002a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2241      	movs	r2, #65	; 0x41
 80040fa:	2124      	movs	r1, #36	; 0x24
 80040fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_I2C_Init+0x120>)
 8004118:	400a      	ands	r2, r1
 800411a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4931      	ldr	r1, [pc, #196]	; (80041ec <HAL_I2C_Init+0x124>)
 8004128:	400a      	ands	r2, r1
 800412a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d108      	bne.n	8004146 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0209      	lsls	r1, r1, #8
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	e007      	b.n	8004156 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2184      	movs	r1, #132	; 0x84
 8004150:	0209      	lsls	r1, r1, #8
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d104      	bne.n	8004168 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	491f      	ldr	r1, [pc, #124]	; (80041f0 <HAL_I2C_Init+0x128>)
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	491a      	ldr	r1, [pc, #104]	; (80041ec <HAL_I2C_Init+0x124>)
 8004184:	400a      	ands	r2, r1
 8004186:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	431a      	orrs	r2, r3
 8004192:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69d9      	ldr	r1, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2241      	movs	r2, #65	; 0x41
 80041cc:	2120      	movs	r1, #32
 80041ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2242      	movs	r2, #66	; 0x42
 80041da:	2100      	movs	r1, #0
 80041dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	f0ffffff 	.word	0xf0ffffff
 80041ec:	ffff7fff 	.word	0xffff7fff
 80041f0:	02008000 	.word	0x02008000

080041f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2241      	movs	r2, #65	; 0x41
 8004202:	5c9b      	ldrb	r3, [r3, r2]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	d138      	bne.n	800427c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	5c9b      	ldrb	r3, [r3, r2]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004214:	2302      	movs	r3, #2
 8004216:	e032      	b.n	800427e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	2101      	movs	r1, #1
 800421e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2241      	movs	r2, #65	; 0x41
 8004224:	2124      	movs	r1, #36	; 0x24
 8004226:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	438a      	bics	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4911      	ldr	r1, [pc, #68]	; (8004288 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004244:	400a      	ands	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2101      	movs	r1, #1
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2241      	movs	r2, #65	; 0x41
 800426c:	2120      	movs	r1, #32
 800426e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2240      	movs	r2, #64	; 0x40
 8004274:	2100      	movs	r1, #0
 8004276:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	ffffefff 	.word	0xffffefff

0800428c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2241      	movs	r2, #65	; 0x41
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d139      	bne.n	8004316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2240      	movs	r2, #64	; 0x40
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e033      	b.n	8004318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2240      	movs	r2, #64	; 0x40
 80042b4:	2101      	movs	r1, #1
 80042b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2241      	movs	r2, #65	; 0x41
 80042bc:	2124      	movs	r1, #36	; 0x24
 80042be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2101      	movs	r1, #1
 80042cc:	438a      	bics	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a11      	ldr	r2, [pc, #68]	; (8004320 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2241      	movs	r2, #65	; 0x41
 8004306:	2120      	movs	r1, #32
 8004308:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	2100      	movs	r1, #0
 8004310:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}
 8004320:	fffff0ff 	.word	0xfffff0ff

08004324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f000 fb76 	bl	8004a24 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2201      	movs	r2, #1
 800433e:	4013      	ands	r3, r2
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x20>
 8004342:	e08e      	b.n	8004462 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004344:	4bc5      	ldr	r3, [pc, #788]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	220c      	movs	r2, #12
 800434a:	4013      	ands	r3, r2
 800434c:	2b04      	cmp	r3, #4
 800434e:	d00e      	beq.n	800436e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004350:	4bc2      	ldr	r3, [pc, #776]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	220c      	movs	r2, #12
 8004356:	4013      	ands	r3, r2
 8004358:	2b08      	cmp	r3, #8
 800435a:	d117      	bne.n	800438c <HAL_RCC_OscConfig+0x68>
 800435c:	4bbf      	ldr	r3, [pc, #764]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	401a      	ands	r2, r3
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	025b      	lsls	r3, r3, #9
 800436a:	429a      	cmp	r2, r3
 800436c:	d10e      	bne.n	800438c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436e:	4bbb      	ldr	r3, [pc, #748]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	4013      	ands	r3, r2
 8004378:	d100      	bne.n	800437c <HAL_RCC_OscConfig+0x58>
 800437a:	e071      	b.n	8004460 <HAL_RCC_OscConfig+0x13c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d000      	beq.n	8004386 <HAL_RCC_OscConfig+0x62>
 8004384:	e06c      	b.n	8004460 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f000 fb4c 	bl	8004a24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_OscConfig+0x80>
 8004394:	4bb1      	ldr	r3, [pc, #708]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4bb0      	ldr	r3, [pc, #704]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	0249      	lsls	r1, r1, #9
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e02f      	b.n	8004404 <HAL_RCC_OscConfig+0xe0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0xa2>
 80043ac:	4bab      	ldr	r3, [pc, #684]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4baa      	ldr	r3, [pc, #680]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043b2:	49ab      	ldr	r1, [pc, #684]	; (8004660 <HAL_RCC_OscConfig+0x33c>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	4ba8      	ldr	r3, [pc, #672]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4ba7      	ldr	r3, [pc, #668]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043be:	49a9      	ldr	r1, [pc, #676]	; (8004664 <HAL_RCC_OscConfig+0x340>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e01e      	b.n	8004404 <HAL_RCC_OscConfig+0xe0>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d10e      	bne.n	80043ec <HAL_RCC_OscConfig+0xc8>
 80043ce:	4ba3      	ldr	r3, [pc, #652]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4ba2      	ldr	r3, [pc, #648]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	02c9      	lsls	r1, r1, #11
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	4b9f      	ldr	r3, [pc, #636]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b9e      	ldr	r3, [pc, #632]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	0249      	lsls	r1, r1, #9
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0xe0>
 80043ec:	4b9b      	ldr	r3, [pc, #620]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b9a      	ldr	r3, [pc, #616]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043f2:	499b      	ldr	r1, [pc, #620]	; (8004660 <HAL_RCC_OscConfig+0x33c>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b98      	ldr	r3, [pc, #608]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b97      	ldr	r3, [pc, #604]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80043fe:	4999      	ldr	r1, [pc, #612]	; (8004664 <HAL_RCC_OscConfig+0x340>)
 8004400:	400a      	ands	r2, r1
 8004402:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fefe 	bl	800320c <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004416:	f7fe fef9 	bl	800320c <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	; 0x64
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e2fd      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004428:	4b8c      	ldr	r3, [pc, #560]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	4013      	ands	r3, r2
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0xf2>
 8004434:	e015      	b.n	8004462 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004436:	f7fe fee9 	bl	800320c <HAL_GetTick>
 800443a:	0003      	movs	r3, r0
 800443c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fe fee4 	bl	800320c <HAL_GetTick>
 8004444:	0002      	movs	r2, r0
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e2e8      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	4b82      	ldr	r3, [pc, #520]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	4013      	ands	r3, r2
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x11c>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2202      	movs	r2, #2
 8004468:	4013      	ands	r3, r2
 800446a:	d100      	bne.n	800446e <HAL_RCC_OscConfig+0x14a>
 800446c:	e06c      	b.n	8004548 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800446e:	4b7b      	ldr	r3, [pc, #492]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	220c      	movs	r2, #12
 8004474:	4013      	ands	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004478:	4b78      	ldr	r3, [pc, #480]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	220c      	movs	r2, #12
 800447e:	4013      	ands	r3, r2
 8004480:	2b08      	cmp	r3, #8
 8004482:	d11f      	bne.n	80044c4 <HAL_RCC_OscConfig+0x1a0>
 8004484:	4b75      	ldr	r3, [pc, #468]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	23c0      	movs	r3, #192	; 0xc0
 800448a:	025b      	lsls	r3, r3, #9
 800448c:	401a      	ands	r2, r3
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	429a      	cmp	r2, r3
 8004494:	d116      	bne.n	80044c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	4b71      	ldr	r3, [pc, #452]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2202      	movs	r2, #2
 800449c:	4013      	ands	r3, r2
 800449e:	d005      	beq.n	80044ac <HAL_RCC_OscConfig+0x188>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e2bb      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ac:	4b6b      	ldr	r3, [pc, #428]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	22f8      	movs	r2, #248	; 0xf8
 80044b2:	4393      	bics	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00da      	lsls	r2, r3, #3
 80044bc:	4b67      	ldr	r3, [pc, #412]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	e041      	b.n	8004548 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d024      	beq.n	8004516 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b63      	ldr	r3, [pc, #396]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b62      	ldr	r3, [pc, #392]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80044d2:	2101      	movs	r1, #1
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fe fe98 	bl	800320c <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fe fe93 	bl	800320c <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e297      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2202      	movs	r2, #2
 80044fa:	4013      	ands	r3, r2
 80044fc:	d0f1      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	22f8      	movs	r2, #248	; 0xf8
 8004504:	4393      	bics	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	00da      	lsls	r2, r3, #3
 800450e:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e018      	b.n	8004548 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b51      	ldr	r3, [pc, #324]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800451c:	2101      	movs	r1, #1
 800451e:	438a      	bics	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fe fe73 	bl	800320c <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452c:	f7fe fe6e 	bl	800320c <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e272      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d1f1      	bne.n	800452c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	4013      	ands	r3, r2
 8004550:	d036      	beq.n	80045c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d019      	beq.n	800458e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455e:	4b3f      	ldr	r3, [pc, #252]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004560:	2101      	movs	r1, #1
 8004562:	430a      	orrs	r2, r1
 8004564:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004566:	f7fe fe51 	bl	800320c <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004570:	f7fe fe4c 	bl	800320c <HAL_GetTick>
 8004574:	0002      	movs	r2, r0
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e250      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2202      	movs	r2, #2
 8004588:	4013      	ands	r3, r2
 800458a:	d0f1      	beq.n	8004570 <HAL_RCC_OscConfig+0x24c>
 800458c:	e018      	b.n	80045c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004592:	4b32      	ldr	r3, [pc, #200]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004594:	2101      	movs	r1, #1
 8004596:	438a      	bics	r2, r1
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fe fe37 	bl	800320c <HAL_GetTick>
 800459e:	0003      	movs	r3, r0
 80045a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fe fe32 	bl	800320c <HAL_GetTick>
 80045a8:	0002      	movs	r2, r0
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e236      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	d1f1      	bne.n	80045a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2204      	movs	r2, #4
 80045c6:	4013      	ands	r3, r2
 80045c8:	d100      	bne.n	80045cc <HAL_RCC_OscConfig+0x2a8>
 80045ca:	e0b5      	b.n	8004738 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045cc:	201f      	movs	r0, #31
 80045ce:	183b      	adds	r3, r7, r0
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d4:	4b21      	ldr	r3, [pc, #132]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	055b      	lsls	r3, r3, #21
 80045dc:	4013      	ands	r3, r2
 80045de:	d110      	bne.n	8004602 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80045e6:	2180      	movs	r1, #128	; 0x80
 80045e8:	0549      	lsls	r1, r1, #21
 80045ea:	430a      	orrs	r2, r1
 80045ec:	61da      	str	r2, [r3, #28]
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x338>)
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	055b      	lsls	r3, r3, #21
 80045f6:	4013      	ands	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045fc:	183b      	adds	r3, r7, r0
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004602:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_RCC_OscConfig+0x344>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4013      	ands	r3, r2
 800460c:	d11a      	bne.n	8004644 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <HAL_RCC_OscConfig+0x344>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCC_OscConfig+0x344>)
 8004614:	2180      	movs	r1, #128	; 0x80
 8004616:	0049      	lsls	r1, r1, #1
 8004618:	430a      	orrs	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461c:	f7fe fdf6 	bl	800320c <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004626:	f7fe fdf1 	bl	800320c <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b64      	cmp	r3, #100	; 0x64
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1f5      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_OscConfig+0x344>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4013      	ands	r3, r2
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10f      	bne.n	800466c <HAL_RCC_OscConfig+0x348>
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCC_OscConfig+0x338>)
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	4b02      	ldr	r3, [pc, #8]	; (800465c <HAL_RCC_OscConfig+0x338>)
 8004652:	2101      	movs	r1, #1
 8004654:	430a      	orrs	r2, r1
 8004656:	621a      	str	r2, [r3, #32]
 8004658:	e036      	b.n	80046c8 <HAL_RCC_OscConfig+0x3a4>
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	40021000 	.word	0x40021000
 8004660:	fffeffff 	.word	0xfffeffff
 8004664:	fffbffff 	.word	0xfffbffff
 8004668:	40007000 	.word	0x40007000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10c      	bne.n	800468e <HAL_RCC_OscConfig+0x36a>
 8004674:	4bca      	ldr	r3, [pc, #808]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	4bc9      	ldr	r3, [pc, #804]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800467a:	2101      	movs	r1, #1
 800467c:	438a      	bics	r2, r1
 800467e:	621a      	str	r2, [r3, #32]
 8004680:	4bc7      	ldr	r3, [pc, #796]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	4bc6      	ldr	r3, [pc, #792]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004686:	2104      	movs	r1, #4
 8004688:	438a      	bics	r2, r1
 800468a:	621a      	str	r2, [r3, #32]
 800468c:	e01c      	b.n	80046c8 <HAL_RCC_OscConfig+0x3a4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x38c>
 8004696:	4bc2      	ldr	r3, [pc, #776]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	4bc1      	ldr	r3, [pc, #772]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800469c:	2104      	movs	r1, #4
 800469e:	430a      	orrs	r2, r1
 80046a0:	621a      	str	r2, [r3, #32]
 80046a2:	4bbf      	ldr	r3, [pc, #764]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	4bbe      	ldr	r3, [pc, #760]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046a8:	2101      	movs	r1, #1
 80046aa:	430a      	orrs	r2, r1
 80046ac:	621a      	str	r2, [r3, #32]
 80046ae:	e00b      	b.n	80046c8 <HAL_RCC_OscConfig+0x3a4>
 80046b0:	4bbb      	ldr	r3, [pc, #748]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	4bba      	ldr	r3, [pc, #744]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046b6:	2101      	movs	r1, #1
 80046b8:	438a      	bics	r2, r1
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	4bb8      	ldr	r3, [pc, #736]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	4bb7      	ldr	r3, [pc, #732]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046c2:	2104      	movs	r1, #4
 80046c4:	438a      	bics	r2, r1
 80046c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d014      	beq.n	80046fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d0:	f7fe fd9c 	bl	800320c <HAL_GetTick>
 80046d4:	0003      	movs	r3, r0
 80046d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	e009      	b.n	80046ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fe fd97 	bl	800320c <HAL_GetTick>
 80046de:	0002      	movs	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	4aaf      	ldr	r2, [pc, #700]	; (80049a4 <HAL_RCC_OscConfig+0x680>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e19a      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	4bac      	ldr	r3, [pc, #688]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	2202      	movs	r2, #2
 80046f4:	4013      	ands	r3, r2
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x3b6>
 80046f8:	e013      	b.n	8004722 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fe fd87 	bl	800320c <HAL_GetTick>
 80046fe:	0003      	movs	r3, r0
 8004700:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004702:	e009      	b.n	8004718 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fe fd82 	bl	800320c <HAL_GetTick>
 8004708:	0002      	movs	r2, r0
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	4aa5      	ldr	r2, [pc, #660]	; (80049a4 <HAL_RCC_OscConfig+0x680>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e185      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004718:	4ba1      	ldr	r3, [pc, #644]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	2202      	movs	r2, #2
 800471e:	4013      	ands	r3, r2
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004722:	231f      	movs	r3, #31
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b9c      	ldr	r3, [pc, #624]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	4b9b      	ldr	r3, [pc, #620]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004732:	499d      	ldr	r1, [pc, #628]	; (80049a8 <HAL_RCC_OscConfig+0x684>)
 8004734:	400a      	ands	r2, r1
 8004736:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	4013      	ands	r3, r2
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d12a      	bne.n	80047a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800474a:	4b95      	ldr	r3, [pc, #596]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800474c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474e:	4b94      	ldr	r3, [pc, #592]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004750:	2104      	movs	r1, #4
 8004752:	430a      	orrs	r2, r1
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004756:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475a:	4b91      	ldr	r3, [pc, #580]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800475c:	2101      	movs	r1, #1
 800475e:	430a      	orrs	r2, r1
 8004760:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004762:	f7fe fd53 	bl	800320c <HAL_GetTick>
 8004766:	0003      	movs	r3, r0
 8004768:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800476c:	f7fe fd4e 	bl	800320c <HAL_GetTick>
 8004770:	0002      	movs	r2, r0
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e152      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d0f1      	beq.n	800476c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004788:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	22f8      	movs	r2, #248	; 0xf8
 800478e:	4393      	bics	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	00da      	lsls	r2, r3, #3
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800479a:	430a      	orrs	r2, r1
 800479c:	635a      	str	r2, [r3, #52]	; 0x34
 800479e:	e034      	b.n	800480a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	3305      	adds	r3, #5
 80047a6:	d111      	bne.n	80047cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80047a8:	4b7d      	ldr	r3, [pc, #500]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ac:	4b7c      	ldr	r3, [pc, #496]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047ae:	2104      	movs	r1, #4
 80047b0:	438a      	bics	r2, r1
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047b4:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	22f8      	movs	r2, #248	; 0xf8
 80047ba:	4393      	bics	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	00da      	lsls	r2, r3, #3
 80047c4:	4b76      	ldr	r3, [pc, #472]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047c6:	430a      	orrs	r2, r1
 80047c8:	635a      	str	r2, [r3, #52]	; 0x34
 80047ca:	e01e      	b.n	800480a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047cc:	4b74      	ldr	r3, [pc, #464]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d0:	4b73      	ldr	r3, [pc, #460]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047d2:	2104      	movs	r1, #4
 80047d4:	430a      	orrs	r2, r1
 80047d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80047d8:	4b71      	ldr	r3, [pc, #452]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047dc:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80047de:	2101      	movs	r1, #1
 80047e0:	438a      	bics	r2, r1
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e4:	f7fe fd12 	bl	800320c <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047ee:	f7fe fd0d 	bl	800320c <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e111      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004800:	4b67      	ldr	r3, [pc, #412]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004804:	2202      	movs	r2, #2
 8004806:	4013      	ands	r3, r2
 8004808:	d1f1      	bne.n	80047ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2220      	movs	r2, #32
 8004810:	4013      	ands	r3, r2
 8004812:	d05c      	beq.n	80048ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004814:	4b62      	ldr	r3, [pc, #392]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	220c      	movs	r2, #12
 800481a:	4013      	ands	r3, r2
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d00e      	beq.n	800483e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004820:	4b5f      	ldr	r3, [pc, #380]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	220c      	movs	r2, #12
 8004826:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004828:	2b08      	cmp	r3, #8
 800482a:	d114      	bne.n	8004856 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800482c:	4b5c      	ldr	r3, [pc, #368]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	23c0      	movs	r3, #192	; 0xc0
 8004832:	025b      	lsls	r3, r3, #9
 8004834:	401a      	ands	r2, r3
 8004836:	23c0      	movs	r3, #192	; 0xc0
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	429a      	cmp	r2, r3
 800483c:	d10b      	bne.n	8004856 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800483e:	4b58      	ldr	r3, [pc, #352]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	4013      	ands	r3, r2
 8004848:	d040      	beq.n	80048cc <HAL_RCC_OscConfig+0x5a8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d03c      	beq.n	80048cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0e6      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01b      	beq.n	8004896 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800485e:	4b50      	ldr	r3, [pc, #320]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004862:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	0249      	lsls	r1, r1, #9
 8004868:	430a      	orrs	r2, r1
 800486a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fe fcce 	bl	800320c <HAL_GetTick>
 8004870:	0003      	movs	r3, r0
 8004872:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004876:	f7fe fcc9 	bl	800320c <HAL_GetTick>
 800487a:	0002      	movs	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0cd      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004888:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800488a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	025b      	lsls	r3, r3, #9
 8004890:	4013      	ands	r3, r2
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x552>
 8004894:	e01b      	b.n	80048ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004896:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800489c:	4943      	ldr	r1, [pc, #268]	; (80049ac <HAL_RCC_OscConfig+0x688>)
 800489e:	400a      	ands	r2, r1
 80048a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fe fcb3 	bl	800320c <HAL_GetTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ac:	f7fe fcae 	bl	800320c <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0b2      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80048be:	4b38      	ldr	r3, [pc, #224]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80048c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	025b      	lsls	r3, r3, #9
 80048c6:	4013      	ands	r3, r2
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x588>
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d100      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5b4>
 80048d6:	e0a4      	b.n	8004a22 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	220c      	movs	r2, #12
 80048de:	4013      	ands	r3, r2
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d100      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5c2>
 80048e4:	e078      	b.n	80049d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d14c      	bne.n	8004988 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ee:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 80048f4:	492e      	ldr	r1, [pc, #184]	; (80049b0 <HAL_RCC_OscConfig+0x68c>)
 80048f6:	400a      	ands	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fa:	f7fe fc87 	bl	800320c <HAL_GetTick>
 80048fe:	0003      	movs	r3, r0
 8004900:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe fc82 	bl	800320c <HAL_GetTick>
 8004908:	0002      	movs	r2, r0
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e086      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004916:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	049b      	lsls	r3, r3, #18
 800491e:	4013      	ands	r3, r2
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004922:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	220f      	movs	r2, #15
 8004928:	4393      	bics	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004932:	430a      	orrs	r2, r1
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <HAL_RCC_OscConfig+0x690>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	431a      	orrs	r2, r3
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004950:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	0449      	lsls	r1, r1, #17
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495e:	f7fe fc55 	bl	800320c <HAL_GetTick>
 8004962:	0003      	movs	r3, r0
 8004964:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004968:	f7fe fc50 	bl	800320c <HAL_GetTick>
 800496c:	0002      	movs	r2, r0
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	049b      	lsls	r3, r3, #18
 8004982:	4013      	ands	r3, r2
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x644>
 8004986:	e04c      	b.n	8004a22 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <HAL_RCC_OscConfig+0x67c>)
 800498e:	4908      	ldr	r1, [pc, #32]	; (80049b0 <HAL_RCC_OscConfig+0x68c>)
 8004990:	400a      	ands	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fe fc3a 	bl	800320c <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499c:	e015      	b.n	80049ca <HAL_RCC_OscConfig+0x6a6>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	40021000 	.word	0x40021000
 80049a4:	00001388 	.word	0x00001388
 80049a8:	efffffff 	.word	0xefffffff
 80049ac:	fffeffff 	.word	0xfffeffff
 80049b0:	feffffff 	.word	0xfeffffff
 80049b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fe fc28 	bl	800320c <HAL_GetTick>
 80049bc:	0002      	movs	r2, r0
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e02c      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_RCC_OscConfig+0x708>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	049b      	lsls	r3, r3, #18
 80049d2:	4013      	ands	r3, r2
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x694>
 80049d6:	e024      	b.n	8004a22 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e01f      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <HAL_RCC_OscConfig+0x708>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCC_OscConfig+0x708>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	23c0      	movs	r3, #192	; 0xc0
 80049f4:	025b      	lsls	r3, r3, #9
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d10e      	bne.n	8004a1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	220f      	movs	r2, #15
 8004a04:	401a      	ands	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	23f0      	movs	r3, #240	; 0xf0
 8004a12:	039b      	lsls	r3, r3, #14
 8004a14:	401a      	ands	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b008      	add	sp, #32
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000

08004a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0bf      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d911      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a52:	4b5e      	ldr	r3, [pc, #376]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2201      	movs	r2, #1
 8004a58:	4393      	bics	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	4b5b      	ldr	r3, [pc, #364]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0a6      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d015      	beq.n	8004aac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2204      	movs	r2, #4
 8004a86:	4013      	ands	r3, r2
 8004a88:	d006      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a8a:	4b51      	ldr	r3, [pc, #324]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a90:	21e0      	movs	r1, #224	; 0xe0
 8004a92:	00c9      	lsls	r1, r1, #3
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	22f0      	movs	r2, #240	; 0xf0
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d04c      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b44      	ldr	r3, [pc, #272]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d120      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07a      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	049b      	lsls	r3, r3, #18
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d114      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06e      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	025b      	lsls	r3, r3, #9
 8004af6:	4013      	ands	r3, r2
 8004af8:	d108      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e062      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afe:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2202      	movs	r2, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e05b      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	4393      	bics	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b20:	f7fe fb74 	bl	800320c <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b28:	e009      	b.n	8004b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2a:	f7fe fb6f 	bl	800320c <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <HAL_RCC_ClockConfig+0x1a4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e042      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	220c      	movs	r2, #12
 8004b44:	401a      	ands	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1ec      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d211      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2201      	movs	r2, #1
 8004b64:	4393      	bics	r3, r2
 8004b66:	0019      	movs	r1, r3
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_RCC_ClockConfig+0x19c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e020      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2204      	movs	r2, #4
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <HAL_RCC_ClockConfig+0x1a8>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ba0:	f000 f820 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004ba4:	0001      	movs	r1, r0
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	220f      	movs	r2, #15
 8004bae:	4013      	ands	r3, r2
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <HAL_RCC_ClockConfig+0x1ac>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	000a      	movs	r2, r1
 8004bb6:	40da      	lsrs	r2, r3
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1b0>)
 8004bba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f7fe fadf 	bl	8003180 <HAL_InitTick>
  
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b004      	add	sp, #16
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40022000 	.word	0x40022000
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00001388 	.word	0x00001388
 8004bd8:	fffff8ff 	.word	0xfffff8ff
 8004bdc:	080081a0 	.word	0x080081a0
 8004be0:	20000004 	.word	0x20000004

08004be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b08f      	sub	sp, #60	; 0x3c
 8004be8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004bea:	2314      	movs	r3, #20
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xec>)
 8004bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bf2:	c313      	stmia	r3!, {r0, r1, r4}
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004bf8:	1d3b      	adds	r3, r7, #4
 8004bfa:	4a36      	ldr	r2, [pc, #216]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004bfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bfe:	c313      	stmia	r3!, {r0, r1, r4}
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004c18:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	220c      	movs	r2, #12
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	d047      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xd4>
 8004c28:	d849      	bhi.n	8004cbe <HAL_RCC_GetSysClockFreq+0xda>
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x50>
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x56>
 8004c32:	e044      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c38:	e044      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	0c9b      	lsrs	r3, r3, #18
 8004c3e:	220f      	movs	r2, #15
 8004c40:	4013      	ands	r3, r2
 8004c42:	2214      	movs	r2, #20
 8004c44:	18ba      	adds	r2, r7, r2
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c4a:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	220f      	movs	r2, #15
 8004c50:	4013      	ands	r3, r2
 8004c52:	1d3a      	adds	r2, r7, #4
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5a:	23c0      	movs	r3, #192	; 0xc0
 8004c5c:	025b      	lsls	r3, r3, #9
 8004c5e:	401a      	ands	r2, r3
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	025b      	lsls	r3, r3, #9
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d109      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6a:	481c      	ldr	r0, [pc, #112]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c6c:	f7fb fa5e 	bl	800012c <__udivsi3>
 8004c70:	0003      	movs	r3, r0
 8004c72:	001a      	movs	r2, r3
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	4353      	muls	r3, r2
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7a:	e01a      	b.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7e:	23c0      	movs	r3, #192	; 0xc0
 8004c80:	025b      	lsls	r3, r3, #9
 8004c82:	401a      	ands	r2, r3
 8004c84:	23c0      	movs	r3, #192	; 0xc0
 8004c86:	025b      	lsls	r3, r3, #9
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d109      	bne.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8e:	4814      	ldr	r0, [pc, #80]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c90:	f7fb fa4c 	bl	800012c <__udivsi3>
 8004c94:	0003      	movs	r3, r0
 8004c96:	001a      	movs	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	4353      	muls	r3, r2
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ca2:	480e      	ldr	r0, [pc, #56]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ca4:	f7fb fa42 	bl	800012c <__udivsi3>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	001a      	movs	r2, r3
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	4353      	muls	r3, r2
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004cc2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b00f      	add	sp, #60	; 0x3c
 8004ccc:	bd90      	pop	{r4, r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	08008100 	.word	0x08008100
 8004cd4:	08008110 	.word	0x08008110
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	007a1200 	.word	0x007a1200
 8004ce0:	02dc6c00 	.word	0x02dc6c00

08004ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce8:	4b02      	ldr	r3, [pc, #8]	; (8004cf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	20000004 	.word	0x20000004

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004cfc:	f7ff fff2 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d00:	0001      	movs	r1, r0
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	2207      	movs	r2, #7
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d0e:	5cd3      	ldrb	r3, [r2, r3]
 8004d10:	40d9      	lsrs	r1, r3
 8004d12:	000b      	movs	r3, r1
}    
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	080081b0 	.word	0x080081b0

08004d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	025b      	lsls	r3, r3, #9
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004d40:	e08e      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004d42:	2017      	movs	r0, #23
 8004d44:	183b      	adds	r3, r7, r0
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b6e      	ldr	r3, [pc, #440]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	055b      	lsls	r3, r3, #21
 8004d52:	4013      	ands	r3, r2
 8004d54:	d110      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	4b6b      	ldr	r3, [pc, #428]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	4b6a      	ldr	r3, [pc, #424]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d5c:	2180      	movs	r1, #128	; 0x80
 8004d5e:	0549      	lsls	r1, r1, #21
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
 8004d64:	4b67      	ldr	r3, [pc, #412]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	055b      	lsls	r3, r3, #21
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b63      	ldr	r3, [pc, #396]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d11a      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d84:	4b60      	ldr	r3, [pc, #384]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b5f      	ldr	r3, [pc, #380]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	0049      	lsls	r1, r1, #1
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fa3b 	bl	800320c <HAL_GetTick>
 8004d96:	0003      	movs	r3, r0
 8004d98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9a:	e008      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9c:	f7fe fa36 	bl	800320c <HAL_GetTick>
 8004da0:	0002      	movs	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e0a6      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4013      	ands	r3, r2
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dba:	4b52      	ldr	r3, [pc, #328]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	23c0      	movs	r3, #192	; 0xc0
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d034      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	23c0      	movs	r3, #192	; 0xc0
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d02c      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ddc:	4b49      	ldr	r3, [pc, #292]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	4a4a      	ldr	r2, [pc, #296]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	4b46      	ldr	r3, [pc, #280]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	0249      	lsls	r1, r1, #9
 8004df0:	430a      	orrs	r2, r1
 8004df2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df4:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dfa:	4945      	ldr	r1, [pc, #276]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e00:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fe f9fd 	bl	800320c <HAL_GetTick>
 8004e12:	0003      	movs	r3, r0
 8004e14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e009      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fe f9f8 	bl	800320c <HAL_GetTick>
 8004e1c:	0002      	movs	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e067      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	2202      	movs	r2, #2
 8004e32:	4013      	ands	r3, r2
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e36:	4b33      	ldr	r3, [pc, #204]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e46:	430a      	orrs	r2, r1
 8004e48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e4a:	2317      	movs	r3, #23
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e5a:	492f      	ldr	r1, [pc, #188]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e6a:	4b26      	ldr	r3, [pc, #152]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4393      	bics	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e88:	4b1e      	ldr	r3, [pc, #120]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea6:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	2210      	movs	r2, #16
 8004eac:	4393      	bics	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	2280      	movs	r2, #128	; 0x80
 8004ecc:	4393      	bics	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	2240      	movs	r2, #64	; 0x40
 8004eec:	4393      	bics	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b006      	add	sp, #24
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
 8004f0c:	fffffcff 	.word	0xfffffcff
 8004f10:	fffeffff 	.word	0xfffeffff
 8004f14:	00001388 	.word	0x00001388
 8004f18:	efffffff 	.word	0xefffffff
 8004f1c:	fffcffff 	.word	0xfffcffff

08004f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e042      	b.n	8004fb8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	223d      	movs	r2, #61	; 0x3d
 8004f36:	5c9b      	ldrb	r3, [r3, r2]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	223c      	movs	r2, #60	; 0x3c
 8004f42:	2100      	movs	r1, #0
 8004f44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7fd fe1d 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	223d      	movs	r2, #61	; 0x3d
 8004f52:	2102      	movs	r1, #2
 8004f54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	0019      	movs	r1, r3
 8004f60:	0010      	movs	r0, r2
 8004f62:	f000 ff57 	bl	8005e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2246      	movs	r2, #70	; 0x46
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	223e      	movs	r2, #62	; 0x3e
 8004f72:	2101      	movs	r1, #1
 8004f74:	5499      	strb	r1, [r3, r2]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223f      	movs	r2, #63	; 0x3f
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2240      	movs	r2, #64	; 0x40
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2241      	movs	r2, #65	; 0x41
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2242      	movs	r2, #66	; 0x42
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2243      	movs	r2, #67	; 0x43
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2244      	movs	r2, #68	; 0x44
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2245      	movs	r2, #69	; 0x45
 8004faa:	2101      	movs	r1, #1
 8004fac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	223d      	movs	r2, #61	; 0x3d
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e042      	b.n	8005058 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	223d      	movs	r2, #61	; 0x3d
 8004fd6:	5c9b      	ldrb	r3, [r3, r2]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	223c      	movs	r2, #60	; 0x3c
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 f839 	bl	8005060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	223d      	movs	r2, #61	; 0x3d
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	0019      	movs	r1, r3
 8005000:	0010      	movs	r0, r2
 8005002:	f000 ff07 	bl	8005e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2246      	movs	r2, #70	; 0x46
 800500a:	2101      	movs	r1, #1
 800500c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	223e      	movs	r2, #62	; 0x3e
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	223f      	movs	r2, #63	; 0x3f
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2240      	movs	r2, #64	; 0x40
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2241      	movs	r2, #65	; 0x41
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2242      	movs	r2, #66	; 0x42
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2243      	movs	r2, #67	; 0x43
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2244      	movs	r2, #68	; 0x44
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2245      	movs	r2, #69	; 0x45
 800504a:	2101      	movs	r1, #1
 800504c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	223d      	movs	r2, #61	; 0x3d
 8005052:	2101      	movs	r1, #1
 8005054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	46bd      	mov	sp, r7
 800506c:	b002      	add	sp, #8
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <HAL_TIM_PWM_Start+0x22>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	223e      	movs	r2, #62	; 0x3e
 8005084:	5c9b      	ldrb	r3, [r3, r2]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	1e5a      	subs	r2, r3, #1
 800508c:	4193      	sbcs	r3, r2
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e01f      	b.n	80050d2 <HAL_TIM_PWM_Start+0x62>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d108      	bne.n	80050aa <HAL_TIM_PWM_Start+0x3a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	223f      	movs	r2, #63	; 0x3f
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	4193      	sbcs	r3, r2
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e013      	b.n	80050d2 <HAL_TIM_PWM_Start+0x62>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d108      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x52>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	5c9b      	ldrb	r3, [r3, r2]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	1e5a      	subs	r2, r3, #1
 80050bc:	4193      	sbcs	r3, r2
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e007      	b.n	80050d2 <HAL_TIM_PWM_Start+0x62>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2241      	movs	r2, #65	; 0x41
 80050c6:	5c9b      	ldrb	r3, [r3, r2]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	4193      	sbcs	r3, r2
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e074      	b.n	80051c4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0x7a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	223e      	movs	r2, #62	; 0x3e
 80050e4:	2102      	movs	r1, #2
 80050e6:	5499      	strb	r1, [r3, r2]
 80050e8:	e013      	b.n	8005112 <HAL_TIM_PWM_Start+0xa2>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0x8a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	223f      	movs	r2, #63	; 0x3f
 80050f4:	2102      	movs	r1, #2
 80050f6:	5499      	strb	r1, [r3, r2]
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_PWM_Start+0xa2>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0x9a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2240      	movs	r2, #64	; 0x40
 8005104:	2102      	movs	r1, #2
 8005106:	5499      	strb	r1, [r3, r2]
 8005108:	e003      	b.n	8005112 <HAL_TIM_PWM_Start+0xa2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2241      	movs	r2, #65	; 0x41
 800510e:	2102      	movs	r1, #2
 8005110:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	2201      	movs	r2, #1
 800511a:	0018      	movs	r0, r3
 800511c:	f001 f990 	bl	8006440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a29      	ldr	r2, [pc, #164]	; (80051cc <HAL_TIM_PWM_Start+0x15c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIM_PWM_Start+0xd8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a28      	ldr	r2, [pc, #160]	; (80051d0 <HAL_TIM_PWM_Start+0x160>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_TIM_PWM_Start+0xd8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <HAL_TIM_PWM_Start+0x164>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_PWM_Start+0xd8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <HAL_TIM_PWM_Start+0x168>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <HAL_TIM_PWM_Start+0xdc>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <HAL_TIM_PWM_Start+0xde>
 800514c:	2300      	movs	r3, #0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2180      	movs	r1, #128	; 0x80
 800515e:	0209      	lsls	r1, r1, #8
 8005160:	430a      	orrs	r2, r1
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_TIM_PWM_Start+0x15c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00f      	beq.n	800518e <HAL_TIM_PWM_Start+0x11e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	05db      	lsls	r3, r3, #23
 8005176:	429a      	cmp	r2, r3
 8005178:	d009      	beq.n	800518e <HAL_TIM_PWM_Start+0x11e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_TIM_PWM_Start+0x16c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIM_PWM_Start+0x11e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a11      	ldr	r2, [pc, #68]	; (80051d0 <HAL_TIM_PWM_Start+0x160>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d111      	bne.n	80051b2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2207      	movs	r2, #7
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b06      	cmp	r3, #6
 800519e:	d010      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2101      	movs	r1, #1
 80051ac:	430a      	orrs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b0:	e007      	b.n	80051c2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2101      	movs	r1, #1
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	0018      	movs	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b004      	add	sp, #16
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40000400 	.word	0x40000400

080051e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	001a      	movs	r2, r3
 80051ee:	1cbb      	adds	r3, r7, #2
 80051f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2317      	movs	r3, #23
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <HAL_TIM_PWM_Start_DMA+0x32>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	223e      	movs	r2, #62	; 0x3e
 8005204:	5c9b      	ldrb	r3, [r3, r2]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3b02      	subs	r3, #2
 800520a:	425a      	negs	r2, r3
 800520c:	4153      	adcs	r3, r2
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e01f      	b.n	8005252 <HAL_TIM_PWM_Start_DMA+0x72>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d108      	bne.n	800522a <HAL_TIM_PWM_Start_DMA+0x4a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	223f      	movs	r2, #63	; 0x3f
 800521c:	5c9b      	ldrb	r3, [r3, r2]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3b02      	subs	r3, #2
 8005222:	425a      	negs	r2, r3
 8005224:	4153      	adcs	r3, r2
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e013      	b.n	8005252 <HAL_TIM_PWM_Start_DMA+0x72>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d108      	bne.n	8005242 <HAL_TIM_PWM_Start_DMA+0x62>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	5c9b      	ldrb	r3, [r3, r2]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3b02      	subs	r3, #2
 800523a:	425a      	negs	r2, r3
 800523c:	4153      	adcs	r3, r2
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e007      	b.n	8005252 <HAL_TIM_PWM_Start_DMA+0x72>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2241      	movs	r2, #65	; 0x41
 8005246:	5c9b      	ldrb	r3, [r3, r2]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	3b02      	subs	r3, #2
 800524c:	425a      	negs	r2, r3
 800524e:	4153      	adcs	r3, r2
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005256:	2302      	movs	r3, #2
 8005258:	e164      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <HAL_TIM_PWM_Start_DMA+0x92>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	223e      	movs	r2, #62	; 0x3e
 8005264:	5c9b      	ldrb	r3, [r3, r2]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	425a      	negs	r2, r3
 800526c:	4153      	adcs	r3, r2
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e01f      	b.n	80052b2 <HAL_TIM_PWM_Start_DMA+0xd2>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d108      	bne.n	800528a <HAL_TIM_PWM_Start_DMA+0xaa>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	223f      	movs	r2, #63	; 0x3f
 800527c:	5c9b      	ldrb	r3, [r3, r2]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	425a      	negs	r2, r3
 8005284:	4153      	adcs	r3, r2
 8005286:	b2db      	uxtb	r3, r3
 8005288:	e013      	b.n	80052b2 <HAL_TIM_PWM_Start_DMA+0xd2>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d108      	bne.n	80052a2 <HAL_TIM_PWM_Start_DMA+0xc2>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2240      	movs	r2, #64	; 0x40
 8005294:	5c9b      	ldrb	r3, [r3, r2]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	425a      	negs	r2, r3
 800529c:	4153      	adcs	r3, r2
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e007      	b.n	80052b2 <HAL_TIM_PWM_Start_DMA+0xd2>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2241      	movs	r2, #65	; 0x41
 80052a6:	5c9b      	ldrb	r3, [r3, r2]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	425a      	negs	r2, r3
 80052ae:	4153      	adcs	r3, r2
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d025      	beq.n	8005302 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <HAL_TIM_PWM_Start_DMA+0xe8>
 80052bc:	1cbb      	adds	r3, r7, #2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e12d      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_PWM_Start_DMA+0xf8>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	223e      	movs	r2, #62	; 0x3e
 80052d2:	2102      	movs	r1, #2
 80052d4:	5499      	strb	r1, [r3, r2]
 80052d6:	e016      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x126>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_PWM_Start_DMA+0x108>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	223f      	movs	r2, #63	; 0x3f
 80052e2:	2102      	movs	r1, #2
 80052e4:	5499      	strb	r1, [r3, r2]
 80052e6:	e00e      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x126>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d104      	bne.n	80052f8 <HAL_TIM_PWM_Start_DMA+0x118>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2240      	movs	r2, #64	; 0x40
 80052f2:	2102      	movs	r1, #2
 80052f4:	5499      	strb	r1, [r3, r2]
 80052f6:	e006      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x126>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2241      	movs	r2, #65	; 0x41
 80052fc:	2102      	movs	r1, #2
 80052fe:	5499      	strb	r1, [r3, r2]
 8005300:	e001      	b.n	8005306 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e10e      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b0c      	cmp	r3, #12
 800530a:	d100      	bne.n	800530e <HAL_TIM_PWM_Start_DMA+0x12e>
 800530c:	e080      	b.n	8005410 <HAL_TIM_PWM_Start_DMA+0x230>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d900      	bls.n	8005316 <HAL_TIM_PWM_Start_DMA+0x136>
 8005314:	e0a1      	b.n	800545a <HAL_TIM_PWM_Start_DMA+0x27a>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d054      	beq.n	80053c6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b08      	cmp	r3, #8
 8005320:	d900      	bls.n	8005324 <HAL_TIM_PWM_Start_DMA+0x144>
 8005322:	e09a      	b.n	800545a <HAL_TIM_PWM_Start_DMA+0x27a>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_PWM_Start_DMA+0x152>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d025      	beq.n	800537c <HAL_TIM_PWM_Start_DMA+0x19c>
 8005330:	e093      	b.n	800545a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	4a7d      	ldr	r2, [pc, #500]	; (800552c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	4a7c      	ldr	r2, [pc, #496]	; (8005530 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005340:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	4a7b      	ldr	r2, [pc, #492]	; (8005534 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005348:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3334      	adds	r3, #52	; 0x34
 8005356:	001a      	movs	r2, r3
 8005358:	1cbb      	adds	r3, r7, #2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	f7fe fb0e 	bl	800397c <HAL_DMA_Start_IT>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d001      	beq.n	8005368 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0dd      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	0089      	lsls	r1, r1, #2
 8005376:	430a      	orrs	r2, r1
 8005378:	60da      	str	r2, [r3, #12]
      break;
 800537a:	e073      	b.n	8005464 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	4a6a      	ldr	r2, [pc, #424]	; (800552c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005382:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	4a69      	ldr	r2, [pc, #420]	; (8005530 <HAL_TIM_PWM_Start_DMA+0x350>)
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	4a68      	ldr	r2, [pc, #416]	; (8005534 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005392:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3338      	adds	r3, #56	; 0x38
 80053a0:	001a      	movs	r2, r3
 80053a2:	1cbb      	adds	r3, r7, #2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	f7fe fae9 	bl	800397c <HAL_DMA_Start_IT>
 80053aa:	1e03      	subs	r3, r0, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e0b8      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2180      	movs	r1, #128	; 0x80
 80053be:	00c9      	lsls	r1, r1, #3
 80053c0:	430a      	orrs	r2, r1
 80053c2:	60da      	str	r2, [r3, #12]
      break;
 80053c4:	e04e      	b.n	8005464 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	4a58      	ldr	r2, [pc, #352]	; (800552c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a57      	ldr	r2, [pc, #348]	; (8005530 <HAL_TIM_PWM_Start_DMA+0x350>)
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	4a56      	ldr	r2, [pc, #344]	; (8005534 <HAL_TIM_PWM_Start_DMA+0x354>)
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	333c      	adds	r3, #60	; 0x3c
 80053ea:	001a      	movs	r2, r3
 80053ec:	1cbb      	adds	r3, r7, #2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	f7fe fac4 	bl	800397c <HAL_DMA_Start_IT>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d001      	beq.n	80053fc <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e093      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	0109      	lsls	r1, r1, #4
 800540a:	430a      	orrs	r2, r1
 800540c:	60da      	str	r2, [r3, #12]
      break;
 800540e:	e029      	b.n	8005464 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	4a45      	ldr	r2, [pc, #276]	; (800552c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	4a44      	ldr	r2, [pc, #272]	; (8005530 <HAL_TIM_PWM_Start_DMA+0x350>)
 800541e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4a43      	ldr	r2, [pc, #268]	; (8005534 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005426:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3340      	adds	r3, #64	; 0x40
 8005434:	001a      	movs	r2, r3
 8005436:	1cbb      	adds	r3, r7, #2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	f7fe fa9f 	bl	800397c <HAL_DMA_Start_IT>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d001      	beq.n	8005446 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06e      	b.n	8005524 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	0149      	lsls	r1, r1, #5
 8005454:	430a      	orrs	r2, r1
 8005456:	60da      	str	r2, [r3, #12]
      break;
 8005458:	e004      	b.n	8005464 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 800545a:	2317      	movs	r3, #23
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
      break;
 8005462:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005464:	2317      	movs	r3, #23
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d157      	bne.n	800551e <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	2201      	movs	r2, #1
 8005476:	0018      	movs	r0, r3
 8005478:	f000 ffe2 	bl	8006440 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2c      	ldr	r2, [pc, #176]	; (800553c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <HAL_TIM_PWM_Start_DMA+0x360>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a29      	ldr	r2, [pc, #164]	; (8005544 <HAL_TIM_PWM_Start_DMA+0x364>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <HAL_TIM_PWM_Start_DMA+0x2c8>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_TIM_PWM_Start_DMA+0x2ca>
 80054a8:	2300      	movs	r3, #0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2180      	movs	r1, #128	; 0x80
 80054ba:	0209      	lsls	r1, r1, #8
 80054bc:	430a      	orrs	r2, r1
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_TIM_PWM_Start_DMA+0x358>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <HAL_TIM_PWM_Start_DMA+0x30a>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	05db      	lsls	r3, r3, #23
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d009      	beq.n	80054ea <HAL_TIM_PWM_Start_DMA+0x30a>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_TIM_PWM_Start_DMA+0x368>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIM_PWM_Start_DMA+0x30a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a15      	ldr	r2, [pc, #84]	; (800553c <HAL_TIM_PWM_Start_DMA+0x35c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d111      	bne.n	800550e <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2207      	movs	r2, #7
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d010      	beq.n	800551e <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2101      	movs	r1, #1
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550c:	e007      	b.n	800551e <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800551e:	2317      	movs	r3, #23
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	781b      	ldrb	r3, [r3, #0]
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b006      	add	sp, #24
 800552a:	bd80      	pop	{r7, pc}
 800552c:	08005d01 	.word	0x08005d01
 8005530:	08005dab 	.word	0x08005dab
 8005534:	08005c6d 	.word	0x08005c6d
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800
 8005548:	40000400 	.word	0x40000400

0800554c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e090      	b.n	8005682 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	223d      	movs	r2, #61	; 0x3d
 8005564:	5c9b      	ldrb	r3, [r3, r2]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	223c      	movs	r2, #60	; 0x3c
 8005570:	2100      	movs	r1, #0
 8005572:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	0018      	movs	r0, r3
 8005578:	f7fd fabc 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	223d      	movs	r2, #61	; 0x3d
 8005580:	2102      	movs	r1, #2
 8005582:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	493f      	ldr	r1, [pc, #252]	; (800568c <HAL_TIM_Encoder_Init+0x140>)
 8005590:	400a      	ands	r2, r1
 8005592:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	0019      	movs	r1, r3
 800559e:	0010      	movs	r0, r2
 80055a0:	f000 fc38 	bl	8005e14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4a31      	ldr	r2, [pc, #196]	; (8005690 <HAL_TIM_Encoder_Init+0x144>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	4313      	orrs	r3, r2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <HAL_TIM_Encoder_Init+0x148>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <HAL_TIM_Encoder_Init+0x14c>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	4313      	orrs	r3, r2
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	011a      	lsls	r2, r3, #4
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	4313      	orrs	r3, r2
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2222      	movs	r2, #34	; 0x22
 800561a:	4393      	bics	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2288      	movs	r2, #136	; 0x88
 8005622:	4393      	bics	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	4313      	orrs	r3, r2
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2246      	movs	r2, #70	; 0x46
 8005654:	2101      	movs	r1, #1
 8005656:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	223e      	movs	r2, #62	; 0x3e
 800565c:	2101      	movs	r1, #1
 800565e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	223f      	movs	r2, #63	; 0x3f
 8005664:	2101      	movs	r1, #1
 8005666:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2242      	movs	r2, #66	; 0x42
 800566c:	2101      	movs	r1, #1
 800566e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2243      	movs	r2, #67	; 0x43
 8005674:	2101      	movs	r1, #1
 8005676:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	223d      	movs	r2, #61	; 0x3d
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b006      	add	sp, #24
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	ffffbff8 	.word	0xffffbff8
 8005690:	fffffcfc 	.word	0xfffffcfc
 8005694:	fffff3f3 	.word	0xfffff3f3
 8005698:	ffff0f0f 	.word	0xffff0f0f

0800569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2202      	movs	r2, #2
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d124      	bne.n	80056fc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2202      	movs	r2, #2
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d11d      	bne.n	80056fc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2203      	movs	r2, #3
 80056c6:	4252      	negs	r2, r2
 80056c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2203      	movs	r2, #3
 80056d8:	4013      	ands	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0018      	movs	r0, r3
 80056e0:	f000 fa9c 	bl	8005c1c <HAL_TIM_IC_CaptureCallback>
 80056e4:	e007      	b.n	80056f6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fa8f 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f000 fa9b 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2204      	movs	r2, #4
 8005704:	4013      	ands	r3, r2
 8005706:	2b04      	cmp	r3, #4
 8005708:	d125      	bne.n	8005756 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2204      	movs	r2, #4
 8005712:	4013      	ands	r3, r2
 8005714:	2b04      	cmp	r3, #4
 8005716:	d11e      	bne.n	8005756 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2205      	movs	r2, #5
 800571e:	4252      	negs	r2, r2
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	23c0      	movs	r3, #192	; 0xc0
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4013      	ands	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 fa6f 	bl	8005c1c <HAL_TIM_IC_CaptureCallback>
 800573e:	e007      	b.n	8005750 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f000 fa62 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	0018      	movs	r0, r3
 800574c:	f000 fa6e 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2208      	movs	r2, #8
 800575e:	4013      	ands	r3, r2
 8005760:	2b08      	cmp	r3, #8
 8005762:	d124      	bne.n	80057ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2208      	movs	r2, #8
 800576c:	4013      	ands	r3, r2
 800576e:	2b08      	cmp	r3, #8
 8005770:	d11d      	bne.n	80057ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2209      	movs	r2, #9
 8005778:	4252      	negs	r2, r2
 800577a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	2203      	movs	r2, #3
 800578a:	4013      	ands	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 fa43 	bl	8005c1c <HAL_TIM_IC_CaptureCallback>
 8005796:	e007      	b.n	80057a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fa36 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 fa42 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2210      	movs	r2, #16
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d125      	bne.n	8005808 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2210      	movs	r2, #16
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d11e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2211      	movs	r2, #17
 80057d0:	4252      	negs	r2, r2
 80057d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2208      	movs	r2, #8
 80057d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	23c0      	movs	r3, #192	; 0xc0
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 fa16 	bl	8005c1c <HAL_TIM_IC_CaptureCallback>
 80057f0:	e007      	b.n	8005802 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 fa09 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 fa15 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2201      	movs	r2, #1
 8005810:	4013      	ands	r3, r2
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10f      	bne.n	8005836 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	4013      	ands	r3, r2
 8005820:	2b01      	cmp	r3, #1
 8005822:	d108      	bne.n	8005836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2202      	movs	r2, #2
 800582a:	4252      	negs	r2, r2
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	0018      	movs	r0, r3
 8005832:	f000 f9e3 	bl	8005bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	4013      	ands	r3, r2
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	d10f      	bne.n	8005864 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	4013      	ands	r3, r2
 800584e:	2b80      	cmp	r3, #128	; 0x80
 8005850:	d108      	bne.n	8005864 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2281      	movs	r2, #129	; 0x81
 8005858:	4252      	negs	r2, r2
 800585a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 fed6 	bl	8006610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	4013      	ands	r3, r2
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d10f      	bne.n	8005892 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	4013      	ands	r3, r2
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d108      	bne.n	8005892 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2241      	movs	r2, #65	; 0x41
 8005886:	4252      	negs	r2, r2
 8005888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 f9dd 	bl	8005c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2220      	movs	r2, #32
 800589a:	4013      	ands	r3, r2
 800589c:	2b20      	cmp	r3, #32
 800589e:	d10f      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d108      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2221      	movs	r2, #33	; 0x21
 80058b4:	4252      	negs	r2, r2
 80058b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 fea0 	bl	8006600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2317      	movs	r3, #23
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	223c      	movs	r2, #60	; 0x3c
 80058e0:	5c9b      	ldrb	r3, [r3, r2]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e0ad      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	223c      	movs	r2, #60	; 0x3c
 80058ee:	2101      	movs	r1, #1
 80058f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	d100      	bne.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80058f8:	e076      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d900      	bls.n	8005902 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005900:	e095      	b.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d04e      	beq.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d900      	bls.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x48>
 800590e:	e08e      	b.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_TIM_PWM_ConfigChannel+0x56>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d021      	beq.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x98>
 800591c:	e087      	b.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0011      	movs	r1, r2
 8005926:	0018      	movs	r0, r3
 8005928:	f000 faf4 	bl	8005f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2108      	movs	r1, #8
 8005938:	430a      	orrs	r2, r1
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2104      	movs	r1, #4
 8005948:	438a      	bics	r2, r1
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
      break;
 800595e:	e06b      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f000 fb5b 	bl	8006024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	0109      	lsls	r1, r1, #4
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4931      	ldr	r1, [pc, #196]	; (8005a50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800598c:	400a      	ands	r2, r1
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
      break;
 80059a4:	e048      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	0011      	movs	r1, r2
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 fbbc 	bl	800612c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2108      	movs	r1, #8
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2104      	movs	r1, #4
 80059d0:	438a      	bics	r2, r1
 80059d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69d9      	ldr	r1, [r3, #28]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	61da      	str	r2, [r3, #28]
      break;
 80059e6:	e027      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 fc21 	bl	8006238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	0109      	lsls	r1, r1, #4
 8005a04:	430a      	orrs	r2, r1
 8005a06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	490f      	ldr	r1, [pc, #60]	; (8005a50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69d9      	ldr	r1, [r3, #28]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	61da      	str	r2, [r3, #28]
      break;
 8005a2c:	e004      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005a2e:	2317      	movs	r3, #23
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2201      	movs	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
      break;
 8005a36:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	223c      	movs	r2, #60	; 0x3c
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

  return status;
 8005a40:	2317      	movs	r3, #23
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	781b      	ldrb	r3, [r3, #0]
}
 8005a46:	0018      	movs	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b006      	add	sp, #24
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	fffffbff 	.word	0xfffffbff

08005a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	230f      	movs	r3, #15
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	223c      	movs	r2, #60	; 0x3c
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIM_ConfigClockSource+0x20>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e0bc      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x19a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	223c      	movs	r2, #60	; 0x3c
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	223d      	movs	r2, #61	; 0x3d
 8005a80:	2102      	movs	r1, #2
 8005a82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2277      	movs	r2, #119	; 0x77
 8005a90:	4393      	bics	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4a58      	ldr	r2, [pc, #352]	; (8005bf8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	0192      	lsls	r2, r2, #6
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d040      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0xde>
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	0192      	lsls	r2, r2, #6
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d900      	bls.n	8005aba <HAL_TIM_ConfigClockSource+0x66>
 8005ab8:	e088      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	0152      	lsls	r2, r2, #5
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d100      	bne.n	8005ac4 <HAL_TIM_ConfigClockSource+0x70>
 8005ac2:	e088      	b.n	8005bd6 <HAL_TIM_ConfigClockSource+0x182>
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	0152      	lsls	r2, r2, #5
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d900      	bls.n	8005ace <HAL_TIM_ConfigClockSource+0x7a>
 8005acc:	e07e      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005ace:	2b70      	cmp	r3, #112	; 0x70
 8005ad0:	d018      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0xb0>
 8005ad2:	d900      	bls.n	8005ad6 <HAL_TIM_ConfigClockSource+0x82>
 8005ad4:	e07a      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005ad6:	2b60      	cmp	r3, #96	; 0x60
 8005ad8:	d04f      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x126>
 8005ada:	d900      	bls.n	8005ade <HAL_TIM_ConfigClockSource+0x8a>
 8005adc:	e076      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005ade:	2b50      	cmp	r3, #80	; 0x50
 8005ae0:	d03b      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x106>
 8005ae2:	d900      	bls.n	8005ae6 <HAL_TIM_ConfigClockSource+0x92>
 8005ae4:	e072      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d057      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x146>
 8005aea:	d900      	bls.n	8005aee <HAL_TIM_ConfigClockSource+0x9a>
 8005aec:	e06e      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005aee:	2b30      	cmp	r3, #48	; 0x30
 8005af0:	d063      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x166>
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x166>
 8005af8:	d868      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d05d      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x166>
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d05b      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x166>
 8005b02:	e063      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6899      	ldr	r1, [r3, #8]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f000 fc74 	bl	8006400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2277      	movs	r2, #119	; 0x77
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	609a      	str	r2, [r3, #8]
      break;
 8005b30:	e052      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6899      	ldr	r1, [r3, #8]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f000 fc5d 	bl	8006400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2180      	movs	r1, #128	; 0x80
 8005b52:	01c9      	lsls	r1, r1, #7
 8005b54:	430a      	orrs	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03e      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	001a      	movs	r2, r3
 8005b68:	f000 fbd0 	bl	800630c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	; 0x50
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 fc2a 	bl	80063cc <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02e      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	001a      	movs	r2, r3
 8005b88:	f000 fbee 	bl	8006368 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	; 0x60
 8005b92:	0018      	movs	r0, r3
 8005b94:	f000 fc1a 	bl	80063cc <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01e      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	f000 fbb0 	bl	800630c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fc0a 	bl	80063cc <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00e      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	0010      	movs	r0, r2
 8005bc6:	f000 fc01 	bl	80063cc <TIM_ITRx_SetConfig>
      break;
 8005bca:	e005      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	230f      	movs	r3, #15
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
      break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005bd6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	223d      	movs	r2, #61	; 0x3d
 8005bdc:	2101      	movs	r1, #1
 8005bde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	223c      	movs	r2, #60	; 0x3c
 8005be4:	2100      	movs	r1, #0
 8005be6:	5499      	strb	r1, [r3, r2]

  return status;
 8005be8:	230f      	movs	r3, #15
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	781b      	ldrb	r3, [r3, #0]
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b004      	add	sp, #16
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	ffff00ff 	.word	0xffff00ff

08005bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d107      	bne.n	8005c94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	223e      	movs	r2, #62	; 0x3e
 8005c8e:	2101      	movs	r1, #1
 8005c90:	5499      	strb	r1, [r3, r2]
 8005c92:	e02a      	b.n	8005cea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d107      	bne.n	8005cae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	223f      	movs	r2, #63	; 0x3f
 8005ca8:	2101      	movs	r1, #1
 8005caa:	5499      	strb	r1, [r3, r2]
 8005cac:	e01d      	b.n	8005cea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d107      	bne.n	8005cc8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2240      	movs	r2, #64	; 0x40
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	5499      	strb	r1, [r3, r2]
 8005cc6:	e010      	b.n	8005cea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d107      	bne.n	8005ce2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2241      	movs	r2, #65	; 0x41
 8005cdc:	2101      	movs	r1, #1
 8005cde:	5499      	strb	r1, [r3, r2]
 8005ce0:	e003      	b.n	8005cea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	223d      	movs	r2, #61	; 0x3d
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7ff ffb5 	bl	8005c5c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
}
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b004      	add	sp, #16
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d10b      	bne.n	8005d30 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d136      	bne.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	223e      	movs	r2, #62	; 0x3e
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	5499      	strb	r1, [r3, r2]
 8005d2e:	e031      	b.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d10b      	bne.n	8005d52 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d125      	bne.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	223f      	movs	r2, #63	; 0x3f
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	5499      	strb	r1, [r3, r2]
 8005d50:	e020      	b.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d10b      	bne.n	8005d74 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d114      	bne.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2240      	movs	r2, #64	; 0x40
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]
 8005d72:	e00f      	b.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d10a      	bne.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2208      	movs	r2, #8
 8005d82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2241      	movs	r2, #65	; 0x41
 8005d90:	2101      	movs	r1, #1
 8005d92:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7ff ff48 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	771a      	strb	r2, [r3, #28]
}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}

08005daa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d103      	bne.n	8005dca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	771a      	strb	r2, [r3, #28]
 8005dc8:	e019      	b.n	8005dfe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d103      	bne.n	8005ddc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	771a      	strb	r2, [r3, #28]
 8005dda:	e010      	b.n	8005dfe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d103      	bne.n	8005dee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2204      	movs	r2, #4
 8005dea:	771a      	strb	r2, [r3, #28]
 8005dec:	e007      	b.n	8005dfe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d102      	bne.n	8005dfe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7ff ff1b 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b004      	add	sp, #16
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a34      	ldr	r2, [pc, #208]	; (8005ef8 <TIM_Base_SetConfig+0xe4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d008      	beq.n	8005e3e <TIM_Base_SetConfig+0x2a>
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	05db      	lsls	r3, r3, #23
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0x2a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a30      	ldr	r2, [pc, #192]	; (8005efc <TIM_Base_SetConfig+0xe8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2270      	movs	r2, #112	; 0x70
 8005e42:	4393      	bics	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a29      	ldr	r2, [pc, #164]	; (8005ef8 <TIM_Base_SetConfig+0xe4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <TIM_Base_SetConfig+0x76>
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	05db      	lsls	r3, r3, #23
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d013      	beq.n	8005e8a <TIM_Base_SetConfig+0x76>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <TIM_Base_SetConfig+0xe8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00f      	beq.n	8005e8a <TIM_Base_SetConfig+0x76>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <TIM_Base_SetConfig+0xec>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <TIM_Base_SetConfig+0x76>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <TIM_Base_SetConfig+0xf0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d007      	beq.n	8005e8a <TIM_Base_SetConfig+0x76>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <TIM_Base_SetConfig+0xf4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_Base_SetConfig+0x76>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <TIM_Base_SetConfig+0xf8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <TIM_Base_SetConfig+0xfc>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2280      	movs	r2, #128	; 0x80
 8005ea0:	4393      	bics	r3, r2
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <TIM_Base_SetConfig+0xe4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_Base_SetConfig+0xce>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <TIM_Base_SetConfig+0xf0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_Base_SetConfig+0xce>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <TIM_Base_SetConfig+0xf4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_Base_SetConfig+0xce>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <TIM_Base_SetConfig+0xf8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d103      	bne.n	8005eea <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	615a      	str	r2, [r3, #20]
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b004      	add	sp, #16
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40002000 	.word	0x40002000
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800
 8005f10:	fffffcff 	.word	0xfffffcff

08005f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	2201      	movs	r2, #1
 8005f24:	4393      	bics	r3, r2
 8005f26:	001a      	movs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2270      	movs	r2, #112	; 0x70
 8005f42:	4393      	bics	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a27      	ldr	r2, [pc, #156]	; (800600c <TIM_OC1_SetConfig+0xf8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_OC1_SetConfig+0x76>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a26      	ldr	r2, [pc, #152]	; (8006010 <TIM_OC1_SetConfig+0xfc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_OC1_SetConfig+0x76>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a25      	ldr	r2, [pc, #148]	; (8006014 <TIM_OC1_SetConfig+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_OC1_SetConfig+0x76>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a24      	ldr	r2, [pc, #144]	; (8006018 <TIM_OC1_SetConfig+0x104>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d10c      	bne.n	8005fa4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	4393      	bics	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a19      	ldr	r2, [pc, #100]	; (800600c <TIM_OC1_SetConfig+0xf8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00b      	beq.n	8005fc4 <TIM_OC1_SetConfig+0xb0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a18      	ldr	r2, [pc, #96]	; (8006010 <TIM_OC1_SetConfig+0xfc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d007      	beq.n	8005fc4 <TIM_OC1_SetConfig+0xb0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <TIM_OC1_SetConfig+0x100>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_OC1_SetConfig+0xb0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a16      	ldr	r2, [pc, #88]	; (8006018 <TIM_OC1_SetConfig+0x104>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	; (800601c <TIM_OC1_SetConfig+0x108>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4a14      	ldr	r2, [pc, #80]	; (8006020 <TIM_OC1_SetConfig+0x10c>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	b006      	add	sp, #24
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800
 800601c:	fffffeff 	.word	0xfffffeff
 8006020:	fffffdff 	.word	0xfffffdff

08006024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	2210      	movs	r2, #16
 8006034:	4393      	bics	r3, r2
 8006036:	001a      	movs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a2e      	ldr	r2, [pc, #184]	; (800610c <TIM_OC2_SetConfig+0xe8>)
 8006052:	4013      	ands	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a2d      	ldr	r2, [pc, #180]	; (8006110 <TIM_OC2_SetConfig+0xec>)
 800605a:	4013      	ands	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2220      	movs	r2, #32
 800606e:	4393      	bics	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a24      	ldr	r2, [pc, #144]	; (8006114 <TIM_OC2_SetConfig+0xf0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10d      	bne.n	80060a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	4393      	bics	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2240      	movs	r2, #64	; 0x40
 800609e:	4393      	bics	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <TIM_OC2_SetConfig+0xf0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00b      	beq.n	80060c2 <TIM_OC2_SetConfig+0x9e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <TIM_OC2_SetConfig+0xf4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <TIM_OC2_SetConfig+0x9e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <TIM_OC2_SetConfig+0xf8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC2_SetConfig+0x9e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a18      	ldr	r2, [pc, #96]	; (8006120 <TIM_OC2_SetConfig+0xfc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d113      	bne.n	80060ea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4a17      	ldr	r2, [pc, #92]	; (8006124 <TIM_OC2_SetConfig+0x100>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4a16      	ldr	r2, [pc, #88]	; (8006128 <TIM_OC2_SetConfig+0x104>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b006      	add	sp, #24
 800610a:	bd80      	pop	{r7, pc}
 800610c:	ffff8fff 	.word	0xffff8fff
 8006110:	fffffcff 	.word	0xfffffcff
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800
 8006124:	fffffbff 	.word	0xfffffbff
 8006128:	fffff7ff 	.word	0xfffff7ff

0800612c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4a35      	ldr	r2, [pc, #212]	; (8006210 <TIM_OC3_SetConfig+0xe4>)
 800613c:	401a      	ands	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2270      	movs	r2, #112	; 0x70
 8006158:	4393      	bics	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2203      	movs	r2, #3
 8006160:	4393      	bics	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4a28      	ldr	r2, [pc, #160]	; (8006214 <TIM_OC3_SetConfig+0xe8>)
 8006172:	4013      	ands	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a24      	ldr	r2, [pc, #144]	; (8006218 <TIM_OC3_SetConfig+0xec>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10d      	bne.n	80061a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4a23      	ldr	r2, [pc, #140]	; (800621c <TIM_OC3_SetConfig+0xf0>)
 800618e:	4013      	ands	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4a1f      	ldr	r2, [pc, #124]	; (8006220 <TIM_OC3_SetConfig+0xf4>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <TIM_OC3_SetConfig+0xec>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00b      	beq.n	80061c6 <TIM_OC3_SetConfig+0x9a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_OC3_SetConfig+0xf8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d007      	beq.n	80061c6 <TIM_OC3_SetConfig+0x9a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <TIM_OC3_SetConfig+0xfc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <TIM_OC3_SetConfig+0x9a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <TIM_OC3_SetConfig+0x100>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d113      	bne.n	80061ee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <TIM_OC3_SetConfig+0x104>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4a18      	ldr	r2, [pc, #96]	; (8006234 <TIM_OC3_SetConfig+0x108>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	46c0      	nop			; (mov r8, r8)
 800620a:	46bd      	mov	sp, r7
 800620c:	b006      	add	sp, #24
 800620e:	bd80      	pop	{r7, pc}
 8006210:	fffffeff 	.word	0xfffffeff
 8006214:	fffffdff 	.word	0xfffffdff
 8006218:	40012c00 	.word	0x40012c00
 800621c:	fffff7ff 	.word	0xfffff7ff
 8006220:	fffffbff 	.word	0xfffffbff
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800
 8006230:	ffffefff 	.word	0xffffefff
 8006234:	ffffdfff 	.word	0xffffdfff

08006238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <TIM_OC4_SetConfig+0xb0>)
 8006248:	401a      	ands	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a22      	ldr	r2, [pc, #136]	; (80062ec <TIM_OC4_SetConfig+0xb4>)
 8006264:	4013      	ands	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <TIM_OC4_SetConfig+0xb8>)
 800626c:	4013      	ands	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <TIM_OC4_SetConfig+0xbc>)
 8006280:	4013      	ands	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	031b      	lsls	r3, r3, #12
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <TIM_OC4_SetConfig+0xc0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_OC4_SetConfig+0x78>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <TIM_OC4_SetConfig+0xc4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_OC4_SetConfig+0x78>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <TIM_OC4_SetConfig+0xc8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC4_SetConfig+0x78>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a16      	ldr	r2, [pc, #88]	; (8006304 <TIM_OC4_SetConfig+0xcc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d109      	bne.n	80062c4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4a15      	ldr	r2, [pc, #84]	; (8006308 <TIM_OC4_SetConfig+0xd0>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	019b      	lsls	r3, r3, #6
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b006      	add	sp, #24
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	ffffefff 	.word	0xffffefff
 80062ec:	ffff8fff 	.word	0xffff8fff
 80062f0:	fffffcff 	.word	0xfffffcff
 80062f4:	ffffdfff 	.word	0xffffdfff
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800
 8006308:	ffffbfff 	.word	0xffffbfff

0800630c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	2201      	movs	r2, #1
 8006324:	4393      	bics	r3, r2
 8006326:	001a      	movs	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	22f0      	movs	r2, #240	; 0xf0
 8006336:	4393      	bics	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	220a      	movs	r2, #10
 8006348:	4393      	bics	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b006      	add	sp, #24
 8006366:	bd80      	pop	{r7, pc}

08006368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	2210      	movs	r2, #16
 800637a:	4393      	bics	r3, r2
 800637c:	001a      	movs	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <TIM_TI2_ConfigInputStage+0x60>)
 8006392:	4013      	ands	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	031b      	lsls	r3, r3, #12
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	22a0      	movs	r2, #160	; 0xa0
 80063a4:	4393      	bics	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b006      	add	sp, #24
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	ffff0fff 	.word	0xffff0fff

080063cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2270      	movs	r2, #112	; 0x70
 80063e0:	4393      	bics	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	2207      	movs	r2, #7
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	609a      	str	r2, [r3, #8]
}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b004      	add	sp, #16
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <TIM_ETR_SetConfig+0x3c>)
 8006418:	4013      	ands	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	021a      	lsls	r2, r3, #8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	431a      	orrs	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4313      	orrs	r3, r2
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b006      	add	sp, #24
 800643a:	bd80      	pop	{r7, pc}
 800643c:	ffff00ff 	.word	0xffff00ff

08006440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	221f      	movs	r2, #31
 8006450:	4013      	ands	r3, r2
 8006452:	2201      	movs	r2, #1
 8006454:	409a      	lsls	r2, r3
 8006456:	0013      	movs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	43d2      	mvns	r2, r2
 8006462:	401a      	ands	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	211f      	movs	r1, #31
 8006470:	400b      	ands	r3, r1
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4099      	lsls	r1, r3
 8006476:	000b      	movs	r3, r1
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	b006      	add	sp, #24
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	223c      	movs	r2, #60	; 0x3c
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800649c:	2302      	movs	r3, #2
 800649e:	e047      	b.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	223c      	movs	r2, #60	; 0x3c
 80064a4:	2101      	movs	r1, #1
 80064a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	223d      	movs	r2, #61	; 0x3d
 80064ac:	2102      	movs	r1, #2
 80064ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2270      	movs	r2, #112	; 0x70
 80064c4:	4393      	bics	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a16      	ldr	r2, [pc, #88]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00f      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	05db      	lsls	r3, r3, #23
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d009      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a10      	ldr	r2, [pc, #64]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10c      	bne.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2280      	movs	r2, #128	; 0x80
 8006508:	4393      	bics	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	4313      	orrs	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	223d      	movs	r2, #61	; 0x3d
 8006522:	2101      	movs	r1, #1
 8006524:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	223c      	movs	r2, #60	; 0x3c
 800652a:	2100      	movs	r1, #0
 800652c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40014000 	.word	0x40014000

08006544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	223c      	movs	r2, #60	; 0x3c
 8006556:	5c9b      	ldrb	r3, [r3, r2]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800655c:	2302      	movs	r3, #2
 800655e:	e03e      	b.n	80065de <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	223c      	movs	r2, #60	; 0x3c
 8006564:	2101      	movs	r1, #1
 8006566:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	22ff      	movs	r2, #255	; 0xff
 800656c:	4393      	bics	r3, r2
 800656e:	001a      	movs	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800657c:	401a      	ands	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a18      	ldr	r2, [pc, #96]	; (80065ec <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800658a:	401a      	ands	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006598:	401a      	ands	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80065a6:	401a      	ands	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a11      	ldr	r2, [pc, #68]	; (80065f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80065b4:	401a      	ands	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80065c2:	401a      	ands	r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	223c      	movs	r2, #60	; 0x3c
 80065d8:	2100      	movs	r1, #0
 80065da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b004      	add	sp, #16
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	fffffcff 	.word	0xfffffcff
 80065ec:	fffffbff 	.word	0xfffffbff
 80065f0:	fffff7ff 	.word	0xfffff7ff
 80065f4:	ffffefff 	.word	0xffffefff
 80065f8:	ffffdfff 	.word	0xffffdfff
 80065fc:	ffffbfff 	.word	0xffffbfff

08006600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006608:	46c0      	nop			; (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b002      	add	sp, #8
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	46bd      	mov	sp, r7
 800661c:	b002      	add	sp, #8
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e044      	b.n	80066bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006636:	2b00      	cmp	r3, #0
 8006638:	d107      	bne.n	800664a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2274      	movs	r2, #116	; 0x74
 800663e:	2100      	movs	r1, #0
 8006640:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0018      	movs	r0, r3
 8006646:	f7fc fbd1 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2224      	movs	r2, #36	; 0x24
 800664e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2101      	movs	r1, #1
 800665c:	438a      	bics	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0018      	movs	r0, r3
 8006664:	f000 fbce 	bl	8006e04 <UART_SetConfig>
 8006668:	0003      	movs	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e024      	b.n	80066bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0018      	movs	r0, r3
 800667e:	f000 fd49 	bl	8007114 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	490d      	ldr	r1, [pc, #52]	; (80066c4 <HAL_UART_Init+0xa4>)
 800668e:	400a      	ands	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	212a      	movs	r1, #42	; 0x2a
 800669e:	438a      	bics	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2101      	movs	r1, #1
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 fde1 	bl	800727c <UART_CheckIdleState>
 80066ba:	0003      	movs	r3, r0
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b002      	add	sp, #8
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	ffffb7ff 	.word	0xffffb7ff

080066c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	1dbb      	adds	r3, r7, #6
 80066d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d000      	beq.n	80066e2 <HAL_UART_Transmit+0x1a>
 80066e0:	e096      	b.n	8006810 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_UART_Transmit+0x28>
 80066e8:	1dbb      	adds	r3, r7, #6
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e08e      	b.n	8006812 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	015b      	lsls	r3, r3, #5
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d109      	bne.n	8006714 <HAL_UART_Transmit+0x4c>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2201      	movs	r2, #1
 800670c:	4013      	ands	r3, r2
 800670e:	d001      	beq.n	8006714 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e07e      	b.n	8006812 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2274      	movs	r2, #116	; 0x74
 8006718:	5c9b      	ldrb	r3, [r3, r2]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Transmit+0x5a>
 800671e:	2302      	movs	r3, #2
 8006720:	e077      	b.n	8006812 <HAL_UART_Transmit+0x14a>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2274      	movs	r2, #116	; 0x74
 8006726:	2101      	movs	r1, #1
 8006728:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	2100      	movs	r1, #0
 8006730:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2221      	movs	r2, #33	; 0x21
 8006736:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006738:	f7fc fd68 	bl	800320c <HAL_GetTick>
 800673c:	0003      	movs	r3, r0
 800673e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	1dba      	adds	r2, r7, #6
 8006744:	2150      	movs	r1, #80	; 0x50
 8006746:	8812      	ldrh	r2, [r2, #0]
 8006748:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1dba      	adds	r2, r7, #6
 800674e:	2152      	movs	r1, #82	; 0x52
 8006750:	8812      	ldrh	r2, [r2, #0]
 8006752:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	2380      	movs	r3, #128	; 0x80
 800675a:	015b      	lsls	r3, r3, #5
 800675c:	429a      	cmp	r2, r3
 800675e:	d108      	bne.n	8006772 <HAL_UART_Transmit+0xaa>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	e003      	b.n	800677a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2274      	movs	r2, #116	; 0x74
 800677e:	2100      	movs	r1, #0
 8006780:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006782:	e02d      	b.n	80067e0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	0013      	movs	r3, r2
 800678e:	2200      	movs	r2, #0
 8006790:	2180      	movs	r1, #128	; 0x80
 8006792:	f000 fdbb 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 8006796:	1e03      	subs	r3, r0, #0
 8006798:	d001      	beq.n	800679e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e039      	b.n	8006812 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10b      	bne.n	80067bc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	881a      	ldrh	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	05d2      	lsls	r2, r2, #23
 80067ae:	0dd2      	lsrs	r2, r2, #23
 80067b0:	b292      	uxth	r2, r2
 80067b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	3302      	adds	r3, #2
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e008      	b.n	80067ce <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	781a      	ldrb	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b292      	uxth	r2, r2
 80067c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2252      	movs	r2, #82	; 0x52
 80067d2:	5a9b      	ldrh	r3, [r3, r2]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b299      	uxth	r1, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2252      	movs	r2, #82	; 0x52
 80067de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2252      	movs	r2, #82	; 0x52
 80067e4:	5a9b      	ldrh	r3, [r3, r2]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1cb      	bne.n	8006784 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	0013      	movs	r3, r2
 80067f6:	2200      	movs	r2, #0
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	f000 fd87 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 80067fe:	1e03      	subs	r3, r0, #0
 8006800:	d001      	beq.n	8006806 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e005      	b.n	8006812 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e000      	b.n	8006812 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006810:	2302      	movs	r3, #2
  }
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b008      	add	sp, #32
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b0ab      	sub	sp, #172	; 0xac
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	22a4      	movs	r2, #164	; 0xa4
 800682c:	18b9      	adds	r1, r7, r2
 800682e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	20a0      	movs	r0, #160	; 0xa0
 8006838:	1839      	adds	r1, r7, r0
 800683a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	219c      	movs	r1, #156	; 0x9c
 8006844:	1879      	adds	r1, r7, r1
 8006846:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006848:	0011      	movs	r1, r2
 800684a:	18bb      	adds	r3, r7, r2
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a99      	ldr	r2, [pc, #612]	; (8006ab4 <HAL_UART_IRQHandler+0x298>)
 8006850:	4013      	ands	r3, r2
 8006852:	2298      	movs	r2, #152	; 0x98
 8006854:	18bc      	adds	r4, r7, r2
 8006856:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006858:	18bb      	adds	r3, r7, r2
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d114      	bne.n	800688a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006860:	187b      	adds	r3, r7, r1
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2220      	movs	r2, #32
 8006866:	4013      	ands	r3, r2
 8006868:	d00f      	beq.n	800688a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800686a:	183b      	adds	r3, r7, r0
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2220      	movs	r2, #32
 8006870:	4013      	ands	r3, r2
 8006872:	d00a      	beq.n	800688a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006878:	2b00      	cmp	r3, #0
 800687a:	d100      	bne.n	800687e <HAL_UART_IRQHandler+0x62>
 800687c:	e296      	b.n	8006dac <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	0010      	movs	r0, r2
 8006886:	4798      	blx	r3
      }
      return;
 8006888:	e290      	b.n	8006dac <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800688a:	2398      	movs	r3, #152	; 0x98
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d100      	bne.n	8006896 <HAL_UART_IRQHandler+0x7a>
 8006894:	e114      	b.n	8006ac0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006896:	239c      	movs	r3, #156	; 0x9c
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	4013      	ands	r3, r2
 80068a0:	d106      	bne.n	80068b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068a2:	23a0      	movs	r3, #160	; 0xa0
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a83      	ldr	r2, [pc, #524]	; (8006ab8 <HAL_UART_IRQHandler+0x29c>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	d100      	bne.n	80068b0 <HAL_UART_IRQHandler+0x94>
 80068ae:	e107      	b.n	8006ac0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068b0:	23a4      	movs	r3, #164	; 0xa4
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2201      	movs	r2, #1
 80068b8:	4013      	ands	r3, r2
 80068ba:	d012      	beq.n	80068e2 <HAL_UART_IRQHandler+0xc6>
 80068bc:	23a0      	movs	r3, #160	; 0xa0
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2201      	movs	r2, #1
 80068d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	589b      	ldr	r3, [r3, r2]
 80068d8:	2201      	movs	r2, #1
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2180      	movs	r1, #128	; 0x80
 80068e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e2:	23a4      	movs	r3, #164	; 0xa4
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2202      	movs	r2, #2
 80068ea:	4013      	ands	r3, r2
 80068ec:	d011      	beq.n	8006912 <HAL_UART_IRQHandler+0xf6>
 80068ee:	239c      	movs	r3, #156	; 0x9c
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	4013      	ands	r3, r2
 80068f8:	d00b      	beq.n	8006912 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2202      	movs	r2, #2
 8006900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2280      	movs	r2, #128	; 0x80
 8006906:	589b      	ldr	r3, [r3, r2]
 8006908:	2204      	movs	r2, #4
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006912:	23a4      	movs	r3, #164	; 0xa4
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2204      	movs	r2, #4
 800691a:	4013      	ands	r3, r2
 800691c:	d011      	beq.n	8006942 <HAL_UART_IRQHandler+0x126>
 800691e:	239c      	movs	r3, #156	; 0x9c
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	4013      	ands	r3, r2
 8006928:	d00b      	beq.n	8006942 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2204      	movs	r2, #4
 8006930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2280      	movs	r2, #128	; 0x80
 8006936:	589b      	ldr	r3, [r3, r2]
 8006938:	2202      	movs	r2, #2
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006942:	23a4      	movs	r3, #164	; 0xa4
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2208      	movs	r2, #8
 800694a:	4013      	ands	r3, r2
 800694c:	d017      	beq.n	800697e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800694e:	23a0      	movs	r3, #160	; 0xa0
 8006950:	18fb      	adds	r3, r7, r3
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2220      	movs	r2, #32
 8006956:	4013      	ands	r3, r2
 8006958:	d105      	bne.n	8006966 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800695a:	239c      	movs	r3, #156	; 0x9c
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2201      	movs	r2, #1
 8006962:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006964:	d00b      	beq.n	800697e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2208      	movs	r2, #8
 800696c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2280      	movs	r2, #128	; 0x80
 8006972:	589b      	ldr	r3, [r3, r2]
 8006974:	2208      	movs	r2, #8
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2180      	movs	r1, #128	; 0x80
 800697c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800697e:	23a4      	movs	r3, #164	; 0xa4
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	2380      	movs	r3, #128	; 0x80
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	4013      	ands	r3, r2
 800698a:	d013      	beq.n	80069b4 <HAL_UART_IRQHandler+0x198>
 800698c:	23a0      	movs	r3, #160	; 0xa0
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	04db      	lsls	r3, r3, #19
 8006996:	4013      	ands	r3, r2
 8006998:	d00c      	beq.n	80069b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2280      	movs	r2, #128	; 0x80
 80069a0:	0112      	lsls	r2, r2, #4
 80069a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	589b      	ldr	r3, [r3, r2]
 80069aa:	2220      	movs	r2, #32
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2180      	movs	r1, #128	; 0x80
 80069b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2280      	movs	r2, #128	; 0x80
 80069b8:	589b      	ldr	r3, [r3, r2]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d100      	bne.n	80069c0 <HAL_UART_IRQHandler+0x1a4>
 80069be:	e1f7      	b.n	8006db0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069c0:	23a4      	movs	r3, #164	; 0xa4
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2220      	movs	r2, #32
 80069c8:	4013      	ands	r3, r2
 80069ca:	d00e      	beq.n	80069ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069cc:	23a0      	movs	r3, #160	; 0xa0
 80069ce:	18fb      	adds	r3, r7, r3
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2220      	movs	r2, #32
 80069d4:	4013      	ands	r3, r2
 80069d6:	d008      	beq.n	80069ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	0010      	movs	r0, r2
 80069e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2280      	movs	r2, #128	; 0x80
 80069ee:	589b      	ldr	r3, [r3, r2]
 80069f0:	2194      	movs	r1, #148	; 0x94
 80069f2:	187a      	adds	r2, r7, r1
 80069f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2240      	movs	r2, #64	; 0x40
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b40      	cmp	r3, #64	; 0x40
 8006a02:	d004      	beq.n	8006a0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a04:	187b      	adds	r3, r7, r1
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2228      	movs	r2, #40	; 0x28
 8006a0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a0c:	d047      	beq.n	8006a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f000 fd3f 	bl	8007494 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d137      	bne.n	8006a94 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a24:	f3ef 8310 	mrs	r3, PRIMASK
 8006a28:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2c:	2090      	movs	r0, #144	; 0x90
 8006a2e:	183a      	adds	r2, r7, r0
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	2301      	movs	r3, #1
 8006a34:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a38:	f383 8810 	msr	PRIMASK, r3
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2140      	movs	r1, #64	; 0x40
 8006a4a:	438a      	bics	r2, r1
 8006a4c:	609a      	str	r2, [r3, #8]
 8006a4e:	183b      	adds	r3, r7, r0
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a56:	f383 8810 	msr	PRIMASK, r3
}
 8006a5a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a68:	4a14      	ldr	r2, [pc, #80]	; (8006abc <HAL_UART_IRQHandler+0x2a0>)
 8006a6a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7fd f821 	bl	8003ab8 <HAL_DMA_Abort_IT>
 8006a76:	1e03      	subs	r3, r0, #0
 8006a78:	d01a      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	0018      	movs	r0, r3
 8006a86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	e012      	b.n	8006ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f000 f9a5 	bl	8006ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a92:	e00d      	b.n	8006ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	0018      	movs	r0, r3
 8006a98:	f000 f9a0 	bl	8006ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	e008      	b.n	8006ab0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 f99b 	bl	8006ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	2100      	movs	r1, #0
 8006aac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006aae:	e17f      	b.n	8006db0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	46c0      	nop			; (mov r8, r8)
    return;
 8006ab2:	e17d      	b.n	8006db0 <HAL_UART_IRQHandler+0x594>
 8006ab4:	0000080f 	.word	0x0000080f
 8006ab8:	04000120 	.word	0x04000120
 8006abc:	08007559 	.word	0x08007559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d000      	beq.n	8006aca <HAL_UART_IRQHandler+0x2ae>
 8006ac8:	e131      	b.n	8006d2e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006aca:	23a4      	movs	r3, #164	; 0xa4
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d100      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x2bc>
 8006ad6:	e12a      	b.n	8006d2e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ad8:	23a0      	movs	r3, #160	; 0xa0
 8006ada:	18fb      	adds	r3, r7, r3
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2210      	movs	r2, #16
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d100      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x2ca>
 8006ae4:	e123      	b.n	8006d2e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2210      	movs	r2, #16
 8006aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d000      	beq.n	8006afe <HAL_UART_IRQHandler+0x2e2>
 8006afc:	e09b      	b.n	8006c36 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	217e      	movs	r1, #126	; 0x7e
 8006b08:	187b      	adds	r3, r7, r1
 8006b0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006b0c:	187b      	adds	r3, r7, r1
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d100      	bne.n	8006b16 <HAL_UART_IRQHandler+0x2fa>
 8006b14:	e14e      	b.n	8006db4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2258      	movs	r2, #88	; 0x58
 8006b1a:	5a9b      	ldrh	r3, [r3, r2]
 8006b1c:	187a      	adds	r2, r7, r1
 8006b1e:	8812      	ldrh	r2, [r2, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d300      	bcc.n	8006b26 <HAL_UART_IRQHandler+0x30a>
 8006b24:	e146      	b.n	8006db4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	187a      	adds	r2, r7, r1
 8006b2a:	215a      	movs	r1, #90	; 0x5a
 8006b2c:	8812      	ldrh	r2, [r2, #0]
 8006b2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d06e      	beq.n	8006c18 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b44:	2301      	movs	r3, #1
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	f383 8810 	msr	PRIMASK, r3
}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	499a      	ldr	r1, [pc, #616]	; (8006dc4 <HAL_UART_IRQHandler+0x5a8>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f383 8810 	msr	PRIMASK, r3
}
 8006b6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	677b      	str	r3, [r7, #116]	; 0x74
 8006b76:	2301      	movs	r3, #1
 8006b78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	438a      	bics	r2, r1
 8006b90:	609a      	str	r2, [r3, #8]
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ba8:	2301      	movs	r3, #1
 8006baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	f383 8810 	msr	PRIMASK, r3
}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2140      	movs	r1, #64	; 0x40
 8006bc0:	438a      	bics	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]
 8006bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bca:	f383 8810 	msr	PRIMASK, r3
}
 8006bce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006be0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006be6:	2301      	movs	r3, #1
 8006be8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bec:	f383 8810 	msr	PRIMASK, r3
}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2110      	movs	r1, #16
 8006bfe:	438a      	bics	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7fc ff18 	bl	8003a48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2258      	movs	r2, #88	; 0x58
 8006c1c:	5a9a      	ldrh	r2, [r3, r2]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	215a      	movs	r1, #90	; 0x5a
 8006c22:	5a5b      	ldrh	r3, [r3, r1]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0011      	movs	r1, r2
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 f8dc 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c34:	e0be      	b.n	8006db4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2258      	movs	r2, #88	; 0x58
 8006c3a:	5a99      	ldrh	r1, [r3, r2]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	225a      	movs	r2, #90	; 0x5a
 8006c40:	5a9b      	ldrh	r3, [r3, r2]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	208e      	movs	r0, #142	; 0x8e
 8006c46:	183b      	adds	r3, r7, r0
 8006c48:	1a8a      	subs	r2, r1, r2
 8006c4a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	225a      	movs	r2, #90	; 0x5a
 8006c50:	5a9b      	ldrh	r3, [r3, r2]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d100      	bne.n	8006c5a <HAL_UART_IRQHandler+0x43e>
 8006c58:	e0ae      	b.n	8006db8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006c5a:	183b      	adds	r3, r7, r0
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d100      	bne.n	8006c64 <HAL_UART_IRQHandler+0x448>
 8006c62:	e0a9      	b.n	8006db8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c64:	f3ef 8310 	mrs	r3, PRIMASK
 8006c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6c:	2488      	movs	r4, #136	; 0x88
 8006c6e:	193a      	adds	r2, r7, r4
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	2301      	movs	r3, #1
 8006c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	494f      	ldr	r1, [pc, #316]	; (8006dc8 <HAL_UART_IRQHandler+0x5ac>)
 8006c8a:	400a      	ands	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	193b      	adds	r3, r7, r4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f383 8810 	msr	PRIMASK, r3
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ca2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	2484      	movs	r4, #132	; 0x84
 8006ca6:	193a      	adds	r2, r7, r4
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	2301      	movs	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f383 8810 	msr	PRIMASK, r3
}
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	438a      	bics	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	193b      	adds	r3, r7, r4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	f383 8810 	msr	PRIMASK, r3
}
 8006cd2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	2480      	movs	r4, #128	; 0x80
 8006cf0:	193a      	adds	r2, r7, r4
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2110      	movs	r1, #16
 8006d0c:	438a      	bics	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	193b      	adds	r3, r7, r4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	f383 8810 	msr	PRIMASK, r3
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d1e:	183b      	adds	r3, r7, r0
 8006d20:	881a      	ldrh	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0011      	movs	r1, r2
 8006d26:	0018      	movs	r0, r3
 8006d28:	f000 f860 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d2c:	e044      	b.n	8006db8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d2e:	23a4      	movs	r3, #164	; 0xa4
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	2380      	movs	r3, #128	; 0x80
 8006d36:	035b      	lsls	r3, r3, #13
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d010      	beq.n	8006d5e <HAL_UART_IRQHandler+0x542>
 8006d3c:	239c      	movs	r3, #156	; 0x9c
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	2380      	movs	r3, #128	; 0x80
 8006d44:	03db      	lsls	r3, r3, #15
 8006d46:	4013      	ands	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	0352      	lsls	r2, r2, #13
 8006d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f000 fc40 	bl	80075dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d5c:	e02f      	b.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d5e:	23a4      	movs	r3, #164	; 0xa4
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2280      	movs	r2, #128	; 0x80
 8006d66:	4013      	ands	r3, r2
 8006d68:	d00f      	beq.n	8006d8a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d6a:	23a0      	movs	r3, #160	; 0xa0
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	4013      	ands	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01e      	beq.n	8006dbc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	0010      	movs	r0, r2
 8006d86:	4798      	blx	r3
    }
    return;
 8006d88:	e018      	b.n	8006dbc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d8a:	23a4      	movs	r3, #164	; 0xa4
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2240      	movs	r2, #64	; 0x40
 8006d92:	4013      	ands	r3, r2
 8006d94:	d013      	beq.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
 8006d96:	23a0      	movs	r3, #160	; 0xa0
 8006d98:	18fb      	adds	r3, r7, r3
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2240      	movs	r2, #64	; 0x40
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d00d      	beq.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	0018      	movs	r0, r3
 8006da6:	f000 fbee 	bl	8007586 <UART_EndTransmit_IT>
    return;
 8006daa:	e008      	b.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
      return;
 8006dac:	46c0      	nop			; (mov r8, r8)
 8006dae:	e006      	b.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
    return;
 8006db0:	46c0      	nop			; (mov r8, r8)
 8006db2:	e004      	b.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
      return;
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	e002      	b.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
      return;
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	e000      	b.n	8006dbe <HAL_UART_IRQHandler+0x5a2>
    return;
 8006dbc:	46c0      	nop			; (mov r8, r8)
  }

}
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b02b      	add	sp, #172	; 0xac
 8006dc2:	bd90      	pop	{r4, r7, pc}
 8006dc4:	fffffeff 	.word	0xfffffeff
 8006dc8:	fffffedf 	.word	0xfffffedf

08006dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dd4:	46c0      	nop			; (mov r8, r8)
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b002      	add	sp, #8
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006de4:	46c0      	nop			; (mov r8, r8)
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b002      	add	sp, #8
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	000a      	movs	r2, r1
 8006df6:	1cbb      	adds	r3, r7, #2
 8006df8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b002      	add	sp, #8
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e0c:	231e      	movs	r3, #30
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4aaf      	ldr	r2, [pc, #700]	; (80070f0 <UART_SetConfig+0x2ec>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	0019      	movs	r1, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4aaa      	ldr	r2, [pc, #680]	; (80070f4 <UART_SetConfig+0x2f0>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4aa1      	ldr	r2, [pc, #644]	; (80070f8 <UART_SetConfig+0x2f4>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	0019      	movs	r1, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a9d      	ldr	r2, [pc, #628]	; (80070fc <UART_SetConfig+0x2f8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d127      	bne.n	8006eda <UART_SetConfig+0xd6>
 8006e8a:	4b9d      	ldr	r3, [pc, #628]	; (8007100 <UART_SetConfig+0x2fc>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	2203      	movs	r2, #3
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d00d      	beq.n	8006eb2 <UART_SetConfig+0xae>
 8006e96:	d81b      	bhi.n	8006ed0 <UART_SetConfig+0xcc>
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d014      	beq.n	8006ec6 <UART_SetConfig+0xc2>
 8006e9c:	d818      	bhi.n	8006ed0 <UART_SetConfig+0xcc>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <UART_SetConfig+0xa4>
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d00a      	beq.n	8006ebc <UART_SetConfig+0xb8>
 8006ea6:	e013      	b.n	8006ed0 <UART_SetConfig+0xcc>
 8006ea8:	231f      	movs	r3, #31
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e065      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006eb2:	231f      	movs	r3, #31
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e060      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006ebc:	231f      	movs	r3, #31
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e05b      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006ec6:	231f      	movs	r3, #31
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	2208      	movs	r2, #8
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e056      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006ed0:	231f      	movs	r3, #31
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	e051      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a89      	ldr	r2, [pc, #548]	; (8007104 <UART_SetConfig+0x300>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d134      	bne.n	8006f4e <UART_SetConfig+0x14a>
 8006ee4:	4b86      	ldr	r3, [pc, #536]	; (8007100 <UART_SetConfig+0x2fc>)
 8006ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee8:	23c0      	movs	r3, #192	; 0xc0
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	4013      	ands	r3, r2
 8006eee:	22c0      	movs	r2, #192	; 0xc0
 8006ef0:	0292      	lsls	r2, r2, #10
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d017      	beq.n	8006f26 <UART_SetConfig+0x122>
 8006ef6:	22c0      	movs	r2, #192	; 0xc0
 8006ef8:	0292      	lsls	r2, r2, #10
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d822      	bhi.n	8006f44 <UART_SetConfig+0x140>
 8006efe:	2280      	movs	r2, #128	; 0x80
 8006f00:	0292      	lsls	r2, r2, #10
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d019      	beq.n	8006f3a <UART_SetConfig+0x136>
 8006f06:	2280      	movs	r2, #128	; 0x80
 8006f08:	0292      	lsls	r2, r2, #10
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d81a      	bhi.n	8006f44 <UART_SetConfig+0x140>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d004      	beq.n	8006f1c <UART_SetConfig+0x118>
 8006f12:	2280      	movs	r2, #128	; 0x80
 8006f14:	0252      	lsls	r2, r2, #9
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00a      	beq.n	8006f30 <UART_SetConfig+0x12c>
 8006f1a:	e013      	b.n	8006f44 <UART_SetConfig+0x140>
 8006f1c:	231f      	movs	r3, #31
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	e02b      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f26:	231f      	movs	r3, #31
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e026      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f30:	231f      	movs	r3, #31
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	2204      	movs	r2, #4
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e021      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f3a:	231f      	movs	r3, #31
 8006f3c:	18fb      	adds	r3, r7, r3
 8006f3e:	2208      	movs	r2, #8
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	e01c      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f44:	231f      	movs	r3, #31
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2210      	movs	r2, #16
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e017      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a6d      	ldr	r2, [pc, #436]	; (8007108 <UART_SetConfig+0x304>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d104      	bne.n	8006f62 <UART_SetConfig+0x15e>
 8006f58:	231f      	movs	r3, #31
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e00d      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a69      	ldr	r2, [pc, #420]	; (800710c <UART_SetConfig+0x308>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d104      	bne.n	8006f76 <UART_SetConfig+0x172>
 8006f6c:	231f      	movs	r3, #31
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	e003      	b.n	8006f7e <UART_SetConfig+0x17a>
 8006f76:	231f      	movs	r3, #31
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d15d      	bne.n	8007046 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8006f8a:	231f      	movs	r3, #31
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d015      	beq.n	8006fc0 <UART_SetConfig+0x1bc>
 8006f94:	dc18      	bgt.n	8006fc8 <UART_SetConfig+0x1c4>
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d00d      	beq.n	8006fb6 <UART_SetConfig+0x1b2>
 8006f9a:	dc15      	bgt.n	8006fc8 <UART_SetConfig+0x1c4>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <UART_SetConfig+0x1a2>
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d005      	beq.n	8006fb0 <UART_SetConfig+0x1ac>
 8006fa4:	e010      	b.n	8006fc8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa6:	f7fd fea7 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8006faa:	0003      	movs	r3, r0
 8006fac:	61bb      	str	r3, [r7, #24]
        break;
 8006fae:	e012      	b.n	8006fd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b57      	ldr	r3, [pc, #348]	; (8007110 <UART_SetConfig+0x30c>)
 8006fb2:	61bb      	str	r3, [r7, #24]
        break;
 8006fb4:	e00f      	b.n	8006fd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fd fe15 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	61bb      	str	r3, [r7, #24]
        break;
 8006fbe:	e00a      	b.n	8006fd6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	61bb      	str	r3, [r7, #24]
        break;
 8006fc6:	e006      	b.n	8006fd6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fcc:	231e      	movs	r3, #30
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
        break;
 8006fd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d100      	bne.n	8006fde <UART_SetConfig+0x1da>
 8006fdc:	e07b      	b.n	80070d6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	005a      	lsls	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	18d2      	adds	r2, r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	0019      	movs	r1, r3
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	f7f9 f89b 	bl	800012c <__udivsi3>
 8006ff6:	0003      	movs	r3, r0
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	d91c      	bls.n	800703c <UART_SetConfig+0x238>
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	025b      	lsls	r3, r3, #9
 8007008:	429a      	cmp	r2, r3
 800700a:	d217      	bcs.n	800703c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	b29a      	uxth	r2, r3
 8007010:	200e      	movs	r0, #14
 8007012:	183b      	adds	r3, r7, r0
 8007014:	210f      	movs	r1, #15
 8007016:	438a      	bics	r2, r1
 8007018:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	2207      	movs	r2, #7
 8007022:	4013      	ands	r3, r2
 8007024:	b299      	uxth	r1, r3
 8007026:	183b      	adds	r3, r7, r0
 8007028:	183a      	adds	r2, r7, r0
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	183a      	adds	r2, r7, r0
 8007036:	8812      	ldrh	r2, [r2, #0]
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	e04c      	b.n	80070d6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800703c:	231e      	movs	r3, #30
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	2201      	movs	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e047      	b.n	80070d6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007046:	231f      	movs	r3, #31
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d015      	beq.n	800707c <UART_SetConfig+0x278>
 8007050:	dc18      	bgt.n	8007084 <UART_SetConfig+0x280>
 8007052:	2b04      	cmp	r3, #4
 8007054:	d00d      	beq.n	8007072 <UART_SetConfig+0x26e>
 8007056:	dc15      	bgt.n	8007084 <UART_SetConfig+0x280>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <UART_SetConfig+0x25e>
 800705c:	2b02      	cmp	r3, #2
 800705e:	d005      	beq.n	800706c <UART_SetConfig+0x268>
 8007060:	e010      	b.n	8007084 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007062:	f7fd fe49 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8007066:	0003      	movs	r3, r0
 8007068:	61bb      	str	r3, [r7, #24]
        break;
 800706a:	e012      	b.n	8007092 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800706c:	4b28      	ldr	r3, [pc, #160]	; (8007110 <UART_SetConfig+0x30c>)
 800706e:	61bb      	str	r3, [r7, #24]
        break;
 8007070:	e00f      	b.n	8007092 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007072:	f7fd fdb7 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8007076:	0003      	movs	r3, r0
 8007078:	61bb      	str	r3, [r7, #24]
        break;
 800707a:	e00a      	b.n	8007092 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	61bb      	str	r3, [r7, #24]
        break;
 8007082:	e006      	b.n	8007092 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007088:	231e      	movs	r3, #30
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	2201      	movs	r2, #1
 800708e:	701a      	strb	r2, [r3, #0]
        break;
 8007090:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01e      	beq.n	80070d6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	085a      	lsrs	r2, r3, #1
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	18d2      	adds	r2, r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	0019      	movs	r1, r3
 80070a8:	0010      	movs	r0, r2
 80070aa:	f7f9 f83f 	bl	800012c <__udivsi3>
 80070ae:	0003      	movs	r3, r0
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b0f      	cmp	r3, #15
 80070b8:	d909      	bls.n	80070ce <UART_SetConfig+0x2ca>
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	025b      	lsls	r3, r3, #9
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d204      	bcs.n	80070ce <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	60da      	str	r2, [r3, #12]
 80070cc:	e003      	b.n	80070d6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80070ce:	231e      	movs	r3, #30
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070e2:	231e      	movs	r3, #30
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	781b      	ldrb	r3, [r3, #0]
}
 80070e8:	0018      	movs	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b008      	add	sp, #32
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	efff69f3 	.word	0xefff69f3
 80070f4:	ffffcfff 	.word	0xffffcfff
 80070f8:	fffff4ff 	.word	0xfffff4ff
 80070fc:	40013800 	.word	0x40013800
 8007100:	40021000 	.word	0x40021000
 8007104:	40004400 	.word	0x40004400
 8007108:	40004800 	.word	0x40004800
 800710c:	40004c00 	.word	0x40004c00
 8007110:	007a1200 	.word	0x007a1200

08007114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2201      	movs	r2, #1
 8007122:	4013      	ands	r3, r2
 8007124:	d00b      	beq.n	800713e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a4a      	ldr	r2, [pc, #296]	; (8007258 <UART_AdvFeatureConfig+0x144>)
 800712e:	4013      	ands	r3, r2
 8007130:	0019      	movs	r1, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2202      	movs	r2, #2
 8007144:	4013      	ands	r3, r2
 8007146:	d00b      	beq.n	8007160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4a43      	ldr	r2, [pc, #268]	; (800725c <UART_AdvFeatureConfig+0x148>)
 8007150:	4013      	ands	r3, r2
 8007152:	0019      	movs	r1, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2204      	movs	r2, #4
 8007166:	4013      	ands	r3, r2
 8007168:	d00b      	beq.n	8007182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4a3b      	ldr	r2, [pc, #236]	; (8007260 <UART_AdvFeatureConfig+0x14c>)
 8007172:	4013      	ands	r3, r2
 8007174:	0019      	movs	r1, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2208      	movs	r2, #8
 8007188:	4013      	ands	r3, r2
 800718a:	d00b      	beq.n	80071a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4a34      	ldr	r2, [pc, #208]	; (8007264 <UART_AdvFeatureConfig+0x150>)
 8007194:	4013      	ands	r3, r2
 8007196:	0019      	movs	r1, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2210      	movs	r2, #16
 80071aa:	4013      	ands	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <UART_AdvFeatureConfig+0x154>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	0019      	movs	r1, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2220      	movs	r2, #32
 80071cc:	4013      	ands	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	4a25      	ldr	r2, [pc, #148]	; (800726c <UART_AdvFeatureConfig+0x158>)
 80071d8:	4013      	ands	r3, r2
 80071da:	0019      	movs	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2240      	movs	r2, #64	; 0x40
 80071ee:	4013      	ands	r3, r2
 80071f0:	d01d      	beq.n	800722e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4a1d      	ldr	r2, [pc, #116]	; (8007270 <UART_AdvFeatureConfig+0x15c>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	0019      	movs	r1, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800720e:	2380      	movs	r3, #128	; 0x80
 8007210:	035b      	lsls	r3, r3, #13
 8007212:	429a      	cmp	r2, r3
 8007214:	d10b      	bne.n	800722e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <UART_AdvFeatureConfig+0x160>)
 800721e:	4013      	ands	r3, r2
 8007220:	0019      	movs	r1, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	4013      	ands	r3, r2
 8007236:	d00b      	beq.n	8007250 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4a0e      	ldr	r2, [pc, #56]	; (8007278 <UART_AdvFeatureConfig+0x164>)
 8007240:	4013      	ands	r3, r2
 8007242:	0019      	movs	r1, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }
}
 8007250:	46c0      	nop			; (mov r8, r8)
 8007252:	46bd      	mov	sp, r7
 8007254:	b002      	add	sp, #8
 8007256:	bd80      	pop	{r7, pc}
 8007258:	fffdffff 	.word	0xfffdffff
 800725c:	fffeffff 	.word	0xfffeffff
 8007260:	fffbffff 	.word	0xfffbffff
 8007264:	ffff7fff 	.word	0xffff7fff
 8007268:	ffffefff 	.word	0xffffefff
 800726c:	ffffdfff 	.word	0xffffdfff
 8007270:	ffefffff 	.word	0xffefffff
 8007274:	ff9fffff 	.word	0xff9fffff
 8007278:	fff7ffff 	.word	0xfff7ffff

0800727c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	2100      	movs	r1, #0
 800728a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800728c:	f7fb ffbe 	bl	800320c <HAL_GetTick>
 8007290:	0003      	movs	r3, r0
 8007292:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2208      	movs	r2, #8
 800729c:	4013      	ands	r3, r2
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d10c      	bne.n	80072bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2280      	movs	r2, #128	; 0x80
 80072a6:	0391      	lsls	r1, r2, #14
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <UART_CheckIdleState+0x8c>)
 80072ac:	9200      	str	r2, [sp, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f000 f82c 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 80072b4:	1e03      	subs	r3, r0, #0
 80072b6:	d001      	beq.n	80072bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e021      	b.n	8007300 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2204      	movs	r2, #4
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d10c      	bne.n	80072e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	03d1      	lsls	r1, r2, #15
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <UART_CheckIdleState+0x8c>)
 80072d4:	9200      	str	r2, [sp, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f000 f818 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 80072dc:	1e03      	subs	r3, r0, #0
 80072de:	d001      	beq.n	80072e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e00d      	b.n	8007300 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2274      	movs	r2, #116	; 0x74
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b004      	add	sp, #16
 8007306:	bd80      	pop	{r7, pc}
 8007308:	01ffffff 	.word	0x01ffffff

0800730c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b094      	sub	sp, #80	; 0x50
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	1dfb      	adds	r3, r7, #7
 800731a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731c:	e0a3      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800731e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007320:	3301      	adds	r3, #1
 8007322:	d100      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007324:	e09f      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007326:	f7fb ff71 	bl	800320c <HAL_GetTick>
 800732a:	0002      	movs	r2, r0
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007332:	429a      	cmp	r2, r3
 8007334:	d302      	bcc.n	800733c <UART_WaitOnFlagUntilTimeout+0x30>
 8007336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007338:	2b00      	cmp	r3, #0
 800733a:	d13d      	bne.n	80073b8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733c:	f3ef 8310 	mrs	r3, PRIMASK
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007344:	647b      	str	r3, [r7, #68]	; 0x44
 8007346:	2301      	movs	r3, #1
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	f383 8810 	msr	PRIMASK, r3
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	494c      	ldr	r1, [pc, #304]	; (8007490 <UART_WaitOnFlagUntilTimeout+0x184>)
 800735e:	400a      	ands	r2, r1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007364:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	f383 8810 	msr	PRIMASK, r3
}
 800736c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736e:	f3ef 8310 	mrs	r3, PRIMASK
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
 8007378:	2301      	movs	r3, #1
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	f383 8810 	msr	PRIMASK, r3
}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2101      	movs	r1, #1
 8007390:	438a      	bics	r2, r1
 8007392:	609a      	str	r2, [r3, #8]
 8007394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739a:	f383 8810 	msr	PRIMASK, r3
}
 800739e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2274      	movs	r2, #116	; 0x74
 80073b0:	2100      	movs	r1, #0
 80073b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e067      	b.n	8007488 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2204      	movs	r2, #4
 80073c0:	4013      	ands	r3, r2
 80073c2:	d050      	beq.n	8007466 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	2380      	movs	r3, #128	; 0x80
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	401a      	ands	r2, r3
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d146      	bne.n	8007466 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2280      	movs	r2, #128	; 0x80
 80073de:	0112      	lsls	r2, r2, #4
 80073e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e2:	f3ef 8310 	mrs	r3, PRIMASK
 80073e6:	613b      	str	r3, [r7, #16]
  return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ec:	2301      	movs	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f383 8810 	msr	PRIMASK, r3
}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4923      	ldr	r1, [pc, #140]	; (8007490 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007404:	400a      	ands	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f383 8810 	msr	PRIMASK, r3
}
 8007412:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007414:	f3ef 8310 	mrs	r3, PRIMASK
 8007418:	61fb      	str	r3, [r7, #28]
  return(result);
 800741a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741c:	64bb      	str	r3, [r7, #72]	; 0x48
 800741e:	2301      	movs	r3, #1
 8007420:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	f383 8810 	msr	PRIMASK, r3
}
 8007428:	46c0      	nop			; (mov r8, r8)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2101      	movs	r1, #1
 8007436:	438a      	bics	r2, r1
 8007438:	609a      	str	r2, [r3, #8]
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	f383 8810 	msr	PRIMASK, r3
}
 8007444:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2280      	movs	r2, #128	; 0x80
 8007456:	2120      	movs	r1, #32
 8007458:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2274      	movs	r2, #116	; 0x74
 800745e:	2100      	movs	r1, #0
 8007460:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e010      	b.n	8007488 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	4013      	ands	r3, r2
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	425a      	negs	r2, r3
 8007476:	4153      	adcs	r3, r2
 8007478:	b2db      	uxtb	r3, r3
 800747a:	001a      	movs	r2, r3
 800747c:	1dfb      	adds	r3, r7, #7
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d100      	bne.n	8007486 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007484:	e74b      	b.n	800731e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b014      	add	sp, #80	; 0x50
 800748e:	bd80      	pop	{r7, pc}
 8007490:	fffffe5f 	.word	0xfffffe5f

08007494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08e      	sub	sp, #56	; 0x38
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749c:	f3ef 8310 	mrs	r3, PRIMASK
 80074a0:	617b      	str	r3, [r7, #20]
  return(result);
 80074a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
 80074a6:	2301      	movs	r3, #1
 80074a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	f383 8810 	msr	PRIMASK, r3
}
 80074b0:	46c0      	nop			; (mov r8, r8)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4925      	ldr	r1, [pc, #148]	; (8007554 <UART_EndRxTransfer+0xc0>)
 80074be:	400a      	ands	r2, r1
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f383 8810 	msr	PRIMASK, r3
}
 80074cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ce:	f3ef 8310 	mrs	r3, PRIMASK
 80074d2:	623b      	str	r3, [r7, #32]
  return(result);
 80074d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d6:	633b      	str	r3, [r7, #48]	; 0x30
 80074d8:	2301      	movs	r3, #1
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	f383 8810 	msr	PRIMASK, r3
}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2101      	movs	r1, #1
 80074f0:	438a      	bics	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f383 8810 	msr	PRIMASK, r3
}
 80074fe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007504:	2b01      	cmp	r3, #1
 8007506:	d118      	bne.n	800753a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007508:	f3ef 8310 	mrs	r3, PRIMASK
 800750c:	60bb      	str	r3, [r7, #8]
  return(result);
 800750e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007512:	2301      	movs	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			; (mov r8, r8)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2110      	movs	r1, #16
 800752a:	438a      	bics	r2, r1
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f383 8810 	msr	PRIMASK, r3
}
 8007538:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800754c:	46c0      	nop			; (mov r8, r8)
 800754e:	46bd      	mov	sp, r7
 8007550:	b00e      	add	sp, #56	; 0x38
 8007552:	bd80      	pop	{r7, pc}
 8007554:	fffffedf 	.word	0xfffffedf

08007558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	225a      	movs	r2, #90	; 0x5a
 800756a:	2100      	movs	r1, #0
 800756c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2252      	movs	r2, #82	; 0x52
 8007572:	2100      	movs	r1, #0
 8007574:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	0018      	movs	r0, r3
 800757a:	f7ff fc2f 	bl	8006ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	46bd      	mov	sp, r7
 8007582:	b004      	add	sp, #16
 8007584:	bd80      	pop	{r7, pc}

08007586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758e:	f3ef 8310 	mrs	r3, PRIMASK
 8007592:	60bb      	str	r3, [r7, #8]
  return(result);
 8007594:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	2301      	movs	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f383 8810 	msr	PRIMASK, r3
}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2140      	movs	r1, #64	; 0x40
 80075b0:	438a      	bics	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f383 8810 	msr	PRIMASK, r3
}
 80075be:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	0018      	movs	r0, r3
 80075d0:	f7ff fbfc 	bl	8006dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	46bd      	mov	sp, r7
 80075d8:	b006      	add	sp, #24
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}

080075ec <atoi>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	220a      	movs	r2, #10
 80075f0:	2100      	movs	r1, #0
 80075f2:	f000 f90d 	bl	8007810 <strtol>
 80075f6:	bd10      	pop	{r4, pc}

080075f8 <__errno>:
 80075f8:	4b01      	ldr	r3, [pc, #4]	; (8007600 <__errno+0x8>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	4770      	bx	lr
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	20000010 	.word	0x20000010

08007604 <__libc_init_array>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	2600      	movs	r6, #0
 8007608:	4d0c      	ldr	r5, [pc, #48]	; (800763c <__libc_init_array+0x38>)
 800760a:	4c0d      	ldr	r4, [pc, #52]	; (8007640 <__libc_init_array+0x3c>)
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	42a6      	cmp	r6, r4
 8007612:	d109      	bne.n	8007628 <__libc_init_array+0x24>
 8007614:	2600      	movs	r6, #0
 8007616:	f000 fd47 	bl	80080a8 <_init>
 800761a:	4d0a      	ldr	r5, [pc, #40]	; (8007644 <__libc_init_array+0x40>)
 800761c:	4c0a      	ldr	r4, [pc, #40]	; (8007648 <__libc_init_array+0x44>)
 800761e:	1b64      	subs	r4, r4, r5
 8007620:	10a4      	asrs	r4, r4, #2
 8007622:	42a6      	cmp	r6, r4
 8007624:	d105      	bne.n	8007632 <__libc_init_array+0x2e>
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	00b3      	lsls	r3, r6, #2
 800762a:	58eb      	ldr	r3, [r5, r3]
 800762c:	4798      	blx	r3
 800762e:	3601      	adds	r6, #1
 8007630:	e7ee      	b.n	8007610 <__libc_init_array+0xc>
 8007632:	00b3      	lsls	r3, r6, #2
 8007634:	58eb      	ldr	r3, [r5, r3]
 8007636:	4798      	blx	r3
 8007638:	3601      	adds	r6, #1
 800763a:	e7f2      	b.n	8007622 <__libc_init_array+0x1e>
 800763c:	080082ec 	.word	0x080082ec
 8007640:	080082ec 	.word	0x080082ec
 8007644:	080082ec 	.word	0x080082ec
 8007648:	080082f0 	.word	0x080082f0

0800764c <memcpy>:
 800764c:	2300      	movs	r3, #0
 800764e:	b510      	push	{r4, lr}
 8007650:	429a      	cmp	r2, r3
 8007652:	d100      	bne.n	8007656 <memcpy+0xa>
 8007654:	bd10      	pop	{r4, pc}
 8007656:	5ccc      	ldrb	r4, [r1, r3]
 8007658:	54c4      	strb	r4, [r0, r3]
 800765a:	3301      	adds	r3, #1
 800765c:	e7f8      	b.n	8007650 <memcpy+0x4>

0800765e <memset>:
 800765e:	0003      	movs	r3, r0
 8007660:	1882      	adds	r2, r0, r2
 8007662:	4293      	cmp	r3, r2
 8007664:	d100      	bne.n	8007668 <memset+0xa>
 8007666:	4770      	bx	lr
 8007668:	7019      	strb	r1, [r3, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	e7f9      	b.n	8007662 <memset+0x4>
	...

08007670 <sniprintf>:
 8007670:	b40c      	push	{r2, r3}
 8007672:	b530      	push	{r4, r5, lr}
 8007674:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <sniprintf+0x64>)
 8007676:	000c      	movs	r4, r1
 8007678:	681d      	ldr	r5, [r3, #0]
 800767a:	b09d      	sub	sp, #116	; 0x74
 800767c:	2900      	cmp	r1, #0
 800767e:	da08      	bge.n	8007692 <sniprintf+0x22>
 8007680:	238b      	movs	r3, #139	; 0x8b
 8007682:	2001      	movs	r0, #1
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	4240      	negs	r0, r0
 8007688:	b01d      	add	sp, #116	; 0x74
 800768a:	bc30      	pop	{r4, r5}
 800768c:	bc08      	pop	{r3}
 800768e:	b002      	add	sp, #8
 8007690:	4718      	bx	r3
 8007692:	2382      	movs	r3, #130	; 0x82
 8007694:	466a      	mov	r2, sp
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	8293      	strh	r3, [r2, #20]
 800769a:	2300      	movs	r3, #0
 800769c:	9002      	str	r0, [sp, #8]
 800769e:	9006      	str	r0, [sp, #24]
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d000      	beq.n	80076a6 <sniprintf+0x36>
 80076a4:	1e4b      	subs	r3, r1, #1
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	9307      	str	r3, [sp, #28]
 80076aa:	2301      	movs	r3, #1
 80076ac:	466a      	mov	r2, sp
 80076ae:	425b      	negs	r3, r3
 80076b0:	82d3      	strh	r3, [r2, #22]
 80076b2:	0028      	movs	r0, r5
 80076b4:	ab21      	add	r3, sp, #132	; 0x84
 80076b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076b8:	a902      	add	r1, sp, #8
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	f000 f916 	bl	80078ec <_svfiprintf_r>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	da01      	bge.n	80076c8 <sniprintf+0x58>
 80076c4:	238b      	movs	r3, #139	; 0x8b
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	2c00      	cmp	r4, #0
 80076ca:	d0dd      	beq.n	8007688 <sniprintf+0x18>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9a02      	ldr	r2, [sp, #8]
 80076d0:	7013      	strb	r3, [r2, #0]
 80076d2:	e7d9      	b.n	8007688 <sniprintf+0x18>
 80076d4:	20000010 	.word	0x20000010

080076d8 <strchr>:
 80076d8:	b2c9      	uxtb	r1, r1
 80076da:	7803      	ldrb	r3, [r0, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <strchr+0x12>
 80076e0:	428b      	cmp	r3, r1
 80076e2:	d100      	bne.n	80076e6 <strchr+0xe>
 80076e4:	4770      	bx	lr
 80076e6:	3001      	adds	r0, #1
 80076e8:	e7f7      	b.n	80076da <strchr+0x2>
 80076ea:	424b      	negs	r3, r1
 80076ec:	4159      	adcs	r1, r3
 80076ee:	4249      	negs	r1, r1
 80076f0:	4008      	ands	r0, r1
 80076f2:	e7f7      	b.n	80076e4 <strchr+0xc>

080076f4 <_strtol_l.constprop.0>:
 80076f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f6:	b087      	sub	sp, #28
 80076f8:	001e      	movs	r6, r3
 80076fa:	9005      	str	r0, [sp, #20]
 80076fc:	9101      	str	r1, [sp, #4]
 80076fe:	9202      	str	r2, [sp, #8]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d045      	beq.n	8007790 <_strtol_l.constprop.0+0x9c>
 8007704:	000b      	movs	r3, r1
 8007706:	2e24      	cmp	r6, #36	; 0x24
 8007708:	d842      	bhi.n	8007790 <_strtol_l.constprop.0+0x9c>
 800770a:	4a3f      	ldr	r2, [pc, #252]	; (8007808 <_strtol_l.constprop.0+0x114>)
 800770c:	2108      	movs	r1, #8
 800770e:	4694      	mov	ip, r2
 8007710:	001a      	movs	r2, r3
 8007712:	4660      	mov	r0, ip
 8007714:	7814      	ldrb	r4, [r2, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	5d00      	ldrb	r0, [r0, r4]
 800771a:	001d      	movs	r5, r3
 800771c:	0007      	movs	r7, r0
 800771e:	400f      	ands	r7, r1
 8007720:	4208      	tst	r0, r1
 8007722:	d1f5      	bne.n	8007710 <_strtol_l.constprop.0+0x1c>
 8007724:	2c2d      	cmp	r4, #45	; 0x2d
 8007726:	d13a      	bne.n	800779e <_strtol_l.constprop.0+0xaa>
 8007728:	2701      	movs	r7, #1
 800772a:	781c      	ldrb	r4, [r3, #0]
 800772c:	1c95      	adds	r5, r2, #2
 800772e:	2e00      	cmp	r6, #0
 8007730:	d065      	beq.n	80077fe <_strtol_l.constprop.0+0x10a>
 8007732:	2e10      	cmp	r6, #16
 8007734:	d109      	bne.n	800774a <_strtol_l.constprop.0+0x56>
 8007736:	2c30      	cmp	r4, #48	; 0x30
 8007738:	d107      	bne.n	800774a <_strtol_l.constprop.0+0x56>
 800773a:	2220      	movs	r2, #32
 800773c:	782b      	ldrb	r3, [r5, #0]
 800773e:	4393      	bics	r3, r2
 8007740:	2b58      	cmp	r3, #88	; 0x58
 8007742:	d157      	bne.n	80077f4 <_strtol_l.constprop.0+0x100>
 8007744:	2610      	movs	r6, #16
 8007746:	786c      	ldrb	r4, [r5, #1]
 8007748:	3502      	adds	r5, #2
 800774a:	4b30      	ldr	r3, [pc, #192]	; (800780c <_strtol_l.constprop.0+0x118>)
 800774c:	0031      	movs	r1, r6
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	0018      	movs	r0, r3
 8007752:	9303      	str	r3, [sp, #12]
 8007754:	f7f8 fd70 	bl	8000238 <__aeabi_uidivmod>
 8007758:	2300      	movs	r3, #0
 800775a:	2201      	movs	r2, #1
 800775c:	4684      	mov	ip, r0
 800775e:	0018      	movs	r0, r3
 8007760:	9104      	str	r1, [sp, #16]
 8007762:	4252      	negs	r2, r2
 8007764:	0021      	movs	r1, r4
 8007766:	3930      	subs	r1, #48	; 0x30
 8007768:	2909      	cmp	r1, #9
 800776a:	d81d      	bhi.n	80077a8 <_strtol_l.constprop.0+0xb4>
 800776c:	000c      	movs	r4, r1
 800776e:	42a6      	cmp	r6, r4
 8007770:	dd28      	ble.n	80077c4 <_strtol_l.constprop.0+0xd0>
 8007772:	2b00      	cmp	r3, #0
 8007774:	db24      	blt.n	80077c0 <_strtol_l.constprop.0+0xcc>
 8007776:	0013      	movs	r3, r2
 8007778:	4584      	cmp	ip, r0
 800777a:	d306      	bcc.n	800778a <_strtol_l.constprop.0+0x96>
 800777c:	d102      	bne.n	8007784 <_strtol_l.constprop.0+0x90>
 800777e:	9904      	ldr	r1, [sp, #16]
 8007780:	42a1      	cmp	r1, r4
 8007782:	db02      	blt.n	800778a <_strtol_l.constprop.0+0x96>
 8007784:	2301      	movs	r3, #1
 8007786:	4370      	muls	r0, r6
 8007788:	1820      	adds	r0, r4, r0
 800778a:	782c      	ldrb	r4, [r5, #0]
 800778c:	3501      	adds	r5, #1
 800778e:	e7e9      	b.n	8007764 <_strtol_l.constprop.0+0x70>
 8007790:	f7ff ff32 	bl	80075f8 <__errno>
 8007794:	2316      	movs	r3, #22
 8007796:	6003      	str	r3, [r0, #0]
 8007798:	2000      	movs	r0, #0
 800779a:	b007      	add	sp, #28
 800779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779e:	2c2b      	cmp	r4, #43	; 0x2b
 80077a0:	d1c5      	bne.n	800772e <_strtol_l.constprop.0+0x3a>
 80077a2:	781c      	ldrb	r4, [r3, #0]
 80077a4:	1c95      	adds	r5, r2, #2
 80077a6:	e7c2      	b.n	800772e <_strtol_l.constprop.0+0x3a>
 80077a8:	0021      	movs	r1, r4
 80077aa:	3941      	subs	r1, #65	; 0x41
 80077ac:	2919      	cmp	r1, #25
 80077ae:	d801      	bhi.n	80077b4 <_strtol_l.constprop.0+0xc0>
 80077b0:	3c37      	subs	r4, #55	; 0x37
 80077b2:	e7dc      	b.n	800776e <_strtol_l.constprop.0+0x7a>
 80077b4:	0021      	movs	r1, r4
 80077b6:	3961      	subs	r1, #97	; 0x61
 80077b8:	2919      	cmp	r1, #25
 80077ba:	d803      	bhi.n	80077c4 <_strtol_l.constprop.0+0xd0>
 80077bc:	3c57      	subs	r4, #87	; 0x57
 80077be:	e7d6      	b.n	800776e <_strtol_l.constprop.0+0x7a>
 80077c0:	0013      	movs	r3, r2
 80077c2:	e7e2      	b.n	800778a <_strtol_l.constprop.0+0x96>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	da09      	bge.n	80077dc <_strtol_l.constprop.0+0xe8>
 80077c8:	2322      	movs	r3, #34	; 0x22
 80077ca:	9a05      	ldr	r2, [sp, #20]
 80077cc:	9803      	ldr	r0, [sp, #12]
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	9b02      	ldr	r3, [sp, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0e1      	beq.n	800779a <_strtol_l.constprop.0+0xa6>
 80077d6:	1e6b      	subs	r3, r5, #1
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	e007      	b.n	80077ec <_strtol_l.constprop.0+0xf8>
 80077dc:	2f00      	cmp	r7, #0
 80077de:	d000      	beq.n	80077e2 <_strtol_l.constprop.0+0xee>
 80077e0:	4240      	negs	r0, r0
 80077e2:	9a02      	ldr	r2, [sp, #8]
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d0d8      	beq.n	800779a <_strtol_l.constprop.0+0xa6>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f4      	bne.n	80077d6 <_strtol_l.constprop.0+0xe2>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	9a01      	ldr	r2, [sp, #4]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e7d2      	b.n	800779a <_strtol_l.constprop.0+0xa6>
 80077f4:	2430      	movs	r4, #48	; 0x30
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	d1a7      	bne.n	800774a <_strtol_l.constprop.0+0x56>
 80077fa:	3608      	adds	r6, #8
 80077fc:	e7a5      	b.n	800774a <_strtol_l.constprop.0+0x56>
 80077fe:	2c30      	cmp	r4, #48	; 0x30
 8007800:	d09b      	beq.n	800773a <_strtol_l.constprop.0+0x46>
 8007802:	260a      	movs	r6, #10
 8007804:	e7a1      	b.n	800774a <_strtol_l.constprop.0+0x56>
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	080081b9 	.word	0x080081b9
 800780c:	7fffffff 	.word	0x7fffffff

08007810 <strtol>:
 8007810:	b510      	push	{r4, lr}
 8007812:	0013      	movs	r3, r2
 8007814:	000a      	movs	r2, r1
 8007816:	0001      	movs	r1, r0
 8007818:	4802      	ldr	r0, [pc, #8]	; (8007824 <strtol+0x14>)
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	f7ff ff6a 	bl	80076f4 <_strtol_l.constprop.0>
 8007820:	bd10      	pop	{r4, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	20000010 	.word	0x20000010

08007828 <__ssputs_r>:
 8007828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782a:	688e      	ldr	r6, [r1, #8]
 800782c:	b085      	sub	sp, #20
 800782e:	0007      	movs	r7, r0
 8007830:	000c      	movs	r4, r1
 8007832:	9203      	str	r2, [sp, #12]
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	429e      	cmp	r6, r3
 8007838:	d83c      	bhi.n	80078b4 <__ssputs_r+0x8c>
 800783a:	2390      	movs	r3, #144	; 0x90
 800783c:	898a      	ldrh	r2, [r1, #12]
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	421a      	tst	r2, r3
 8007842:	d034      	beq.n	80078ae <__ssputs_r+0x86>
 8007844:	6909      	ldr	r1, [r1, #16]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	6960      	ldr	r0, [r4, #20]
 800784a:	1a5b      	subs	r3, r3, r1
 800784c:	9302      	str	r3, [sp, #8]
 800784e:	2303      	movs	r3, #3
 8007850:	4343      	muls	r3, r0
 8007852:	0fdd      	lsrs	r5, r3, #31
 8007854:	18ed      	adds	r5, r5, r3
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	9802      	ldr	r0, [sp, #8]
 800785a:	3301      	adds	r3, #1
 800785c:	181b      	adds	r3, r3, r0
 800785e:	106d      	asrs	r5, r5, #1
 8007860:	42ab      	cmp	r3, r5
 8007862:	d900      	bls.n	8007866 <__ssputs_r+0x3e>
 8007864:	001d      	movs	r5, r3
 8007866:	0553      	lsls	r3, r2, #21
 8007868:	d532      	bpl.n	80078d0 <__ssputs_r+0xa8>
 800786a:	0029      	movs	r1, r5
 800786c:	0038      	movs	r0, r7
 800786e:	f000 fb49 	bl	8007f04 <_malloc_r>
 8007872:	1e06      	subs	r6, r0, #0
 8007874:	d109      	bne.n	800788a <__ssputs_r+0x62>
 8007876:	230c      	movs	r3, #12
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	2001      	movs	r0, #1
 800787e:	89a2      	ldrh	r2, [r4, #12]
 8007880:	4240      	negs	r0, r0
 8007882:	4313      	orrs	r3, r2
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	b005      	add	sp, #20
 8007888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788a:	9a02      	ldr	r2, [sp, #8]
 800788c:	6921      	ldr	r1, [r4, #16]
 800788e:	f7ff fedd 	bl	800764c <memcpy>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <__ssputs_r+0xc0>)
 8007896:	401a      	ands	r2, r3
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	4313      	orrs	r3, r2
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	9b02      	ldr	r3, [sp, #8]
 80078a0:	6126      	str	r6, [r4, #16]
 80078a2:	18f6      	adds	r6, r6, r3
 80078a4:	6026      	str	r6, [r4, #0]
 80078a6:	6165      	str	r5, [r4, #20]
 80078a8:	9e01      	ldr	r6, [sp, #4]
 80078aa:	1aed      	subs	r5, r5, r3
 80078ac:	60a5      	str	r5, [r4, #8]
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	429e      	cmp	r6, r3
 80078b2:	d900      	bls.n	80078b6 <__ssputs_r+0x8e>
 80078b4:	9e01      	ldr	r6, [sp, #4]
 80078b6:	0032      	movs	r2, r6
 80078b8:	9903      	ldr	r1, [sp, #12]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	f000 faa3 	bl	8007e06 <memmove>
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	2000      	movs	r0, #0
 80078c4:	1b9b      	subs	r3, r3, r6
 80078c6:	60a3      	str	r3, [r4, #8]
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	199e      	adds	r6, r3, r6
 80078cc:	6026      	str	r6, [r4, #0]
 80078ce:	e7da      	b.n	8007886 <__ssputs_r+0x5e>
 80078d0:	002a      	movs	r2, r5
 80078d2:	0038      	movs	r0, r7
 80078d4:	f000 fb8c 	bl	8007ff0 <_realloc_r>
 80078d8:	1e06      	subs	r6, r0, #0
 80078da:	d1e0      	bne.n	800789e <__ssputs_r+0x76>
 80078dc:	0038      	movs	r0, r7
 80078de:	6921      	ldr	r1, [r4, #16]
 80078e0:	f000 faa4 	bl	8007e2c <_free_r>
 80078e4:	e7c7      	b.n	8007876 <__ssputs_r+0x4e>
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	fffffb7f 	.word	0xfffffb7f

080078ec <_svfiprintf_r>:
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	b0a1      	sub	sp, #132	; 0x84
 80078f0:	9003      	str	r0, [sp, #12]
 80078f2:	001d      	movs	r5, r3
 80078f4:	898b      	ldrh	r3, [r1, #12]
 80078f6:	000f      	movs	r7, r1
 80078f8:	0016      	movs	r6, r2
 80078fa:	061b      	lsls	r3, r3, #24
 80078fc:	d511      	bpl.n	8007922 <_svfiprintf_r+0x36>
 80078fe:	690b      	ldr	r3, [r1, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10e      	bne.n	8007922 <_svfiprintf_r+0x36>
 8007904:	2140      	movs	r1, #64	; 0x40
 8007906:	f000 fafd 	bl	8007f04 <_malloc_r>
 800790a:	6038      	str	r0, [r7, #0]
 800790c:	6138      	str	r0, [r7, #16]
 800790e:	2800      	cmp	r0, #0
 8007910:	d105      	bne.n	800791e <_svfiprintf_r+0x32>
 8007912:	230c      	movs	r3, #12
 8007914:	9a03      	ldr	r2, [sp, #12]
 8007916:	3801      	subs	r0, #1
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	b021      	add	sp, #132	; 0x84
 800791c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791e:	2340      	movs	r3, #64	; 0x40
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	2300      	movs	r3, #0
 8007924:	ac08      	add	r4, sp, #32
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	3320      	adds	r3, #32
 800792a:	7663      	strb	r3, [r4, #25]
 800792c:	3310      	adds	r3, #16
 800792e:	76a3      	strb	r3, [r4, #26]
 8007930:	9507      	str	r5, [sp, #28]
 8007932:	0035      	movs	r5, r6
 8007934:	782b      	ldrb	r3, [r5, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <_svfiprintf_r+0x52>
 800793a:	2b25      	cmp	r3, #37	; 0x25
 800793c:	d147      	bne.n	80079ce <_svfiprintf_r+0xe2>
 800793e:	1bab      	subs	r3, r5, r6
 8007940:	9305      	str	r3, [sp, #20]
 8007942:	42b5      	cmp	r5, r6
 8007944:	d00c      	beq.n	8007960 <_svfiprintf_r+0x74>
 8007946:	0032      	movs	r2, r6
 8007948:	0039      	movs	r1, r7
 800794a:	9803      	ldr	r0, [sp, #12]
 800794c:	f7ff ff6c 	bl	8007828 <__ssputs_r>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d100      	bne.n	8007956 <_svfiprintf_r+0x6a>
 8007954:	e0ae      	b.n	8007ab4 <_svfiprintf_r+0x1c8>
 8007956:	6962      	ldr	r2, [r4, #20]
 8007958:	9b05      	ldr	r3, [sp, #20]
 800795a:	4694      	mov	ip, r2
 800795c:	4463      	add	r3, ip
 800795e:	6163      	str	r3, [r4, #20]
 8007960:	782b      	ldrb	r3, [r5, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d100      	bne.n	8007968 <_svfiprintf_r+0x7c>
 8007966:	e0a5      	b.n	8007ab4 <_svfiprintf_r+0x1c8>
 8007968:	2201      	movs	r2, #1
 800796a:	2300      	movs	r3, #0
 800796c:	4252      	negs	r2, r2
 800796e:	6062      	str	r2, [r4, #4]
 8007970:	a904      	add	r1, sp, #16
 8007972:	3254      	adds	r2, #84	; 0x54
 8007974:	1852      	adds	r2, r2, r1
 8007976:	1c6e      	adds	r6, r5, #1
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	60e3      	str	r3, [r4, #12]
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	7013      	strb	r3, [r2, #0]
 8007980:	65a3      	str	r3, [r4, #88]	; 0x58
 8007982:	2205      	movs	r2, #5
 8007984:	7831      	ldrb	r1, [r6, #0]
 8007986:	4854      	ldr	r0, [pc, #336]	; (8007ad8 <_svfiprintf_r+0x1ec>)
 8007988:	f000 fa32 	bl	8007df0 <memchr>
 800798c:	1c75      	adds	r5, r6, #1
 800798e:	2800      	cmp	r0, #0
 8007990:	d11f      	bne.n	80079d2 <_svfiprintf_r+0xe6>
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	06d3      	lsls	r3, r2, #27
 8007996:	d504      	bpl.n	80079a2 <_svfiprintf_r+0xb6>
 8007998:	2353      	movs	r3, #83	; 0x53
 800799a:	a904      	add	r1, sp, #16
 800799c:	185b      	adds	r3, r3, r1
 800799e:	2120      	movs	r1, #32
 80079a0:	7019      	strb	r1, [r3, #0]
 80079a2:	0713      	lsls	r3, r2, #28
 80079a4:	d504      	bpl.n	80079b0 <_svfiprintf_r+0xc4>
 80079a6:	2353      	movs	r3, #83	; 0x53
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	185b      	adds	r3, r3, r1
 80079ac:	212b      	movs	r1, #43	; 0x2b
 80079ae:	7019      	strb	r1, [r3, #0]
 80079b0:	7833      	ldrb	r3, [r6, #0]
 80079b2:	2b2a      	cmp	r3, #42	; 0x2a
 80079b4:	d016      	beq.n	80079e4 <_svfiprintf_r+0xf8>
 80079b6:	0035      	movs	r5, r6
 80079b8:	2100      	movs	r1, #0
 80079ba:	200a      	movs	r0, #10
 80079bc:	68e3      	ldr	r3, [r4, #12]
 80079be:	782a      	ldrb	r2, [r5, #0]
 80079c0:	1c6e      	adds	r6, r5, #1
 80079c2:	3a30      	subs	r2, #48	; 0x30
 80079c4:	2a09      	cmp	r2, #9
 80079c6:	d94e      	bls.n	8007a66 <_svfiprintf_r+0x17a>
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d111      	bne.n	80079f0 <_svfiprintf_r+0x104>
 80079cc:	e017      	b.n	80079fe <_svfiprintf_r+0x112>
 80079ce:	3501      	adds	r5, #1
 80079d0:	e7b0      	b.n	8007934 <_svfiprintf_r+0x48>
 80079d2:	4b41      	ldr	r3, [pc, #260]	; (8007ad8 <_svfiprintf_r+0x1ec>)
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	1ac0      	subs	r0, r0, r3
 80079d8:	2301      	movs	r3, #1
 80079da:	4083      	lsls	r3, r0
 80079dc:	4313      	orrs	r3, r2
 80079de:	002e      	movs	r6, r5
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	e7ce      	b.n	8007982 <_svfiprintf_r+0x96>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	1d19      	adds	r1, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	9107      	str	r1, [sp, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	db01      	blt.n	80079f4 <_svfiprintf_r+0x108>
 80079f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079f2:	e004      	b.n	80079fe <_svfiprintf_r+0x112>
 80079f4:	425b      	negs	r3, r3
 80079f6:	60e3      	str	r3, [r4, #12]
 80079f8:	2302      	movs	r3, #2
 80079fa:	4313      	orrs	r3, r2
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	782b      	ldrb	r3, [r5, #0]
 8007a00:	2b2e      	cmp	r3, #46	; 0x2e
 8007a02:	d10a      	bne.n	8007a1a <_svfiprintf_r+0x12e>
 8007a04:	786b      	ldrb	r3, [r5, #1]
 8007a06:	2b2a      	cmp	r3, #42	; 0x2a
 8007a08:	d135      	bne.n	8007a76 <_svfiprintf_r+0x18a>
 8007a0a:	9b07      	ldr	r3, [sp, #28]
 8007a0c:	3502      	adds	r5, #2
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	9207      	str	r2, [sp, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db2b      	blt.n	8007a70 <_svfiprintf_r+0x184>
 8007a18:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1a:	4e30      	ldr	r6, [pc, #192]	; (8007adc <_svfiprintf_r+0x1f0>)
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	0030      	movs	r0, r6
 8007a20:	7829      	ldrb	r1, [r5, #0]
 8007a22:	f000 f9e5 	bl	8007df0 <memchr>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d006      	beq.n	8007a38 <_svfiprintf_r+0x14c>
 8007a2a:	2340      	movs	r3, #64	; 0x40
 8007a2c:	1b80      	subs	r0, r0, r6
 8007a2e:	4083      	lsls	r3, r0
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	3501      	adds	r5, #1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	7829      	ldrb	r1, [r5, #0]
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	4828      	ldr	r0, [pc, #160]	; (8007ae0 <_svfiprintf_r+0x1f4>)
 8007a3e:	1c6e      	adds	r6, r5, #1
 8007a40:	7621      	strb	r1, [r4, #24]
 8007a42:	f000 f9d5 	bl	8007df0 <memchr>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d03c      	beq.n	8007ac4 <_svfiprintf_r+0x1d8>
 8007a4a:	4b26      	ldr	r3, [pc, #152]	; (8007ae4 <_svfiprintf_r+0x1f8>)
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d125      	bne.n	8007a9c <_svfiprintf_r+0x1b0>
 8007a50:	2207      	movs	r2, #7
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	3307      	adds	r3, #7
 8007a56:	4393      	bics	r3, r2
 8007a58:	3308      	adds	r3, #8
 8007a5a:	9307      	str	r3, [sp, #28]
 8007a5c:	6963      	ldr	r3, [r4, #20]
 8007a5e:	9a04      	ldr	r2, [sp, #16]
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	6163      	str	r3, [r4, #20]
 8007a64:	e765      	b.n	8007932 <_svfiprintf_r+0x46>
 8007a66:	4343      	muls	r3, r0
 8007a68:	0035      	movs	r5, r6
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	189b      	adds	r3, r3, r2
 8007a6e:	e7a6      	b.n	80079be <_svfiprintf_r+0xd2>
 8007a70:	2301      	movs	r3, #1
 8007a72:	425b      	negs	r3, r3
 8007a74:	e7d0      	b.n	8007a18 <_svfiprintf_r+0x12c>
 8007a76:	2300      	movs	r3, #0
 8007a78:	200a      	movs	r0, #10
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	6063      	str	r3, [r4, #4]
 8007a80:	7829      	ldrb	r1, [r5, #0]
 8007a82:	1c6e      	adds	r6, r5, #1
 8007a84:	3930      	subs	r1, #48	; 0x30
 8007a86:	2909      	cmp	r1, #9
 8007a88:	d903      	bls.n	8007a92 <_svfiprintf_r+0x1a6>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0c5      	beq.n	8007a1a <_svfiprintf_r+0x12e>
 8007a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a90:	e7c3      	b.n	8007a1a <_svfiprintf_r+0x12e>
 8007a92:	4342      	muls	r2, r0
 8007a94:	0035      	movs	r5, r6
 8007a96:	2301      	movs	r3, #1
 8007a98:	1852      	adds	r2, r2, r1
 8007a9a:	e7f1      	b.n	8007a80 <_svfiprintf_r+0x194>
 8007a9c:	ab07      	add	r3, sp, #28
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	003a      	movs	r2, r7
 8007aa2:	0021      	movs	r1, r4
 8007aa4:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <_svfiprintf_r+0x1fc>)
 8007aa6:	9803      	ldr	r0, [sp, #12]
 8007aa8:	e000      	b.n	8007aac <_svfiprintf_r+0x1c0>
 8007aaa:	bf00      	nop
 8007aac:	9004      	str	r0, [sp, #16]
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	d1d3      	bne.n	8007a5c <_svfiprintf_r+0x170>
 8007ab4:	89bb      	ldrh	r3, [r7, #12]
 8007ab6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ab8:	065b      	lsls	r3, r3, #25
 8007aba:	d400      	bmi.n	8007abe <_svfiprintf_r+0x1d2>
 8007abc:	e72d      	b.n	800791a <_svfiprintf_r+0x2e>
 8007abe:	2001      	movs	r0, #1
 8007ac0:	4240      	negs	r0, r0
 8007ac2:	e72a      	b.n	800791a <_svfiprintf_r+0x2e>
 8007ac4:	ab07      	add	r3, sp, #28
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	003a      	movs	r2, r7
 8007aca:	0021      	movs	r1, r4
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <_svfiprintf_r+0x1fc>)
 8007ace:	9803      	ldr	r0, [sp, #12]
 8007ad0:	f000 f87c 	bl	8007bcc <_printf_i>
 8007ad4:	e7ea      	b.n	8007aac <_svfiprintf_r+0x1c0>
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	080082b9 	.word	0x080082b9
 8007adc:	080082bf 	.word	0x080082bf
 8007ae0:	080082c3 	.word	0x080082c3
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	08007829 	.word	0x08007829

08007aec <_printf_common>:
 8007aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aee:	0015      	movs	r5, r2
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	688a      	ldr	r2, [r1, #8]
 8007af4:	690b      	ldr	r3, [r1, #16]
 8007af6:	000c      	movs	r4, r1
 8007af8:	9000      	str	r0, [sp, #0]
 8007afa:	4293      	cmp	r3, r2
 8007afc:	da00      	bge.n	8007b00 <_printf_common+0x14>
 8007afe:	0013      	movs	r3, r2
 8007b00:	0022      	movs	r2, r4
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	3243      	adds	r2, #67	; 0x43
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	d001      	beq.n	8007b10 <_printf_common+0x24>
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	069b      	lsls	r3, r3, #26
 8007b14:	d502      	bpl.n	8007b1c <_printf_common+0x30>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	3302      	adds	r3, #2
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	2306      	movs	r3, #6
 8007b20:	0017      	movs	r7, r2
 8007b22:	401f      	ands	r7, r3
 8007b24:	421a      	tst	r2, r3
 8007b26:	d027      	beq.n	8007b78 <_printf_common+0x8c>
 8007b28:	0023      	movs	r3, r4
 8007b2a:	3343      	adds	r3, #67	; 0x43
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	1e5a      	subs	r2, r3, #1
 8007b30:	4193      	sbcs	r3, r2
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	0692      	lsls	r2, r2, #26
 8007b36:	d430      	bmi.n	8007b9a <_printf_common+0xae>
 8007b38:	0022      	movs	r2, r4
 8007b3a:	9901      	ldr	r1, [sp, #4]
 8007b3c:	9800      	ldr	r0, [sp, #0]
 8007b3e:	9e08      	ldr	r6, [sp, #32]
 8007b40:	3243      	adds	r2, #67	; 0x43
 8007b42:	47b0      	blx	r6
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d025      	beq.n	8007b94 <_printf_common+0xa8>
 8007b48:	2306      	movs	r3, #6
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	682a      	ldr	r2, [r5, #0]
 8007b4e:	68e1      	ldr	r1, [r4, #12]
 8007b50:	2500      	movs	r5, #0
 8007b52:	4003      	ands	r3, r0
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d103      	bne.n	8007b60 <_printf_common+0x74>
 8007b58:	1a8d      	subs	r5, r1, r2
 8007b5a:	43eb      	mvns	r3, r5
 8007b5c:	17db      	asrs	r3, r3, #31
 8007b5e:	401d      	ands	r5, r3
 8007b60:	68a3      	ldr	r3, [r4, #8]
 8007b62:	6922      	ldr	r2, [r4, #16]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	dd01      	ble.n	8007b6c <_printf_common+0x80>
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	18ed      	adds	r5, r5, r3
 8007b6c:	2700      	movs	r7, #0
 8007b6e:	42bd      	cmp	r5, r7
 8007b70:	d120      	bne.n	8007bb4 <_printf_common+0xc8>
 8007b72:	2000      	movs	r0, #0
 8007b74:	e010      	b.n	8007b98 <_printf_common+0xac>
 8007b76:	3701      	adds	r7, #1
 8007b78:	68e3      	ldr	r3, [r4, #12]
 8007b7a:	682a      	ldr	r2, [r5, #0]
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	42bb      	cmp	r3, r7
 8007b80:	ddd2      	ble.n	8007b28 <_printf_common+0x3c>
 8007b82:	0022      	movs	r2, r4
 8007b84:	2301      	movs	r3, #1
 8007b86:	9901      	ldr	r1, [sp, #4]
 8007b88:	9800      	ldr	r0, [sp, #0]
 8007b8a:	9e08      	ldr	r6, [sp, #32]
 8007b8c:	3219      	adds	r2, #25
 8007b8e:	47b0      	blx	r6
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d1f0      	bne.n	8007b76 <_printf_common+0x8a>
 8007b94:	2001      	movs	r0, #1
 8007b96:	4240      	negs	r0, r0
 8007b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b9a:	2030      	movs	r0, #48	; 0x30
 8007b9c:	18e1      	adds	r1, r4, r3
 8007b9e:	3143      	adds	r1, #67	; 0x43
 8007ba0:	7008      	strb	r0, [r1, #0]
 8007ba2:	0021      	movs	r1, r4
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	3145      	adds	r1, #69	; 0x45
 8007ba8:	7809      	ldrb	r1, [r1, #0]
 8007baa:	18a2      	adds	r2, r4, r2
 8007bac:	3243      	adds	r2, #67	; 0x43
 8007bae:	3302      	adds	r3, #2
 8007bb0:	7011      	strb	r1, [r2, #0]
 8007bb2:	e7c1      	b.n	8007b38 <_printf_common+0x4c>
 8007bb4:	0022      	movs	r2, r4
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9901      	ldr	r1, [sp, #4]
 8007bba:	9800      	ldr	r0, [sp, #0]
 8007bbc:	9e08      	ldr	r6, [sp, #32]
 8007bbe:	321a      	adds	r2, #26
 8007bc0:	47b0      	blx	r6
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d0e6      	beq.n	8007b94 <_printf_common+0xa8>
 8007bc6:	3701      	adds	r7, #1
 8007bc8:	e7d1      	b.n	8007b6e <_printf_common+0x82>
	...

08007bcc <_printf_i>:
 8007bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bce:	b08b      	sub	sp, #44	; 0x2c
 8007bd0:	9206      	str	r2, [sp, #24]
 8007bd2:	000a      	movs	r2, r1
 8007bd4:	3243      	adds	r2, #67	; 0x43
 8007bd6:	9307      	str	r3, [sp, #28]
 8007bd8:	9005      	str	r0, [sp, #20]
 8007bda:	9204      	str	r2, [sp, #16]
 8007bdc:	7e0a      	ldrb	r2, [r1, #24]
 8007bde:	000c      	movs	r4, r1
 8007be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007be2:	2a78      	cmp	r2, #120	; 0x78
 8007be4:	d807      	bhi.n	8007bf6 <_printf_i+0x2a>
 8007be6:	2a62      	cmp	r2, #98	; 0x62
 8007be8:	d809      	bhi.n	8007bfe <_printf_i+0x32>
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	d100      	bne.n	8007bf0 <_printf_i+0x24>
 8007bee:	e0c1      	b.n	8007d74 <_printf_i+0x1a8>
 8007bf0:	2a58      	cmp	r2, #88	; 0x58
 8007bf2:	d100      	bne.n	8007bf6 <_printf_i+0x2a>
 8007bf4:	e08c      	b.n	8007d10 <_printf_i+0x144>
 8007bf6:	0026      	movs	r6, r4
 8007bf8:	3642      	adds	r6, #66	; 0x42
 8007bfa:	7032      	strb	r2, [r6, #0]
 8007bfc:	e022      	b.n	8007c44 <_printf_i+0x78>
 8007bfe:	0010      	movs	r0, r2
 8007c00:	3863      	subs	r0, #99	; 0x63
 8007c02:	2815      	cmp	r0, #21
 8007c04:	d8f7      	bhi.n	8007bf6 <_printf_i+0x2a>
 8007c06:	f7f8 fa87 	bl	8000118 <__gnu_thumb1_case_shi>
 8007c0a:	0016      	.short	0x0016
 8007c0c:	fff6001f 	.word	0xfff6001f
 8007c10:	fff6fff6 	.word	0xfff6fff6
 8007c14:	001ffff6 	.word	0x001ffff6
 8007c18:	fff6fff6 	.word	0xfff6fff6
 8007c1c:	fff6fff6 	.word	0xfff6fff6
 8007c20:	003600a8 	.word	0x003600a8
 8007c24:	fff6009a 	.word	0xfff6009a
 8007c28:	00b9fff6 	.word	0x00b9fff6
 8007c2c:	0036fff6 	.word	0x0036fff6
 8007c30:	fff6fff6 	.word	0xfff6fff6
 8007c34:	009e      	.short	0x009e
 8007c36:	0026      	movs	r6, r4
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	3642      	adds	r6, #66	; 0x42
 8007c3c:	1d11      	adds	r1, r2, #4
 8007c3e:	6019      	str	r1, [r3, #0]
 8007c40:	6813      	ldr	r3, [r2, #0]
 8007c42:	7033      	strb	r3, [r6, #0]
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0a7      	b.n	8007d98 <_printf_i+0x1cc>
 8007c48:	6808      	ldr	r0, [r1, #0]
 8007c4a:	6819      	ldr	r1, [r3, #0]
 8007c4c:	1d0a      	adds	r2, r1, #4
 8007c4e:	0605      	lsls	r5, r0, #24
 8007c50:	d50b      	bpl.n	8007c6a <_printf_i+0x9e>
 8007c52:	680d      	ldr	r5, [r1, #0]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	da03      	bge.n	8007c62 <_printf_i+0x96>
 8007c5a:	232d      	movs	r3, #45	; 0x2d
 8007c5c:	9a04      	ldr	r2, [sp, #16]
 8007c5e:	426d      	negs	r5, r5
 8007c60:	7013      	strb	r3, [r2, #0]
 8007c62:	4b61      	ldr	r3, [pc, #388]	; (8007de8 <_printf_i+0x21c>)
 8007c64:	270a      	movs	r7, #10
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	e01b      	b.n	8007ca2 <_printf_i+0xd6>
 8007c6a:	680d      	ldr	r5, [r1, #0]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	0641      	lsls	r1, r0, #25
 8007c70:	d5f1      	bpl.n	8007c56 <_printf_i+0x8a>
 8007c72:	b22d      	sxth	r5, r5
 8007c74:	e7ef      	b.n	8007c56 <_printf_i+0x8a>
 8007c76:	680d      	ldr	r5, [r1, #0]
 8007c78:	6819      	ldr	r1, [r3, #0]
 8007c7a:	1d08      	adds	r0, r1, #4
 8007c7c:	6018      	str	r0, [r3, #0]
 8007c7e:	062e      	lsls	r6, r5, #24
 8007c80:	d501      	bpl.n	8007c86 <_printf_i+0xba>
 8007c82:	680d      	ldr	r5, [r1, #0]
 8007c84:	e003      	b.n	8007c8e <_printf_i+0xc2>
 8007c86:	066d      	lsls	r5, r5, #25
 8007c88:	d5fb      	bpl.n	8007c82 <_printf_i+0xb6>
 8007c8a:	680d      	ldr	r5, [r1, #0]
 8007c8c:	b2ad      	uxth	r5, r5
 8007c8e:	4b56      	ldr	r3, [pc, #344]	; (8007de8 <_printf_i+0x21c>)
 8007c90:	2708      	movs	r7, #8
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	2a6f      	cmp	r2, #111	; 0x6f
 8007c96:	d000      	beq.n	8007c9a <_printf_i+0xce>
 8007c98:	3702      	adds	r7, #2
 8007c9a:	0023      	movs	r3, r4
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	3343      	adds	r3, #67	; 0x43
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	6863      	ldr	r3, [r4, #4]
 8007ca4:	60a3      	str	r3, [r4, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	db03      	blt.n	8007cb2 <_printf_i+0xe6>
 8007caa:	2204      	movs	r2, #4
 8007cac:	6821      	ldr	r1, [r4, #0]
 8007cae:	4391      	bics	r1, r2
 8007cb0:	6021      	str	r1, [r4, #0]
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	d102      	bne.n	8007cbc <_printf_i+0xf0>
 8007cb6:	9e04      	ldr	r6, [sp, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <_printf_i+0x10a>
 8007cbc:	9e04      	ldr	r6, [sp, #16]
 8007cbe:	0028      	movs	r0, r5
 8007cc0:	0039      	movs	r1, r7
 8007cc2:	f7f8 fab9 	bl	8000238 <__aeabi_uidivmod>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	3e01      	subs	r6, #1
 8007cca:	5c5b      	ldrb	r3, [r3, r1]
 8007ccc:	7033      	strb	r3, [r6, #0]
 8007cce:	002b      	movs	r3, r5
 8007cd0:	0005      	movs	r5, r0
 8007cd2:	429f      	cmp	r7, r3
 8007cd4:	d9f3      	bls.n	8007cbe <_printf_i+0xf2>
 8007cd6:	2f08      	cmp	r7, #8
 8007cd8:	d109      	bne.n	8007cee <_printf_i+0x122>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	07db      	lsls	r3, r3, #31
 8007cde:	d506      	bpl.n	8007cee <_printf_i+0x122>
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	6922      	ldr	r2, [r4, #16]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	dc02      	bgt.n	8007cee <_printf_i+0x122>
 8007ce8:	2330      	movs	r3, #48	; 0x30
 8007cea:	3e01      	subs	r6, #1
 8007cec:	7033      	strb	r3, [r6, #0]
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	1b9b      	subs	r3, r3, r6
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	0021      	movs	r1, r4
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	9805      	ldr	r0, [sp, #20]
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	aa09      	add	r2, sp, #36	; 0x24
 8007d00:	f7ff fef4 	bl	8007aec <_printf_common>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d14c      	bne.n	8007da2 <_printf_i+0x1d6>
 8007d08:	2001      	movs	r0, #1
 8007d0a:	4240      	negs	r0, r0
 8007d0c:	b00b      	add	sp, #44	; 0x2c
 8007d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d10:	3145      	adds	r1, #69	; 0x45
 8007d12:	700a      	strb	r2, [r1, #0]
 8007d14:	4a34      	ldr	r2, [pc, #208]	; (8007de8 <_printf_i+0x21c>)
 8007d16:	9203      	str	r2, [sp, #12]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	6821      	ldr	r1, [r4, #0]
 8007d1c:	ca20      	ldmia	r2!, {r5}
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	0608      	lsls	r0, r1, #24
 8007d22:	d516      	bpl.n	8007d52 <_printf_i+0x186>
 8007d24:	07cb      	lsls	r3, r1, #31
 8007d26:	d502      	bpl.n	8007d2e <_printf_i+0x162>
 8007d28:	2320      	movs	r3, #32
 8007d2a:	4319      	orrs	r1, r3
 8007d2c:	6021      	str	r1, [r4, #0]
 8007d2e:	2710      	movs	r7, #16
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	d1b2      	bne.n	8007c9a <_printf_i+0xce>
 8007d34:	2320      	movs	r3, #32
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	439a      	bics	r2, r3
 8007d3a:	6022      	str	r2, [r4, #0]
 8007d3c:	e7ad      	b.n	8007c9a <_printf_i+0xce>
 8007d3e:	2220      	movs	r2, #32
 8007d40:	6809      	ldr	r1, [r1, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	0022      	movs	r2, r4
 8007d48:	2178      	movs	r1, #120	; 0x78
 8007d4a:	3245      	adds	r2, #69	; 0x45
 8007d4c:	7011      	strb	r1, [r2, #0]
 8007d4e:	4a27      	ldr	r2, [pc, #156]	; (8007dec <_printf_i+0x220>)
 8007d50:	e7e1      	b.n	8007d16 <_printf_i+0x14a>
 8007d52:	0648      	lsls	r0, r1, #25
 8007d54:	d5e6      	bpl.n	8007d24 <_printf_i+0x158>
 8007d56:	b2ad      	uxth	r5, r5
 8007d58:	e7e4      	b.n	8007d24 <_printf_i+0x158>
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	680d      	ldr	r5, [r1, #0]
 8007d5e:	1d10      	adds	r0, r2, #4
 8007d60:	6949      	ldr	r1, [r1, #20]
 8007d62:	6018      	str	r0, [r3, #0]
 8007d64:	6813      	ldr	r3, [r2, #0]
 8007d66:	062e      	lsls	r6, r5, #24
 8007d68:	d501      	bpl.n	8007d6e <_printf_i+0x1a2>
 8007d6a:	6019      	str	r1, [r3, #0]
 8007d6c:	e002      	b.n	8007d74 <_printf_i+0x1a8>
 8007d6e:	066d      	lsls	r5, r5, #25
 8007d70:	d5fb      	bpl.n	8007d6a <_printf_i+0x19e>
 8007d72:	8019      	strh	r1, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	9e04      	ldr	r6, [sp, #16]
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	e7bb      	b.n	8007cf4 <_printf_i+0x128>
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	1d11      	adds	r1, r2, #4
 8007d80:	6019      	str	r1, [r3, #0]
 8007d82:	6816      	ldr	r6, [r2, #0]
 8007d84:	2100      	movs	r1, #0
 8007d86:	0030      	movs	r0, r6
 8007d88:	6862      	ldr	r2, [r4, #4]
 8007d8a:	f000 f831 	bl	8007df0 <memchr>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d001      	beq.n	8007d96 <_printf_i+0x1ca>
 8007d92:	1b80      	subs	r0, r0, r6
 8007d94:	6060      	str	r0, [r4, #4]
 8007d96:	6863      	ldr	r3, [r4, #4]
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9a04      	ldr	r2, [sp, #16]
 8007d9e:	7013      	strb	r3, [r2, #0]
 8007da0:	e7a8      	b.n	8007cf4 <_printf_i+0x128>
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	0032      	movs	r2, r6
 8007da6:	9906      	ldr	r1, [sp, #24]
 8007da8:	9805      	ldr	r0, [sp, #20]
 8007daa:	9d07      	ldr	r5, [sp, #28]
 8007dac:	47a8      	blx	r5
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d0aa      	beq.n	8007d08 <_printf_i+0x13c>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	079b      	lsls	r3, r3, #30
 8007db6:	d415      	bmi.n	8007de4 <_printf_i+0x218>
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	68e0      	ldr	r0, [r4, #12]
 8007dbc:	4298      	cmp	r0, r3
 8007dbe:	daa5      	bge.n	8007d0c <_printf_i+0x140>
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	e7a3      	b.n	8007d0c <_printf_i+0x140>
 8007dc4:	0022      	movs	r2, r4
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	9906      	ldr	r1, [sp, #24]
 8007dca:	9805      	ldr	r0, [sp, #20]
 8007dcc:	9e07      	ldr	r6, [sp, #28]
 8007dce:	3219      	adds	r2, #25
 8007dd0:	47b0      	blx	r6
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d098      	beq.n	8007d08 <_printf_i+0x13c>
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	68e3      	ldr	r3, [r4, #12]
 8007dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	dcf0      	bgt.n	8007dc4 <_printf_i+0x1f8>
 8007de2:	e7e9      	b.n	8007db8 <_printf_i+0x1ec>
 8007de4:	2500      	movs	r5, #0
 8007de6:	e7f7      	b.n	8007dd8 <_printf_i+0x20c>
 8007de8:	080082ca 	.word	0x080082ca
 8007dec:	080082db 	.word	0x080082db

08007df0 <memchr>:
 8007df0:	b2c9      	uxtb	r1, r1
 8007df2:	1882      	adds	r2, r0, r2
 8007df4:	4290      	cmp	r0, r2
 8007df6:	d101      	bne.n	8007dfc <memchr+0xc>
 8007df8:	2000      	movs	r0, #0
 8007dfa:	4770      	bx	lr
 8007dfc:	7803      	ldrb	r3, [r0, #0]
 8007dfe:	428b      	cmp	r3, r1
 8007e00:	d0fb      	beq.n	8007dfa <memchr+0xa>
 8007e02:	3001      	adds	r0, #1
 8007e04:	e7f6      	b.n	8007df4 <memchr+0x4>

08007e06 <memmove>:
 8007e06:	b510      	push	{r4, lr}
 8007e08:	4288      	cmp	r0, r1
 8007e0a:	d902      	bls.n	8007e12 <memmove+0xc>
 8007e0c:	188b      	adds	r3, r1, r2
 8007e0e:	4298      	cmp	r0, r3
 8007e10:	d303      	bcc.n	8007e1a <memmove+0x14>
 8007e12:	2300      	movs	r3, #0
 8007e14:	e007      	b.n	8007e26 <memmove+0x20>
 8007e16:	5c8b      	ldrb	r3, [r1, r2]
 8007e18:	5483      	strb	r3, [r0, r2]
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	d2fb      	bcs.n	8007e16 <memmove+0x10>
 8007e1e:	bd10      	pop	{r4, pc}
 8007e20:	5ccc      	ldrb	r4, [r1, r3]
 8007e22:	54c4      	strb	r4, [r0, r3]
 8007e24:	3301      	adds	r3, #1
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d1fa      	bne.n	8007e20 <memmove+0x1a>
 8007e2a:	e7f8      	b.n	8007e1e <memmove+0x18>

08007e2c <_free_r>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	0005      	movs	r5, r0
 8007e30:	2900      	cmp	r1, #0
 8007e32:	d010      	beq.n	8007e56 <_free_r+0x2a>
 8007e34:	1f0c      	subs	r4, r1, #4
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da00      	bge.n	8007e3e <_free_r+0x12>
 8007e3c:	18e4      	adds	r4, r4, r3
 8007e3e:	0028      	movs	r0, r5
 8007e40:	f000 f918 	bl	8008074 <__malloc_lock>
 8007e44:	4a1d      	ldr	r2, [pc, #116]	; (8007ebc <_free_r+0x90>)
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d105      	bne.n	8007e58 <_free_r+0x2c>
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	6014      	str	r4, [r2, #0]
 8007e50:	0028      	movs	r0, r5
 8007e52:	f000 f917 	bl	8008084 <__malloc_unlock>
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d908      	bls.n	8007e6e <_free_r+0x42>
 8007e5c:	6821      	ldr	r1, [r4, #0]
 8007e5e:	1860      	adds	r0, r4, r1
 8007e60:	4283      	cmp	r3, r0
 8007e62:	d1f3      	bne.n	8007e4c <_free_r+0x20>
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	1841      	adds	r1, r0, r1
 8007e6a:	6021      	str	r1, [r4, #0]
 8007e6c:	e7ee      	b.n	8007e4c <_free_r+0x20>
 8007e6e:	001a      	movs	r2, r3
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <_free_r+0x4e>
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	d9f9      	bls.n	8007e6e <_free_r+0x42>
 8007e7a:	6811      	ldr	r1, [r2, #0]
 8007e7c:	1850      	adds	r0, r2, r1
 8007e7e:	42a0      	cmp	r0, r4
 8007e80:	d10b      	bne.n	8007e9a <_free_r+0x6e>
 8007e82:	6820      	ldr	r0, [r4, #0]
 8007e84:	1809      	adds	r1, r1, r0
 8007e86:	1850      	adds	r0, r2, r1
 8007e88:	6011      	str	r1, [r2, #0]
 8007e8a:	4283      	cmp	r3, r0
 8007e8c:	d1e0      	bne.n	8007e50 <_free_r+0x24>
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	1841      	adds	r1, r0, r1
 8007e94:	6011      	str	r1, [r2, #0]
 8007e96:	6053      	str	r3, [r2, #4]
 8007e98:	e7da      	b.n	8007e50 <_free_r+0x24>
 8007e9a:	42a0      	cmp	r0, r4
 8007e9c:	d902      	bls.n	8007ea4 <_free_r+0x78>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	e7d5      	b.n	8007e50 <_free_r+0x24>
 8007ea4:	6821      	ldr	r1, [r4, #0]
 8007ea6:	1860      	adds	r0, r4, r1
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	d103      	bne.n	8007eb4 <_free_r+0x88>
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	1841      	adds	r1, r0, r1
 8007eb2:	6021      	str	r1, [r4, #0]
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	6054      	str	r4, [r2, #4]
 8007eb8:	e7ca      	b.n	8007e50 <_free_r+0x24>
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	20000b1c 	.word	0x20000b1c

08007ec0 <sbrk_aligned>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4e0f      	ldr	r6, [pc, #60]	; (8007f00 <sbrk_aligned+0x40>)
 8007ec4:	000d      	movs	r5, r1
 8007ec6:	6831      	ldr	r1, [r6, #0]
 8007ec8:	0004      	movs	r4, r0
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d102      	bne.n	8007ed4 <sbrk_aligned+0x14>
 8007ece:	f000 f8bf 	bl	8008050 <_sbrk_r>
 8007ed2:	6030      	str	r0, [r6, #0]
 8007ed4:	0029      	movs	r1, r5
 8007ed6:	0020      	movs	r0, r4
 8007ed8:	f000 f8ba 	bl	8008050 <_sbrk_r>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d00a      	beq.n	8007ef6 <sbrk_aligned+0x36>
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	1cc5      	adds	r5, r0, #3
 8007ee4:	439d      	bics	r5, r3
 8007ee6:	42a8      	cmp	r0, r5
 8007ee8:	d007      	beq.n	8007efa <sbrk_aligned+0x3a>
 8007eea:	1a29      	subs	r1, r5, r0
 8007eec:	0020      	movs	r0, r4
 8007eee:	f000 f8af 	bl	8008050 <_sbrk_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d101      	bne.n	8007efa <sbrk_aligned+0x3a>
 8007ef6:	2501      	movs	r5, #1
 8007ef8:	426d      	negs	r5, r5
 8007efa:	0028      	movs	r0, r5
 8007efc:	bd70      	pop	{r4, r5, r6, pc}
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	20000b20 	.word	0x20000b20

08007f04 <_malloc_r>:
 8007f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f06:	2203      	movs	r2, #3
 8007f08:	1ccb      	adds	r3, r1, #3
 8007f0a:	4393      	bics	r3, r2
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	0006      	movs	r6, r0
 8007f10:	001f      	movs	r7, r3
 8007f12:	2b0c      	cmp	r3, #12
 8007f14:	d232      	bcs.n	8007f7c <_malloc_r+0x78>
 8007f16:	270c      	movs	r7, #12
 8007f18:	42b9      	cmp	r1, r7
 8007f1a:	d831      	bhi.n	8007f80 <_malloc_r+0x7c>
 8007f1c:	0030      	movs	r0, r6
 8007f1e:	f000 f8a9 	bl	8008074 <__malloc_lock>
 8007f22:	4d32      	ldr	r5, [pc, #200]	; (8007fec <_malloc_r+0xe8>)
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	001c      	movs	r4, r3
 8007f28:	2c00      	cmp	r4, #0
 8007f2a:	d12e      	bne.n	8007f8a <_malloc_r+0x86>
 8007f2c:	0039      	movs	r1, r7
 8007f2e:	0030      	movs	r0, r6
 8007f30:	f7ff ffc6 	bl	8007ec0 <sbrk_aligned>
 8007f34:	0004      	movs	r4, r0
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	d11e      	bne.n	8007f78 <_malloc_r+0x74>
 8007f3a:	682c      	ldr	r4, [r5, #0]
 8007f3c:	0025      	movs	r5, r4
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	d14a      	bne.n	8007fd8 <_malloc_r+0xd4>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	0029      	movs	r1, r5
 8007f46:	18e3      	adds	r3, r4, r3
 8007f48:	0030      	movs	r0, r6
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	f000 f880 	bl	8008050 <_sbrk_r>
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	4283      	cmp	r3, r0
 8007f54:	d143      	bne.n	8007fde <_malloc_r+0xda>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	3703      	adds	r7, #3
 8007f5a:	1aff      	subs	r7, r7, r3
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	439f      	bics	r7, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	2f0c      	cmp	r7, #12
 8007f64:	d200      	bcs.n	8007f68 <_malloc_r+0x64>
 8007f66:	270c      	movs	r7, #12
 8007f68:	0039      	movs	r1, r7
 8007f6a:	0030      	movs	r0, r6
 8007f6c:	f7ff ffa8 	bl	8007ec0 <sbrk_aligned>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d034      	beq.n	8007fde <_malloc_r+0xda>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	19df      	adds	r7, r3, r7
 8007f78:	6027      	str	r7, [r4, #0]
 8007f7a:	e013      	b.n	8007fa4 <_malloc_r+0xa0>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dacb      	bge.n	8007f18 <_malloc_r+0x14>
 8007f80:	230c      	movs	r3, #12
 8007f82:	2500      	movs	r5, #0
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	0028      	movs	r0, r5
 8007f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	1bd1      	subs	r1, r2, r7
 8007f8e:	d420      	bmi.n	8007fd2 <_malloc_r+0xce>
 8007f90:	290b      	cmp	r1, #11
 8007f92:	d917      	bls.n	8007fc4 <_malloc_r+0xc0>
 8007f94:	19e2      	adds	r2, r4, r7
 8007f96:	6027      	str	r7, [r4, #0]
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d111      	bne.n	8007fc0 <_malloc_r+0xbc>
 8007f9c:	602a      	str	r2, [r5, #0]
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	6011      	str	r1, [r2, #0]
 8007fa2:	6053      	str	r3, [r2, #4]
 8007fa4:	0030      	movs	r0, r6
 8007fa6:	0025      	movs	r5, r4
 8007fa8:	f000 f86c 	bl	8008084 <__malloc_unlock>
 8007fac:	2207      	movs	r2, #7
 8007fae:	350b      	adds	r5, #11
 8007fb0:	1d23      	adds	r3, r4, #4
 8007fb2:	4395      	bics	r5, r2
 8007fb4:	1aea      	subs	r2, r5, r3
 8007fb6:	429d      	cmp	r5, r3
 8007fb8:	d0e5      	beq.n	8007f86 <_malloc_r+0x82>
 8007fba:	1b5b      	subs	r3, r3, r5
 8007fbc:	50a3      	str	r3, [r4, r2]
 8007fbe:	e7e2      	b.n	8007f86 <_malloc_r+0x82>
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	e7ec      	b.n	8007f9e <_malloc_r+0x9a>
 8007fc4:	6862      	ldr	r2, [r4, #4]
 8007fc6:	42a3      	cmp	r3, r4
 8007fc8:	d101      	bne.n	8007fce <_malloc_r+0xca>
 8007fca:	602a      	str	r2, [r5, #0]
 8007fcc:	e7ea      	b.n	8007fa4 <_malloc_r+0xa0>
 8007fce:	605a      	str	r2, [r3, #4]
 8007fd0:	e7e8      	b.n	8007fa4 <_malloc_r+0xa0>
 8007fd2:	0023      	movs	r3, r4
 8007fd4:	6864      	ldr	r4, [r4, #4]
 8007fd6:	e7a7      	b.n	8007f28 <_malloc_r+0x24>
 8007fd8:	002c      	movs	r4, r5
 8007fda:	686d      	ldr	r5, [r5, #4]
 8007fdc:	e7af      	b.n	8007f3e <_malloc_r+0x3a>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	0030      	movs	r0, r6
 8007fe2:	6033      	str	r3, [r6, #0]
 8007fe4:	f000 f84e 	bl	8008084 <__malloc_unlock>
 8007fe8:	e7cd      	b.n	8007f86 <_malloc_r+0x82>
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	20000b1c 	.word	0x20000b1c

08007ff0 <_realloc_r>:
 8007ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ff2:	0007      	movs	r7, r0
 8007ff4:	000e      	movs	r6, r1
 8007ff6:	0014      	movs	r4, r2
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d105      	bne.n	8008008 <_realloc_r+0x18>
 8007ffc:	0011      	movs	r1, r2
 8007ffe:	f7ff ff81 	bl	8007f04 <_malloc_r>
 8008002:	0005      	movs	r5, r0
 8008004:	0028      	movs	r0, r5
 8008006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008008:	2a00      	cmp	r2, #0
 800800a:	d103      	bne.n	8008014 <_realloc_r+0x24>
 800800c:	f7ff ff0e 	bl	8007e2c <_free_r>
 8008010:	0025      	movs	r5, r4
 8008012:	e7f7      	b.n	8008004 <_realloc_r+0x14>
 8008014:	f000 f83e 	bl	8008094 <_malloc_usable_size_r>
 8008018:	9001      	str	r0, [sp, #4]
 800801a:	4284      	cmp	r4, r0
 800801c:	d803      	bhi.n	8008026 <_realloc_r+0x36>
 800801e:	0035      	movs	r5, r6
 8008020:	0843      	lsrs	r3, r0, #1
 8008022:	42a3      	cmp	r3, r4
 8008024:	d3ee      	bcc.n	8008004 <_realloc_r+0x14>
 8008026:	0021      	movs	r1, r4
 8008028:	0038      	movs	r0, r7
 800802a:	f7ff ff6b 	bl	8007f04 <_malloc_r>
 800802e:	1e05      	subs	r5, r0, #0
 8008030:	d0e8      	beq.n	8008004 <_realloc_r+0x14>
 8008032:	9b01      	ldr	r3, [sp, #4]
 8008034:	0022      	movs	r2, r4
 8008036:	429c      	cmp	r4, r3
 8008038:	d900      	bls.n	800803c <_realloc_r+0x4c>
 800803a:	001a      	movs	r2, r3
 800803c:	0031      	movs	r1, r6
 800803e:	0028      	movs	r0, r5
 8008040:	f7ff fb04 	bl	800764c <memcpy>
 8008044:	0031      	movs	r1, r6
 8008046:	0038      	movs	r0, r7
 8008048:	f7ff fef0 	bl	8007e2c <_free_r>
 800804c:	e7da      	b.n	8008004 <_realloc_r+0x14>
	...

08008050 <_sbrk_r>:
 8008050:	2300      	movs	r3, #0
 8008052:	b570      	push	{r4, r5, r6, lr}
 8008054:	4d06      	ldr	r5, [pc, #24]	; (8008070 <_sbrk_r+0x20>)
 8008056:	0004      	movs	r4, r0
 8008058:	0008      	movs	r0, r1
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	f7fa ff9c 	bl	8002f98 <_sbrk>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d103      	bne.n	800806c <_sbrk_r+0x1c>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d000      	beq.n	800806c <_sbrk_r+0x1c>
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	bd70      	pop	{r4, r5, r6, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	20000b24 	.word	0x20000b24

08008074 <__malloc_lock>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4802      	ldr	r0, [pc, #8]	; (8008080 <__malloc_lock+0xc>)
 8008078:	f000 f814 	bl	80080a4 <__retarget_lock_acquire_recursive>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	20000b28 	.word	0x20000b28

08008084 <__malloc_unlock>:
 8008084:	b510      	push	{r4, lr}
 8008086:	4802      	ldr	r0, [pc, #8]	; (8008090 <__malloc_unlock+0xc>)
 8008088:	f000 f80d 	bl	80080a6 <__retarget_lock_release_recursive>
 800808c:	bd10      	pop	{r4, pc}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	20000b28 	.word	0x20000b28

08008094 <_malloc_usable_size_r>:
 8008094:	1f0b      	subs	r3, r1, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	1f18      	subs	r0, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	da01      	bge.n	80080a2 <_malloc_usable_size_r+0xe>
 800809e:	580b      	ldr	r3, [r1, r0]
 80080a0:	18c0      	adds	r0, r0, r3
 80080a2:	4770      	bx	lr

080080a4 <__retarget_lock_acquire_recursive>:
 80080a4:	4770      	bx	lr

080080a6 <__retarget_lock_release_recursive>:
 80080a6:	4770      	bx	lr

080080a8 <_init>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ae:	bc08      	pop	{r3}
 80080b0:	469e      	mov	lr, r3
 80080b2:	4770      	bx	lr

080080b4 <_fini>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ba:	bc08      	pop	{r3}
 80080bc:	469e      	mov	lr, r3
 80080be:	4770      	bx	lr
